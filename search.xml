<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/15/hello-world/"/>
      <url>/2021/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>权限及如何设计数据库</title>
      <link href="/2021/08/14/quan-xian-ji-ru-he-she-ji-shu-ju-ku/"/>
      <url>/2021/08/14/quan-xian-ji-ru-he-she-ji-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="权限及如何设计数据库"><a href="#权限及如何设计数据库" class="headerlink" title="权限及如何设计数据库"></a>权限及如何设计数据库</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote><p>使用SQLyog 创建用户，并授予权限演示</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Jf7deolwQa44rXvicIhXZ0NGL4sZKg8nicBGrYlEBJh1V3ymJ4WzBx9zXsIZyPYFADJBzn0ibCmgiauA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>基本命令</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/* 用户和权限管理 */ ------------------用户信息表：mysql.user-- 刷新权限FLUSH PRIVILEGES-- 增加用户 CREATE USER kuangshen IDENTIFIED BY '123456'CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)  - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。  - 只能创建用户，不能赋予权限。  - 用户名，注意引号：如 'user_name'@'192.168.1.1'  - 密码也需引号，纯数字密码也要加引号  - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD-- 重命名用户 RENAME USER kuangshen TO kuangshen2RENAME USER old_user TO new_user-- 设置密码SET PASSWORD = PASSWORD('密码')    -- 为当前用户设置密码SET PASSWORD FOR 用户名 = PASSWORD('密码')    -- 为指定用户设置密码-- 删除用户 DROP USER kuangshen2DROP USER 用户名-- 分配权限/添加用户GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] 'password']  - all privileges 表示所有权限  - *.* 表示所有库的所有表  - 库名.表名 表示某库下面的某表-- 查看权限   SHOW GRANTS FOR root@localhost;SHOW GRANTS FOR 用户名   -- 查看当前用户权限  SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();-- 撤消权限REVOKE 权限列表 ON 表名 FROM 用户名REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名    -- 撤销所有权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>权限解释</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 权限列表ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限ALTER    -- 允许使用ALTER TABLEALTER ROUTINE    -- 更改或取消已存储的子程序CREATE    -- 允许使用CREATE TABLECREATE ROUTINE    -- 创建已存储的子程序CREATE TEMPORARY TABLES        -- 允许使用CREATE TEMPORARY TABLECREATE USER        -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。CREATE VIEW        -- 允许使用CREATE VIEWDELETE    -- 允许使用DELETEDROP    -- 允许使用DROP TABLEEXECUTE        -- 允许用户运行已存储的子程序FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILEINDEX     -- 允许使用CREATE INDEX和DROP INDEXINSERT    -- 允许使用INSERTLOCK TABLES        -- 允许对您拥有SELECT权限的表使用LOCK TABLESPROCESS     -- 允许使用SHOW FULL PROCESSLISTREFERENCES    -- 未被实施RELOAD    -- 允许使用FLUSHREPLICATION CLIENT    -- 允许用户询问从属服务器或主服务器的地址REPLICATION SLAVE    -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）SELECT    -- 允许使用SELECTSHOW DATABASES    -- 显示所有数据库SHOW VIEW    -- 允许使用SHOW CREATE VIEWSHUTDOWN    -- 允许使用mysqladmin shutdownSUPER    -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。UPDATE    -- 允许使用UPDATEUSAGE    -- “无权限”的同义词GRANT OPTION    -- 允许授予权限/* 表维护 */-- 分析和存储表的关键字分布ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...-- 检查一个或多个表是否有错误CHECK TABLE tbl_name [, tbl_name] ... [option] ...option = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}-- 整理数据文件的碎片OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h3><p>数据库备份必要性</p><ul><li>保证重要数据不丢失</li><li>数据转移</li></ul><p>MySQL数据库备份方法</p><ul><li>mysqldump备份工具</li><li>数据库管理工具,如SQLyog</li><li>直接拷贝数据库文件和相关配置文件</li></ul><p><strong>mysqldump客户端</strong></p><p>作用 :</p><ul><li>转储数据库</li><li>搜集数据库进行备份</li><li>将数据转移到另一个SQL服务器,不一定是MySQL服务器</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Jf7deolwQa44rXvicIhXZ0NzgWJWeyYYcf1Dy3ibfN66SiaZQmqTF3Hv8HBjr1zIowXh201pEjUzyJw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 导出1. 导出一张表 -- mysqldump -uroot -p123456 school student &gt;D:/a.sql　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)2. 导出多张表 -- mysqldump -uroot -p123456 school student result &gt;D:/a.sql　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)3. 导出所有表 -- mysqldump -uroot -p123456 school &gt;D:/a.sql　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)4. 导出一个库 -- mysqldump -uroot -p123456 -B school &gt;D:/a.sql　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:/a.sql)可以-w携带备份条件-- 导入1. 在登录mysql的情况下：-- source D:/a.sql　　source 备份文件2. 在不登录的情况下　　mysql -u用户名 -p密码 库名 &lt; 备份文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="规范化数据库设计"><a href="#规范化数据库设计" class="headerlink" title="规范化数据库设计"></a>规范化数据库设计</h2><h3 id="为什么需要数据库设计"><a href="#为什么需要数据库设计" class="headerlink" title="为什么需要数据库设计"></a>为什么需要数据库设计</h3><p><strong>当数据库比较复杂时我们需要设计数据库</strong></p><p><strong>糟糕的数据库设计 :</strong> </p><ul><li>数据冗余,存储空间浪费</li><li>数据更新和插入的异常</li><li>程序性能差</li></ul><p><strong>良好的数据库设计 :</strong> </p><ul><li>节省数据的存储空间</li><li>能够保证数据的完整性</li><li>方便进行数据库应用系统的开发</li></ul><p> <strong>软件项目开发周期中数据库设计 :</strong></p><ul><li>需求分析阶段: 分析客户的业务和数据处理需求</li><li>概要设计阶段:设计数据库的E-R模型图 , 确认需求信息的正确和完整.</li></ul><p><strong>设计数据库步骤</strong></p><ul><li><p>收集信息</p></li><li><ul><li>与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</li></ul></li><li><p>标识实体[Entity]</p></li><li></li><li><ul><li>标识数据库要管理的关键对象或实体,实体一般是名词</li></ul></li><li><p>标识每个实体需要存储的详细信息[Attribute]</p></li><li><p>标识实体之间的关系[Relationship]</p></li></ul><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p><strong>问题 : 为什么需要数据规范化?</strong></p><p>不合规范的表设计会导致的问题：</p><ul><li><p>信息重复</p></li><li><p>更新异常</p></li><li><p>插入异常</p></li><li><ul><li>无法正确表示信息</li></ul></li><li><p>删除异常</p></li><li><ul><li>丢失有效信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p><strong>第一范式 (1st NF)</strong></p><p>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式</p><p><strong>第二范式(2nd NF)</strong></p><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p><p>第二范式要求每个表只描述一件事情</p><p><strong>第三范式(3rd NF)</strong></p><p>如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式.</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p><strong>规范化和性能的关系</strong></p><p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p><p>在数据规范化的同时 , 要综合考虑数据库的性能</p><p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p><p>通过在给定的表中插入计算列,以方便查询</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务和索引</title>
      <link href="/2021/08/14/shi-wu-he-suo-yin/"/>
      <url>/2021/08/14/shi-wu-he-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="事务和索引"><a href="#事务和索引" class="headerlink" title="事务和索引"></a>事务和索引</h2><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>什么是事务</p></blockquote><ul><li>事务就是将一组SQL语句放在同一批次内去执行</li><li>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</li><li>MySQL事务处理只支持InnoDB和BDB数据表类型</li></ul><blockquote><p>事务的ACID原则  百度 ACID</p></blockquote><p><strong>原子性(Atomic)</strong></p><ul><li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li></ul><p><strong>一致性(Consist)</strong></p><ul><li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li></ul><p><strong>隔离性(Isolated)</strong></p><ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul><p><strong>持久性(Durable)</strong></p><ul><li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li></ul><blockquote><p><strong>基本语法</strong></p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 使用set语句来改变自动提交模式SET autocommit = 0;   /*关闭*/SET autocommit = 1;   /*开启*/-- 注意:--- 1.MySQL中默认是自动提交--- 2.使用事务时应先关闭自动提交-- 开始一个事务,标记事务的起始点START TRANSACTION  -- 提交一个事务给数据库COMMIT-- 将事务回滚,数据回到本次事务的初始状态ROLLBACK-- 还原MySQL数据库的自动提交SET autocommit =1;-- 保存点SAVEPOINT 保存点名称 -- 设置一个事务保存点ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点RELEASE SAVEPOINT 保存点名称 -- 删除保存点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*课堂测试题目A在线买一款价格为500元商品,网上银行转账.A的银行卡余额为2000,然后给商家B支付500.商家B一开始的银行卡余额为10000创建数据库shop和创建表account并插入2条数据*/CREATE DATABASE `shop`CHARACTER SET utf8 COLLATE utf8_general_ci;USE `shop`;CREATE TABLE `account` (`id` INT(11) NOT NULL AUTO_INCREMENT,`name` VARCHAR(32) NOT NULL,`cash` DECIMAL(9,2) NOT NULL,PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8INSERT INTO account (`name`,`cash`)VALUES('A',2000.00),('B',10000.00)-- 转账实现SET autocommit = 0; -- 关闭自动提交START TRANSACTION;  -- 开始一个事务,标记事务的起始点UPDATE account SET cash=cash-500 WHERE `name`='A';UPDATE account SET cash=cash+500 WHERE `name`='B';COMMIT; -- 提交事务# rollback;SET autocommit = 1; -- 恢复自动提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>索引的作用</p></blockquote><ul><li>提高查询速度</li><li>确保数据的唯一性</li><li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li><li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li><li>全文检索字段进行搜索优化.</li></ul><blockquote><p>分类</p></blockquote><ul><li>主键索引 (Primary Key)</li><li>唯一索引 (Unique)</li><li>常规索引 (Index)</li><li>全文索引 (FullText)</li></ul><blockquote><p>主键索引</p></blockquote><p>主键 : 某一个属性组能唯一标识一条记录</p><p>特点 :</p><ul><li>最常见的索引类型</li><li>确保数据记录的唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul><blockquote><p>唯一索引</p></blockquote><p>作用 : 避免同一个表中某数据列中的值重复</p><p>与主键索引的区别</p><ul><li>主键索引只能有一个</li><li>唯一索引可能有多个</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `Grade`(  `GradeID` INT(11) AUTO_INCREMENT PRIMARYKEY,  `GradeName` VARCHAR(32) NOT NULL UNIQUE   -- 或 UNIQUE KEY `GradeID` (`GradeID`))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>常规索引</p></blockquote><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>index 和 key 关键字都可以设置常规索引</li><li>应加在查询找条件的字段</li><li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `result`(   -- 省略一些代码  INDEX/KEY `ind` (`studentNo`,`subjectNo`) -- 创建表时添加)-- 创建后添加ALTER TABLE `result` ADD INDEX `ind`(`studentNo`,`subjectNo`);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>全文索引</p></blockquote><p>百度搜索：全文索引</p><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>只能用于MyISAM类型的数据表</li><li>只能用于CHAR , VARCHAR , TEXT数据列类型</li><li>适合大型数据集</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*#方法一：创建表时  　　CREATE TABLE 表名 (               字段名1 数据类型 [完整性约束条件…],               字段名2 数据类型 [完整性约束条件…],               [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY               [索引名] (字段名[(长度)] [ASC |DESC])               );#方法二：CREATE在已存在的表上创建索引       CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名                    ON 表名 (字段名[(长度)] [ASC |DESC]) ;#方法三：ALTER TABLE在已存在的表上创建索引       ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX                            索引名 (字段名[(长度)] [ASC |DESC]) ;                                                      #删除索引：DROP INDEX 索引名 ON 表名字;#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;#显示索引信息: SHOW INDEX FROM student;*//*增加全文索引*/ALTER TABLE `school`.`student` ADD FULLTEXT INDEX `studentname` (`StudentName`);/*EXPLAIN : 分析SQL语句执行性能*/EXPLAIN SELECT * FROM student WHERE studentno='1000';/*使用全文索引*/-- 全文搜索通过 MATCH() 函数完成。-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。EXPLAIN SELECT *FROM student WHERE MATCH(studentname) AGAINST('love');/*开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>拓展：测试索引</p></blockquote><p><strong>建表app_user：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `app_user` (`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,`name` varchar(50) DEFAULT '' COMMENT '用户昵称',`email` varchar(50) NOT NULL COMMENT '用户邮箱',`phone` varchar(20) DEFAULT '' COMMENT '手机号',`gender` tinyint(4) unsigned DEFAULT '0' COMMENT '性别（0:男；1：女）',`password` varchar(100) NOT NULL COMMENT '密码',`age` tinyint(4) DEFAULT '0' COMMENT '年龄',`create_time` datetime DEFAULT CURRENT_TIMESTAMP,`update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='app用户表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>批量插入数据：100w</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP FUNCTION IF EXISTS mock_data;DELIMITER $$CREATE FUNCTION mock_data()RETURNS INTBEGINDECLARE num INT DEFAULT 1000000;DECLARE i INT DEFAULT 0;WHILE i &lt; num DO  INSERT INTO app_user(`name`, `email`, `phone`, `gender`, `password`, `age`)   VALUES(CONCAT('用户', i), '24736743@qq.com', CONCAT('18', FLOOR(RAND()*(999999999-100000000)+100000000)),FLOOR(RAND()*2),UUID(), FLOOR(RAND()*100));  SET i = i + 1;END WHILE;RETURN i;END;SELECT mock_data();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>索引效率测试</strong></p><p>无索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM app_user WHERE name = '用户9999'; -- 查看耗时SELECT * FROM app_user WHERE name = '用户9999';SELECT * FROM app_user WHERE name = '用户9999';mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name = '用户9999'\G*************************** 1. row ***************************          id: 1select_type: SIMPLE       table: app_user  partitions: NULL        type: ALLpossible_keys: NULL        key: NULL    key_len: NULL        ref: NULL        rows: 992759    filtered: 10.00      Extra: Using where1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX idx_app_user_name ON app_user(name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试普通索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name = '用户9999'\G*************************** 1. row ***************************          id: 1select_type: SIMPLE       table: app_user  partitions: NULL        type: refpossible_keys: idx_app_user_name        key: idx_app_user_name    key_len: 203        ref: const        rows: 1    filtered: 100.00      Extra: NULL1 row in set, 1 warning (0.00 sec)mysql&gt; SELECT * FROM app_user WHERE name = '用户9999';1 row in set (0.00 sec)mysql&gt; SELECT * FROM app_user WHERE name = '用户9999';1 row in set (0.00 sec)mysql&gt; SELECT * FROM app_user WHERE name = '用户9999';1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>索引准则</p></blockquote><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表建议不要加索引</li><li>索引一般应加在查找条件的字段</li></ul><blockquote><p>索引的数据结构</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类hash类型的索引：查询单条快，范围查询慢btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）-- 不同的存储引擎支持的索引类型也不一样InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL函数</title>
      <link href="/2021/08/14/mysql-han-shu/"/>
      <url>/2021/08/14/mysql-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用DQL查询数据</title>
      <link href="/2021/08/14/shi-yong-dql-cha-xun-shu-ju/"/>
      <url>/2021/08/14/shi-yong-dql-cha-xun-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="使用DQL查询数据"><a href="#使用DQL查询数据" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句"><a href="#where条件语句" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>七种Join：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDw5aZLehIYzwLprCfqdxSjsm2wficHrSEzJiaJBGaKWpatQ7sISib9MgCQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DML语言</title>
      <link href="/2021/08/14/dml-yu-yan/"/>
      <url>/2021/08/14/dml-yu-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h2><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><blockquote><p>外键概念</p></blockquote><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。</p><p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p><p><strong>外键作用</strong></p><p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p><blockquote><p>创建外键</p></blockquote><p>建表时指定外键约束</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建外键的方式一 : 创建子表同时创建外键-- 年级表 (id\年级名称)CREATE TABLE `grade` (`gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT '年级ID',`gradename` VARCHAR(50) NOT NULL COMMENT '年级名称',PRIMARY KEY (`gradeid`)) ENGINE=INNODB DEFAULT CHARSET=utf8-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)CREATE TABLE `student` (`studentno` INT(4) NOT NULL COMMENT '学号',`studentname` VARCHAR(20) NOT NULL DEFAULT '匿名' COMMENT '姓名',`sex` TINYINT(1) DEFAULT '1' COMMENT '性别',`gradeid` INT(10) DEFAULT NULL COMMENT '年级',`phoneNum` VARCHAR(50) NOT NULL COMMENT '手机',`address` VARCHAR(255) DEFAULT NULL COMMENT '地址',`borndate` DATETIME DEFAULT NULL COMMENT '生日',`email` VARCHAR(50) DEFAULT NULL COMMENT '邮箱',`idCard` VARCHAR(18) DEFAULT NULL COMMENT '身份证号',PRIMARY KEY (`studentno`),KEY `FK_gradeid` (`gradeid`),CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade` (`gradeid`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建表后修改</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建外键方式二 : 创建子表完毕后,修改子表添加外键ALTER TABLE `student`ADD CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade` (`gradeid`);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>删除外键</p></blockquote><p>操作：删除 grade 表，发现报错</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LCI6xGKJ7bKiaBudOSBHd9dAFiaLn6yfOjQtCB0o2bo5uaJH6GKpmGXVCbrFKSzQOeMKpPbG57dIgA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>注意</strong> : 删除具有主外键关系的表时 , 要先删子表 , 后删主表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除外键ALTER TABLE student DROP FOREIGN KEY FK_gradeid;-- 发现执行完上面的,索引还在,所以还要删除索引-- 注:这个索引是建立外键的时候默认生成的ALTER TABLE student DROP INDEX FK_gradeid;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DML语言-1"><a href="#DML语言-1" class="headerlink" title="DML语言"></a>DML语言</h3><p><strong>数据库意义</strong> ： 数据存储、数据管理</p><p><strong>管理数据库数据方法：</strong></p><ul><li>通过SQLyog等管理工具管理数据库数据</li><li>通过<strong>DML语句</strong>管理数据库数据</li></ul><p><strong>DML语言</strong>  ：数据操作语言</p><ul><li><p>用于操作数据库对象中所包含的数据</p></li><li><p>包括 :</p></li><li><ul><li>INSERT (添加数据语句)</li><li>UPDATE (更新数据语句)</li><li>DELETE (删除数据语句)</li></ul></li></ul><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><blockquote><p>INSERT命令</p></blockquote><p><strong>语法：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES('值1','值2','值3')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意 :</strong> </p><ul><li>字段或值之间用英文逗号隔开 .</li><li>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</li><li>可同时插入多条数据 , values 后用英文逗号隔开 .</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 使用语句如何增加语句?-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES('值1','值2','值3')INSERT INTO grade(gradename) VALUES ('大一');-- 主键自增,那能否省略呢?INSERT INTO grade VALUES ('大二');-- 查询:INSERT INTO grade VALUE ('大二')错误代码：1136Column count doesn`t match value count at row 1-- 结论:'字段1,字段2...'该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致.-- 一次插入多条数据INSERT INTO grade(gradename) VALUES ('大三'),('大四');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习题目</strong> </p><p>自己使用INSERT语句为课程表subject添加数据 . 使用到外键.</p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><blockquote><p>update命令</p></blockquote><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE 表名 SET column_name=value [,column_name2=value2,...] [WHERE condition];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意 :</strong> </p><ul><li>column_name 为要更改的数据列</li><li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</li><li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li></ul><blockquote><p>where条件子句</p></blockquote><p>可以简单的理解为 : 有条件地从表中筛选数据</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LCI6xGKJ7bKiaBudOSBHd9dyJWPxp3H9GicphPXMEvCwtUyKX3vibUCESqSaDnKnLzlwYpcRTJsdUIg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片">测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 修改年级信息UPDATE grade SET gradename = '高中' WHERE gradeid = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote><p>DELETE命令</p></blockquote><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM 表名 [WHERE condition];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除最后一个数据DELETE FROM grade WHERE gradeid = 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>TRUNCATE命令</p></blockquote><p>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 ;</p><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TRUNCATE [TABLE] table_name;-- 清空年级表TRUNCATE grade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：区别于DELETE命令</strong></p><ul><li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p></li><li><p>不同 :</p></li><li><ul><li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li><li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li></ul></li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建一个测试表CREATE TABLE `test` (`id` INT(4) NOT NULL AUTO_INCREMENT,`coll` VARCHAR(20) NOT NULL,PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8-- 插入几个测试数据INSERT INTO test(coll) VALUES('row1'),('row2'),('row3');-- 删除表数据(不带where条件的delete)DELETE FROM test;-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.-- 删除表数据(truncate)TRUNCATE TABLE test;-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.-- 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后-- InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)-- MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库操作</title>
      <link href="/2021/08/14/shu-ju-ku-cao-zuo/"/>
      <url>/2021/08/14/shu-ju-ku-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="结构化查询语句分类"><a href="#结构化查询语句分类" class="headerlink" title="结构化查询语句分类"></a>结构化查询语句分类</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QOGpDicLzwS6NJVAeLECu2rx2qboGU36S9hXLov0x0c5vzZAceySSXnA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h3 id="数据库操作-1"><a href="#数据库操作-1" class="headerlink" title="数据库操作"></a>数据库操作</h3><blockquote><p>命令行操作数据库</p></blockquote><p>创建数据库 :  create database [if not exists] 数据库名;</p><p>删除数据库 : drop database [if exists] 数据库名;</p><p>查看数据库 : show databases;</p><p>使用数据库 : use 数据库名;</p><blockquote><p>对比工具操作数据库</p></blockquote><p><strong>学习方法：</strong></p><ul><li>对照SQLyog工具自动生成的语句学习</li><li>固定语法中的单词需要记忆</li><li><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Q2ITxibRRsQuuqibHorhqzYI83QYKRUVpMLCPA1chKQ39eUFQibJ2fwWFg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></li></ul><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>属于DDL的一种，语法 :</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">create table <span class="token punctuation">[</span>if not exists<span class="token punctuation">]</span> <span class="token variable"><span class="token variable">`</span>表名<span class="token variable">`</span></span><span class="token punctuation">(</span>   <span class="token string">'字段名1'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span>,   <span class="token string">'字段名2'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span>,  <span class="token comment">#...</span>   <span class="token string">'字段名n'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>表类型<span class="token punctuation">]</span><span class="token punctuation">[</span>表字符集<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明 :</strong> 反引号用于区别MySQL保留字与普通字符而引入的 (键盘esc下面的键).</p><h3 id="数据值和列类型"><a href="#数据值和列类型" class="headerlink" title="数据值和列类型"></a>数据值和列类型</h3><p>列类型 : 规定数据库中该列存放的数据类型</p><blockquote><p>数值类型</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QLXRrfmQjbUt3O7sLw0KKv9UtriaTr60JspXIZ69HkeOiagz86CE3a9Wg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>字符串类型</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QsjOPftNfn1ibXSP8OIYnsJaaPC8da61jCzcbdkqbApibQWgQ7KBjYbuw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>日期和时间型数值类型</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Qcib3OwGtWEJkEE2biaa4jT3xokY1UicPT1MQcQNsa1EsjiaIqM1vvyUPjg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>NULL值</p></blockquote><ul><li>理解为 “没有值” 或 “未知值”</li><li>不要用NULL进行算术运算 , 结果仍为NULL</li></ul><h3 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h3><p><strong>UnSigned</strong></p><ul><li>无符号的</li><li>声明该数据列不允许负数 .</li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_InCrement</strong></p><ul><li><p>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</p></li><li><p>通常用于设置<strong>主键</strong> , 且为整数类型</p></li><li><p>可定义起始值和步长</p></li><li><ul><li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li><li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的</li><li>用于设置默认值</li><li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-- 目标 <span class="token builtin class-name">:</span> 创建一个school数据库-- 创建学生表<span class="token punctuation">(</span>列,字段<span class="token punctuation">)</span>-- 学号int 登录密码varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> 姓名,性别varchar<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,出生日期<span class="token punctuation">(</span>datatime<span class="token punctuation">)</span>,家庭住址,email-- 创建表之前 , 一定要先选择数据库CREATE TABLE IF NOT EXISTS <span class="token variable"><span class="token variable">`</span>student<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> int<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'学号'</span>,<span class="token variable"><span class="token variable">`</span>name<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'匿名'</span> COMMENT <span class="token string">'姓名'</span>,<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'123456'</span> COMMENT <span class="token string">'密码'</span>,<span class="token variable"><span class="token variable">`</span>sex<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'男'</span> COMMENT <span class="token string">'性别'</span>,<span class="token variable"><span class="token variable">`</span>birthday<span class="token variable">`</span></span> datetime DEFAULT NULL COMMENT <span class="token string">'生日'</span>,<span class="token variable"><span class="token variable">`</span>address<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'地址'</span>,<span class="token variable"><span class="token variable">`</span>email<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'邮箱'</span>,PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token assign-left variable">ENGINE</span><span class="token operator">=</span>InnoDB DEFAULT <span class="token assign-left variable">CHARSET</span><span class="token operator">=</span>utf8-- 查看数据库的定义SHOW CREATE DATABASE school<span class="token punctuation">;</span>-- 查看数据表的定义SHOW CREATE TABLE student<span class="token punctuation">;</span>-- 显示表结构DESC student<span class="token punctuation">;</span>  -- 设置严格检查模式<span class="token punctuation">(</span>不能容错了<span class="token punctuation">)</span>SET <span class="token assign-left variable">sql_mode</span><span class="token operator">=</span><span class="token string">'STRICT_TRANS_TABLES'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h3><blockquote><p>设置数据表的类型</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名(   -- 省略一些代码   -- Mysql注释   -- 1. # 单行注释   -- 2. /*...*/ 多行注释)ENGINE = MyISAM (or InnoDB)-- 查看mysql所支持的引擎类型 (表类型)SHOW ENGINES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p><p>常见的 MyISAM 与 InnoDB 类型：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QpmSFMlJ4fDFdGoWOsTuNfFZq0XKW1GyibdZHU2F73DTezMYM1K0dc2A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>经验 ( 适用场合 )  :</p><ul><li>适用 MyISAM : 节约空间及相应速度</li><li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li></ul><blockquote><p>数据表的存储位置</p></blockquote><ul><li><p>MySQL数据表以文件方式存放在磁盘中</p></li><li><ul><li>包括表文件 , 数据文件 , 以及数据库的选项文件</li><li>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表 .</li></ul></li><li><p>注意 :</p></li><li><ul><li><p>* . frm – 表结构定义文件</p></li><li><p>* . MYD – 数据文件 ( data )</p></li><li><p>* . MYI – 索引文件 ( index )</p></li><li><p>InnoDB类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</p></li><li><p>MyISAM类型数据表对应三个文件 :</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Q5tk8XtNtNGnUgevhFSzwTUrO7AmbXZFumTibt43SDII9nOQY97OtQdQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li></ul></li></ul><blockquote><p>设置数据表字符集</p></blockquote><p>我们可为数据库,数据表,数据列设定不同的字符集，设定方法 :</p><ul><li>创建时通过命令来设置 , 如 : CREATE TABLE 表名()CHARSET = utf8;</li><li>如无设定 , 则根据MySQL数据库配置文件 my.ini 中的参数设定</li></ul><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><blockquote><p>修改表 ( ALTER TABLE )</p></blockquote><p>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</p><p>添加字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]</p><p>修改字段 :</p><ul><li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li><li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li></ul><p>删除字段 :  ALTER TABLE 表名 DROP 字段名</p><blockquote><p>删除数据表</p></blockquote><p>语法：DROP TABLE [IF EXISTS] 表名</p><ul><li>IF EXISTS为可选 , 判断是否存在该数据表</li><li>如删除不存在的数据表会抛出错误</li></ul><blockquote><p>其他</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！<span class="token number">2</span>. 每个库目录存在一个保存当前数据库的选项文件db.opt。<span class="token number">3</span>. 注释：  单行注释 <span class="token comment"># 注释内容</span>  多行注释 /* 注释内容 */  单行注释 -- 注释内容       <span class="token punctuation">(</span>标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）<span class="token punctuation">)</span>   <span class="token number">4</span>. 模式通配符：  _   任意单个字符  %   任意多个字符，甚至包括零字符  单引号需要进行转义 <span class="token punctuation">\</span>'   <span class="token number">5</span>. CMD命令行内的语句结束符可以为 <span class="token string">";"</span>, <span class="token string">"\G"</span>, <span class="token string">"\g"</span>，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。<span class="token number">6</span>. SQL对大小写不敏感 （关键字）<span class="token number">7</span>. 清除已有语句：<span class="token punctuation">\</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识MySQL</title>
      <link href="/2021/08/14/chu-shi-mysql/"/>
      <url>/2021/08/14/chu-shi-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h2><blockquote><p>为什么学习数据库</p></blockquote><p>1、岗位技能需求</p><p>2、现在的世界,得数据者得天下</p><p>3、存储数据的方法</p><p>4、程序,网站中,大量数据如何长久保存?</p><p>5、<strong>数据库是几乎软件体系中最核心的一个存在。</strong></p><blockquote><p>什么是数据库</p></blockquote><p>数据库 ( <strong>DataBase</strong> , 简称<strong>DB</strong> )</p><p><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库”</p><p><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…</p><p><strong>数据库总览 :</strong></p><ul><li><p>关系型数据库 ( SQL )</p></li><li><ul><li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li><li>关系型数据库通过外键关联来建立表与表之间的关系</li></ul></li><li><p>非关系型数据库 ( NOSQL )</p></li><li><ul><li>Redis , MongoDB , …</li><li>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li></ul></li></ul><blockquote><p>什么是DBMS</p></blockquote><p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p><p>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibIew3vo8N1zoy9ic2nOVVJWtjZsXg7TWsDDGhAI5rSGZ0tnQ6OIO8MBg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>为什么要说这个呢?</p><p>因为我们要学习的MySQL应该算是一个数据库管理系统.</p><blockquote><p>MySQL简介</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibkYI5jfkYj8hphYv7GEdQSczjb1icQwjWGlWqhG26VO1y5tgM2OcStaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><strong>概念 :</strong> 是现在<strong>流行</strong>的<strong>开源</strong>的,<strong>免费</strong>的 <strong>关系型</strong>数据库</p><p><strong>历史 :</strong> 由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。</p><p><strong>特点 :</strong> </p><ul><li>免费 , 开源数据库</li><li>小巧 , 功能齐全</li><li>使用便捷</li><li>可运行于Windows或Linux操作系统</li><li>可适用于中小型甚至大型网站应用</li></ul><p><strong>官网 :</strong> <strong><a href="https://www.mysql.com/">https://www.mysql.com/</a></strong></p><blockquote><p>安装MySQL</p></blockquote><p><strong>这里建议大家使用压缩版,安装快,方便.不复杂.</strong></p><p><strong>软件下载</strong></p><p>mysql5.7 64位下载地址:</p><p><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip</a></p><p>电脑是64位的就下载使用64位版本的！</p><blockquote><p>安装步骤</p></blockquote><p>1、下载后得到zip压缩包.</p><p>2、解压到自己想要安装到的目录，本人解压到的是D:\Environment\mysql-5.7.19</p><p>3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量</p><pre class="line-numbers language-none"><code class="language-none">选择PATH,在其后面添加: 你的mysql 安装文件下面的bin文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、编辑 my.ini 文件 ,注意替换路径位置</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token key attr-name">basedir</span><span class="token punctuation">=</span><span class="token value attr-value">D:\Program Files\mysql-5.7\</span><span class="token key attr-name">datadir</span><span class="token punctuation">=</span><span class="token value attr-value">D:\Program Files\mysql-5.7\data\</span><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span>skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入mysqld –install (安装mysql)</p><p>6、再输入  mysqld –initialize-insecure –user=mysql 初始化数据文件</p><p>7、然后再次启动mysql 然后用命令 mysql –u root –p 进入mysql管理界面（密码可为空）</p><p>8、进入界面后更改root密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update mysql.user <span class="token builtin class-name">set</span> <span class="token assign-left variable">authentication_string</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span> and Host <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9、刷新权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、修改 my.ini文件删除最后一句skip-grant-tables</p><p>11、重启mysql即可正常使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net stop mysqlnet start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>12、连接上测试出现以下结果就安装好了</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYib5jn0ggWLtIrViavAcBpOXW2ick2ibI2un63gLrFMdtviamYxttX2knoPibQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>一步步去做 , 理论上是没有任何问题的 .</p><p>如果您以前装过,现在需要重装,一定要将环境清理干净 .</p><p>好了,到这里大家都装好了,因为刚接触,所以我们先不学习命令.</p><p>这里给大家推荐一个工具 : <strong>SQLyog</strong> .</p><p>即便有了可视化工具,可是基本的DOS命名大家还是要记住!</p><blockquote><p>SQLyog</p></blockquote><p>可手动操作,管理MySQL数据库的软件工具</p><p>特点 : 简洁 , 易用 , 图形化</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibEvvP8V27JN1wk2BDkph6PCOj45JfcnhJaibHsV6jVewwZZumapwTibicg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JDAlgEhicQfyUeklefrUhYibXng7TQzNhPmic2H3wByaUhebwTKoVDVkHjeRxGx67YxGjlgd13axWVg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>使用SQLyog管理工具自己完成以下操作 :</p><ul><li><p>连接本地MySQL数据库</p></li><li><p>新建MySchool数据库</p></li><li><ul><li>字段</li><li>GradeID : int(11) , Primary Key (pk)</li><li>GradeName : varchar(50)</li><li>数据库名称MySchool</li><li>新建数据库表(grade)</li></ul></li></ul><p>在历史记录中可以看到相对应的数据库操作的语句 .</p><blockquote><p>连接数据库</p></blockquote><p>打开MySQL命令窗口</p><ul><li>在DOS命令行窗口进入 <strong>安装目录\mysql\bin</strong></li><li>可设置环境变量，设置了环境变量，可以在任意目录打开！</li></ul><p><strong>连接数据库语句 :</strong> mysql -h 服务器主机地址 -u 用户名 -p 用户密码</p><p>注意 : -p后面不能加空格,否则会被当做密码的内容,导致登录失败 !</p><p><strong>几个基本的数据库操作命令 :</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">password</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span>where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span> 修改密码flush privileges<span class="token punctuation">;</span> 刷新数据库show databases<span class="token punctuation">;</span> 显示所有数据库use dbname；打开某个数据库show tables<span class="token punctuation">;</span> 显示数据库mysql中所有的表describe user<span class="token punctuation">;</span> 显示表mysql数据库中user表的列信息create database name<span class="token punctuation">;</span> 创建数据库use databasename<span class="token punctuation">;</span> 选择数据库<span class="token builtin class-name">exit</span><span class="token punctuation">;</span> 退出Mysql? 命令关键词 <span class="token builtin class-name">:</span> 寻求帮助-- 表示注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/docker/"/>
      <url>/2021/08/14/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="docker安装部署添加阿里云镜像加速器"><a href="#docker安装部署添加阿里云镜像加速器" class="headerlink" title="docker安装部署添加阿里云镜像加速器"></a>docker安装部署添加阿里云镜像加速器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y yum-utilssudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo    ##安装docker    sudo yum install docker-ce docker-ce-cli containerd.io##添加阿里云镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://rwo46igw.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker version#显示docker的版本信息docker info#显示docker的系统信息，包括镜像和容器的数量docker --help#帮助命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.docker.com/reference/">docker帮助文档</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">##镜像命令[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   5 months ago   13.3kB#解释REPOSITORY镜像的仓库源TAG镜像的标签IMAGE ID镜像的idCREATED镜像的创建时间SIZE镜像的大小#-a，--all列出所有镜像-q，--quiet只显示镜像的id[root@localhost ~]# docker search mysql#搜索镜像[root@localhost ~]# docker pull mysql#下载镜像[root@localhost ~]# docker rmi -f 容器id#删除指定容器[root@localhost ~]# docker rmi -f $(docker images -aq)#删除所有镜像##容器命令docker run [images]#参数--name='name'容器名字，用来区分容器-d后台方式运行-it使用交互模式运行，进入容器查看内容-p制定容器端口 -p 主机端口:容器端口-P随机指定端口docker ps#列出当前正在运行的容器-a#列出当前正在运行的容器+带出历史运行过的容器-n=?#显示最近创建的容器-q#只显示容器编号#退出容器exit#容器停止退出CTRL+P+Q #不停止退出#删除容器docker rm 容器id#删除指定容器，不能删除正在运行的容器，rm -f 强制删除docker rm -f $(docker ps -aq)#删除所有的容器docker ps -a -q|xargs docker rm #删除所有的容器#启动和停止容器docker start 容器id#启动容器docker restart 容器id#重启容器docker stop 容器id#停止当前正在运行的容器docker kill 容器id#强制停止容器#其他命令docker run -d 镜像名#docker容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止，容器启动后，发现自己没有提供服务，会立刻停止docker logs -tf --tail 10  #查看日志  -f 跟踪日志输出docker top 容器id#查看容器中进程信息docker inspect 容器id#查看镜像的元数据#进入当前正在运行的容器docker exec -it 容器id /bash/shelldocker attach 容器id#从容器内拷贝文件到主机上docker cp 容器id:容器内路径 目的主机路径docker stats#监控容器资源消耗<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">attach    Attach to a running container  #当前shell下attach连接指定运行镜像build     Build an image from a Dockerfile  #通过Dockerfile定制镜像commit    Create a new image from a container's changes  #提交当前容器为新的镜像cp    Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中create    Create a new container  #创建一个新的容器，同run 但不启动容器diff    Inspect changes on a container's filesystem  #查看docker容器变化events    Get real time events from the server#从docker服务获取容器实时事件exec    Run a command in a running container#在已存在的容器上运行命令export    Export a container's filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)history    Show the history of an image  #展示一个镜像形成历史images    List images  #列出系统当前镜像import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)info    Display system-wide information  #显示系统相关信息inspect    Return low-level information on a container or image  #查看容器详细信息kill    Kill a running container  #kill指定docker容器load    Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)login    Register or log in to a Docker registry#注册或者登陆一个docker源服务器logout    Log out from a Docker registry  #从当前Docker registry退出logs    Fetch the logs of a container  #输出当前容器日志信息pause    Pause all processes within a container#暂停容器port    List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口ps    List containers  #列出容器列表pull    Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像push    Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器rename    Rename a container  #重命名容器restart    Restart a running container  #重启运行的容器rm    Remove one or more containers  #移除一个或者多个容器rmi    Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)run    Run a command in a new container  #创建一个新的容器并运行一个命令save    Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)search    Search the Docker Hub for images  #在dockerhub中搜索镜像start    Start one or more stopped containers#启动容器stats    Display a live stream of container(s) resource usage statistics  #统计容器使用资源stop    Stop a running container  #停止容器tag         Tag an image into a repository  #给源中镜像打标签top       Display the running processes of a container #查看容器中运行的进程信息unpause    Unpause all processes within a container  #取消暂停容器version    Show the Docker version information#查看容器版本号wait         Block until a container stops, then print its exit code  #截取容器停止时的退出状态值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h3><h4 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docekr commit 提交容器成为一个新的副本    #保存当前容器状态docker commit -m="提交的描述信息" -a="作者" 容器id 目标镜像名：[tag]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><p>容器的持久化和同步操作！容器间也是可以数据共享的！</p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><blockquote><p>方式一：直接使用命令挂载   -v</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -it -v 主机目录：容器目录#MySQL数据持久化# 运行容器，需要做数据挂载  #安装启动MySQL，需要配置密码！！#官方测试：docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag#启动-d 后台运行-p 端口映射-v 卷挂载-e 环境配置--name 容器名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#匿名挂载-v 容器内路径！docker run -d -P --name nginx1 -v /etc/nginx nginx#查看volume的情况docker volume ls#具名挂载docker run -d -P --name nginx2 -v juming-nginx:etc/nginx nginx-v 容器内路径#匿名挂载-v 卷名：容器内路径#具名挂载-v /宿主机路径：：容器内路径#指定路径挂载#拓展-v 容器内路径：ro   rw  改变读写权限roreadonly#只读rw  readwrite#可读可写ro  只要看到就说明ro这个路径只能通过宿主机来操作，容器内部是无法操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile 就是用来构建 docker 镜像的构建文件，命令脚本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#创建一个dockerfile文件，名字随机建议Dockerfile#文件内容  指令（大写） 参数FROM centosVOLUME ["/volume01","/volume02"]CMD echo "----end----"CMD /bin/bash#每个命令就是镜像的一层<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
