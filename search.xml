<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/14/hello-world/"/>
      <url>/2021/08/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/docker/"/>
      <url>/2021/08/14/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="docker安装部署添加阿里云镜像加速器"><a href="#docker安装部署添加阿里云镜像加速器" class="headerlink" title="docker安装部署添加阿里云镜像加速器"></a>docker安装部署添加阿里云镜像加速器</h3><pre><code class="shell">sudo yum install -y yum-utilssudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo    ##安装docker    sudo yum install docker-ce docker-ce-cli containerd.io##添加阿里云镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://rwo46igw.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre><code class="shell">docker version    #显示docker的版本信息docker info        #显示docker的系统信息，包括镜像和容器的数量docker --help    #帮助命令</code></pre><p><a href="https://docs.docker.com/reference/">docker帮助文档</a></p><pre><code class="shell">##镜像命令[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   5 months ago   13.3kB#解释REPOSITORY        镜像的仓库源TAG                镜像的标签IMAGE ID        镜像的idCREATED            镜像的创建时间SIZE            镜像的大小#-a，--all        列出所有镜像-q，--quiet        只显示镜像的id[root@localhost ~]# docker search mysql    #搜索镜像[root@localhost ~]# docker pull mysql    #下载镜像[root@localhost ~]# docker rmi -f 容器id    #删除指定容器[root@localhost ~]# docker rmi -f $(docker images -aq)    #删除所有镜像##容器命令docker run [images]#参数--name='name'    容器名字，用来区分容器-d                后台方式运行-it                使用交互模式运行，进入容器查看内容-p                制定容器端口 -p 主机端口:容器端口-P                随机指定端口docker ps    #列出当前正在运行的容器-a        #列出当前正在运行的容器+带出历史运行过的容器-n=?    #显示最近创建的容器-q        #只显示容器编号#退出容器exit        #容器停止退出CTRL+P+Q     #不停止退出#删除容器docker rm 容器id            #删除指定容器，不能删除正在运行的容器，rm -f 强制删除docker rm -f $(docker ps -aq)    #删除所有的容器docker ps -a -q|xargs docker rm #删除所有的容器#启动和停止容器docker start 容器id        #启动容器docker restart 容器id        #重启容器docker stop 容器id        #停止当前正在运行的容器docker kill 容器id        #强制停止容器#其他命令docker run -d 镜像名#docker容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止，容器启动后，发现自己没有提供服务，会立刻停止docker logs -tf --tail 10  #查看日志  -f 跟踪日志输出docker top 容器id        #查看容器中进程信息docker inspect 容器id        #查看镜像的元数据#进入当前正在运行的容器docker exec -it 容器id /bash/shelldocker attach 容器id#从容器内拷贝文件到主机上docker cp 容器id:容器内路径 目的主机路径docker stats    #监控容器资源消耗</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code class="shell">attach    Attach to a running container  #当前shell下attach连接指定运行镜像build     Build an image from a Dockerfile  #通过Dockerfile定制镜像commit    Create a new image from a container's changes  #提交当前容器为新的镜像cp    Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中create    Create a new container  #创建一个新的容器，同run 但不启动容器diff    Inspect changes on a container's filesystem  #查看docker容器变化events    Get real time events from the server#从docker服务获取容器实时事件exec    Run a command in a running container#在已存在的容器上运行命令export    Export a container's filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)history    Show the history of an image  #展示一个镜像形成历史images    List images  #列出系统当前镜像import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)info    Display system-wide information  #显示系统相关信息inspect    Return low-level information on a container or image  #查看容器详细信息kill    Kill a running container  #kill指定docker容器load    Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)login    Register or log in to a Docker registry#注册或者登陆一个docker源服务器logout    Log out from a Docker registry  #从当前Docker registry退出logs    Fetch the logs of a container  #输出当前容器日志信息pause    Pause all processes within a container#暂停容器port    List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口ps    List containers  #列出容器列表pull    Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像push    Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器rename    Rename a container  #重命名容器restart    Restart a running container  #重启运行的容器rm    Remove one or more containers  #移除一个或者多个容器rmi    Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)run    Run a command in a new container  #创建一个新的容器并运行一个命令save    Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)search    Search the Docker Hub for images  #在dockerhub中搜索镜像start    Start one or more stopped containers#启动容器stats    Display a live stream of container(s) resource usage statistics  #统计容器使用资源stop    Stop a running container  #停止容器tag         Tag an image into a repository  #给源中镜像打标签top       Display the running processes of a container #查看容器中运行的进程信息unpause    Unpause all processes within a container  #取消暂停容器version    Show the Docker version information#查看容器版本号wait         Block until a container stops, then print its exit code  #截取容器停止时的退出状态值</code></pre><h3 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h3><h4 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h4><pre><code class="shell">docekr commit 提交容器成为一个新的副本    #保存当前容器状态docker commit -m="提交的描述信息" -a="作者" 容器id 目标镜像名：[tag]</code></pre><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><p>容器的持久化和同步操作！容器间也是可以数据共享的！</p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><blockquote><p>方式一：直接使用命令挂载   -v</p></blockquote><pre><code class="shell">docker run -it -v 主机目录：容器目录#MySQL数据持久化# 运行容器，需要做数据挂载  #安装启动MySQL，需要配置密码！！#官方测试：    docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag#启动-d 后台运行-p 端口映射-v 卷挂载-e 环境配置--name 容器名</code></pre><h4 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h4><pre><code class="shell">#匿名挂载-v 容器内路径！docker run -d -P --name nginx1 -v /etc/nginx nginx#查看volume的情况docker volume ls#具名挂载docker run -d -P --name nginx2 -v juming-nginx:etc/nginx nginx-v 容器内路径            #匿名挂载-v 卷名：容器内路径            #具名挂载-v /宿主机路径：：容器内路径    #指定路径挂载#拓展-v 容器内路径：ro   rw  改变读写权限ro    readonly    #只读rw  readwrite    #可读可写ro  只要看到就说明ro这个路径只能通过宿主机来操作，容器内部是无法操作</code></pre><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile 就是用来构建 docker 镜像的构建文件，命令脚本</p><pre><code class="shell">#创建一个dockerfile文件，名字随机建议Dockerfile#文件内容  指令（大写） 参数FROM centosVOLUME ["/volume01","/volume02"]CMD echo "----end----"CMD /bin/bash#每个命令就是镜像的一层</code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
