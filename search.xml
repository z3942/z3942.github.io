<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/14/hello-world/"/>
      <url>/2021/08/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/yun-ji-suan-mian-shi-ti/"/>
      <url>/2021/08/14/yun-ji-suan-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h5 id="1、简述raid0、raid1、raid5三种工作模式的工作原理及特点"><a href="#1、简述raid0、raid1、raid5三种工作模式的工作原理及特点" class="headerlink" title="1、简述raid0、raid1、raid5三种工作模式的工作原理及特点"></a>1、简述raid0、raid1、raid5三种工作模式的工作原理及特点</h5><ul><li>作用：容错、提升读写速率<ul><li>Raid0：条带集、磁盘使用2+ 利用率100% 优缺点：读写速度快、不容错</li><li>Raid1：镜像集、磁盘使用2+ 利用率50%    优缺点：读写速率一般，容错</li><li>Raid5：带奇偶检验的条带集、磁盘使用3+    利用率（n-1）/n    优缺点：读写速度快，容错、允许坏1块盘</li></ul></li></ul><h5 id="2、将-url-local-test目录下大于100k小于500k的文件转移到-tmp目录下"><a href="#2、将-url-local-test目录下大于100k小于500k的文件转移到-tmp目录下" class="headerlink" title="2、将/url/local/test目录下大于100k小于500k的文件转移到/tmp目录下"></a>2、将/url/local/test目录下大于100k小于500k的文件转移到/tmp目录下</h5><ul><li>find /url/local/test  -size +100k -a -size -500k  -exec mv -r{} /tmp;</li></ul><h5 id="3、软链接和硬链接的区别"><a href="#3、软链接和硬链接的区别" class="headerlink" title="3、软链接和硬链接的区别"></a>3、软链接和硬链接的区别</h5><ul><li>1.定义不同<ul><li>软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。</li><li>硬链接就是一个文件的一个或多个文件名。把文件名和计算机文件系统使用的节点号链接起来。因此我们可以用多个文件名与同一个文件进行链接，这些文件名可以载同一目录或不同目录。</li></ul></li><li>2.限制不同<ul><li>硬链接只能对已存在的文件进行创建，不能交叉文件系统进行硬链接的创建</li><li>软链接可对不存在的文件或目录创建软链接；可交叉文件系统；</li></ul></li><li>3.创建的方式不同<ul><li>​    硬链接不能对目录进行创建，只可对文件创建</li><li>软链接可对文件或目录创建</li></ul></li><li>4.影响不同<ul><li>删除一个硬链接文件并不影响其他有相同inode号的文件。</li><li>删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软链接被称为死链接</li></ul></li></ul><h5 id="4、ps-aux-中的VSZ代表什么意思？RSS代表什么意思？"><a href="#4、ps-aux-中的VSZ代表什么意思？RSS代表什么意思？" class="headerlink" title="4、ps aux 中的VSZ代表什么意思？RSS代表什么意思？"></a>4、ps aux 中的VSZ代表什么意思？RSS代表什么意思？</h5><ul><li>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND<ul><li>VSZ：显示进程使用的虚拟内存量（KB）</li><li>RSS：表示该进程占用的固定内存量（KB）<ul><li>驻留中叶的的数量</li></ul></li></ul></li></ul><h5 id="5、保存当前磁盘分区的分区表，dd命令是个强大的命令，在复制的同时进行转换，请写出具体命令"><a href="#5、保存当前磁盘分区的分区表，dd命令是个强大的命令，在复制的同时进行转换，请写出具体命令" class="headerlink" title="5、保存当前磁盘分区的分区表，dd命令是个强大的命令，在复制的同时进行转换，请写出具体命令"></a>5、保存当前磁盘分区的分区表，dd命令是个强大的命令，在复制的同时进行转换，请写出具体命令</h5><ul><li>dd if=/dev/sda of=/test.txt bs=1M count=512</li></ul><h5 id="6、6块300G的硬盘做RAID5，新的设备容量是多大？"><a href="#6、6块300G的硬盘做RAID5，新的设备容量是多大？" class="headerlink" title="6、6块300G的硬盘做RAID5，新的设备容量是多大？"></a>6、6块300G的硬盘做RAID5，新的设备容量是多大？</h5><ul><li>raid5    1    当备用盘</li><li>（6-1）*300G = 1500G</li></ul><h5 id="7、假设服务器具有6块900G本地磁盘，单块磁盘IO约为150M-S，现对此盘进行RAID划分，简述理论6块盘做成RAID5级别后实际存储大小、实际IO为多少？"><a href="#7、假设服务器具有6块900G本地磁盘，单块磁盘IO约为150M-S，现对此盘进行RAID划分，简述理论6块盘做成RAID5级别后实际存储大小、实际IO为多少？" class="headerlink" title="7、假设服务器具有6块900G本地磁盘，单块磁盘IO约为150M/S，现对此盘进行RAID划分，简述理论6块盘做成RAID5级别后实际存储大小、实际IO为多少？"></a>7、假设服务器具有6块900G本地磁盘，单块磁盘IO约为150M/S，现对此盘进行RAID划分，简述理论6块盘做成RAID5级别后实际存储大小、实际IO为多少？</h5><ul><li>实际大小：900*（6-2） = 3600G</li><li>实际IO：写的速率 150M/S  （小于。理论上写的过程中，RAID5会进行校验耗费时间） 150M/S*4 = 600M/S</li><li>因为读取数据的时候校验位的盘是需要读取的所以实际：读的速率是（6-1）*150 = 750M/S </li></ul><h5 id="8、请简要描述linux系统下源代码编译方式安装软件的大致步骤"><a href="#8、请简要描述linux系统下源代码编译方式安装软件的大致步骤" class="headerlink" title="8、请简要描述linux系统下源代码编译方式安装软件的大致步骤"></a>8、请简要描述linux系统下源代码编译方式安装软件的大致步骤</h5><ol><li>基础环境部署：<ul><li>关闭防火墙、selinux、相关环境（php、java、编译环境）</li></ul></li><li>下载、解压相关安装包</li><li>配置相关的软件安装路径</li><li>编译</li><li>安装</li></ol><h5 id="9、列出当前系统中所有的网络连接（包含进程名），请写出完整操作命令"><a href="#9、列出当前系统中所有的网络连接（包含进程名），请写出完整操作命令" class="headerlink" title="9、列出当前系统中所有的网络连接（包含进程名），请写出完整操作命令"></a>9、列出当前系统中所有的网络连接（包含进程名），请写出完整操作命令</h5><ul><li>netstart -antupl<ul><li>a        all        所有</li><li>n        name  名称</li><li>t         tcp</li><li>u         udp</li><li>p        pid</li><li>l         监听（list  列出）</li></ul></li></ul><h5 id="10、实时抓取并显示当前系统中tcp80端口的网络数据信息，请写出完整操作命令"><a href="#10、实时抓取并显示当前系统中tcp80端口的网络数据信息，请写出完整操作命令" class="headerlink" title="10、实时抓取并显示当前系统中tcp80端口的网络数据信息，请写出完整操作命令"></a>10、实时抓取并显示当前系统中tcp80端口的网络数据信息，请写出完整操作命令</h5><ul><li>tcpdump  host 127.0.0.1 tcp prot 80</li></ul><h5 id="11、linux中你常用的系统命令说5个"><a href="#11、linux中你常用的系统命令说5个" class="headerlink" title="11、linux中你常用的系统命令说5个"></a>11、linux中你常用的系统命令说5个</h5><ul><li>ls</li><li>mkdir</li><li>touch</li><li>cat</li><li>useradd ….</li></ul><h5 id="12、关闭swap分区"><a href="#12、关闭swap分区" class="headerlink" title="12、关闭swap分区"></a>12、关闭swap分区</h5><ul><li>swapoff -a        关闭所有的交换分区</li><li>swapoff /dev/sde 关闭sde交换分区</li><li>/etc/fstab  注释掉改文件中swap分区相关信息</li></ul><h5 id="13、系统安全加固"><a href="#13、系统安全加固" class="headerlink" title="13、系统安全加固"></a>13、系统安全加固</h5><ol><li><p>密码策略</p><p>修改密码（相对复杂、定时修改密码、密码不要轻易告诉别人）</p></li><li><p>权限ugo</p><p>锁定系统中不必要的用户和密码（锁定之前需要去备份/etc/password  /etc/shadow）禁用无关组 禁止root用户远程登录</p></li><li><p>加固tcp/ip协议的设置</p><p>/etc/systcl.conf 文件的相应权限</p></li><li><p>默认权限和umask权限</p><p>​    022</p></li></ol><h5 id="14、硬件性能测试用过什么"><a href="#14、硬件性能测试用过什么" class="headerlink" title="14、硬件性能测试用过什么"></a>14、硬件性能测试用过什么</h5><ul><li><p>df -h 查看磁盘使用情况</p><ul><li>hdparm 命令测试读写的速率<ul><li>hdparm -T /dev/sda</li><li>linux中几块盘求平均值就是磁盘的平均读取速率</li></ul></li></ul></li><li><p>对IO进行简单的测试 top/iostat    查看wa% 及写硬盘的速率</p><ul><li>dd if=dev/zore of=test bs=1M count=4096</li><li>wa  等待输入输出的CPU时间百分比</li><li>top -n1  每秒cpu</li></ul></li></ul><h5 id="15、临时调整和永久生效系统内核参数在哪里调"><a href="#15、临时调整和永久生效系统内核参数在哪里调" class="headerlink" title="15、临时调整和永久生效系统内核参数在哪里调"></a>15、临时调整和永久生效系统内核参数在哪里调</h5><ul><li><p>1.临时调整</p><ul><li>开启路由转发功能 设置1/0    echo”1”&gt;/proc/sys/net/ipv4/ip_forward</li><li>禁止所有的icmp回包（禁止其他主机ping本机）<ul><li>echo”1”&gt;/proc/sys/net/ipv4/icmp_echo_ignore_all</li><li>调整所有进程可以打开的文件总数ps：如果大量用户访问时，可以因为该数字太小而导致错误    echo”108248”&gt;/proc/sys/fs/file-max</li></ul></li></ul></li><li><p>2.永久调整</p><p>​        vim/etc/sysctl.conf</p><p>开启内核路由转发功能，通过01设置开关</p><p>​        net.ipv4.ip_forward=1</p><p>禁止所有的icmp回包（禁止其他主机ping本机）</p><p>​        net.ipv4.icmp_echo_ignnore_all-=1</p><p>调整所有进程可以打开的文件总</p><p>​        fs.file-max=108248</p></li></ul><h5 id="16、如何查看当前linux系统的状态，如cpu使用，内存使用，负载情况"><a href="#16、如何查看当前linux系统的状态，如cpu使用，内存使用，负载情况" class="headerlink" title="16、如何查看当前linux系统的状态，如cpu使用，内存使用，负载情况"></a>16、如何查看当前linux系统的状态，如cpu使用，内存使用，负载情况</h5><ul><li><p>系统版本</p><ul><li>uname -a</li><li>cat /etc/redhat-release</li></ul></li><li><p>内存：</p><ul><li>free</li></ul></li><li><p>CPU 利用率:</p><ul><li>top/sar</li></ul></li></ul><h5 id="17、查看网卡历史流量实时查看网卡流量"><a href="#17、查看网卡历史流量实时查看网卡流量" class="headerlink" title="17、查看网卡历史流量实时查看网卡流量"></a>17、查看网卡历史流量实时查看网卡流量</h5><p>查看网卡流量密令：sar   安装包：sysstat   查看帮助  sar -h</p><p>网卡历史流量：sar  -nDEV -f/var/log/sa/saxx</p><p>实时查看网卡流量：sar - n DEV 1 5 （每一秒刷新五次）</p><h5 id="18、如何查看当前系统每个ip的连接数"><a href="#18、如何查看当前系统每个ip的连接数" class="headerlink" title="18、如何查看当前系统每个ip的连接数"></a>18、如何查看当前系统每个ip的连接数</h5><ul><li>netstat -n | awk’/^tcp/{print $5}’ | awk -F ‘{print $1}’ | sort | uniq -c</li></ul><h5 id="19、找出-home下所有7天以前，以-ok结尾的文件列"><a href="#19、找出-home下所有7天以前，以-ok结尾的文件列" class="headerlink" title="19、找出/home下所有7天以前，以.ok结尾的文件列"></a>19、找出/home下所有7天以前，以.ok结尾的文件列</h5><ul><li>find /home -name “*.ok” -mtime +7</li></ul><h5 id="20、快速生成一个10G的文件"><a href="#20、快速生成一个10G的文件" class="headerlink" title="20、快速生成一个10G的文件"></a>20、快速生成一个10G的文件</h5><ul><li>dd if=/dev/zero of=test bs=10M count=1024</li></ul><h5 id="21、列出linux常见打包工具并写出相应解压缩参数（至少三种）"><a href="#21、列出linux常见打包工具并写出相应解压缩参数（至少三种）" class="headerlink" title="21、列出linux常见打包工具并写出相应解压缩参数（至少三种）"></a>21、列出linux常见打包工具并写出相应解压缩参数（至少三种）</h5><ul><li>压缩打包<ul><li>tar -cvf file.txt  tar.test.txt.gz</li><li>zip test.zip</li><li>Gzip file.txt</li><li>bzip2 -z file.txt</li></ul></li><li>解压缩<ul><li>tar -xf </li><li>unzip</li><li>gzip -d</li><li>bzip2 -d</li></ul></li></ul><h5 id="22、标准端口的范围是？"><a href="#22、标准端口的范围是？" class="headerlink" title="22、标准端口的范围是？"></a>22、标准端口的范围是？</h5><p>1-65535</p><h5 id="23、常见协议（http、https、ftp、mysql、redis）默认端口。"><a href="#23、常见协议（http、https、ftp、mysql、redis）默认端口。" class="headerlink" title="23、常见协议（http、https、ftp、mysql、redis）默认端口。"></a>23、常见协议（http、https、ftp、mysql、redis）默认端口。</h5><ul><li>http 80</li><li>https 443</li><li>ftp 21/20</li><li>mysql 3306</li><li>redis  6379</li></ul><h5 id="24、请写出下列端口所运行的服务21、22、23、3306、6379"><a href="#24、请写出下列端口所运行的服务21、22、23、3306、6379" class="headerlink" title="24、请写出下列端口所运行的服务21、22、23、3306、6379"></a>24、请写出下列端口所运行的服务21、22、23、3306、6379</h5><ul><li>21  ftp</li><li>22  ssh</li><li>23  telnet</li><li>3306  mysql</li><li>6379  redis</li></ul><h5 id="25、写出下面服务的常用端口：ftp、http、dns、smtp、pop3、dhcp、tftp、mysql、ssh、https"><a href="#25、写出下面服务的常用端口：ftp、http、dns、smtp、pop3、dhcp、tftp、mysql、ssh、https" class="headerlink" title="25、写出下面服务的常用端口：ftp、http、dns、smtp、pop3、dhcp、tftp、mysql、ssh、https"></a>25、写出下面服务的常用端口：ftp、http、dns、smtp、pop3、dhcp、tftp、mysql、ssh、https</h5><ul><li>ftp    21/20</li><li>http    80</li><li>dns    53</li><li>smtp    25（简单的邮件传输协议）</li><li>pop3    110（邮局协议版本3）</li><li>dhcp    服务器 udp 67 客户端  udp 68</li><li>tftp    69</li><li>mysql  3306</li><li>ssh    22</li><li>https    443</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/lvs/"/>
      <url>/2021/08/14/lvs/</url>
      
        <content type="html"><![CDATA[<h2 id="查询内核是编译IPVS"><a href="#查询内核是编译IPVS" class="headerlink" title="查询内核是编译IPVS"></a>查询内核是编译IPVS</h2><pre><code class="shell">[root@node1 ~]# cat /boot/config-3.10.0-862.el7.x86_64 | grep -i ipvs -A 10#/boot/config-* 根据内核版本不同定义名称，内核配置文件，y表示已编译模块，m表示可加载的模块# grep 根据关键词查询内容#-i：查询内容不区分大小写 #-A -B -C 后面都跟阿拉伯数字#-A:是显示匹配后和它后面的n行。#-B:是显示匹配行和它前面的n行。#-C:是匹配行和它前后各n行。CONFIG_NETFILTER_XT_MATCH_IPVS=m#ipvs#此处应显示10行内容，但与IPVS不相关，就删除了....--# IPVS transport protocol load balancing support#IPVS支持的协议CONFIG_IP_VS_PROTO_TCP=yCONFIG_IP_VS_PROTO_UDP=yCONFIG_IP_VS_PROTO_AH_ESP=yCONFIG_IP_VS_PROTO_ESP=yCONFIG_IP_VS_PROTO_AH=yCONFIG_IP_VS_PROTO_SCTP=y## IPVS scheduler#IPVS调度算法CONFIG_IP_VS_RR=mCONFIG_IP_VS_WRR=mCONFIG_IP_VS_LC=mCONFIG_IP_VS_WLC=mCONFIG_IP_VS_LBLC=mCONFIG_IP_VS_LBLCR=mCONFIG_IP_VS_DH=mCONFIG_IP_VS_SH=mCONFIG_IP_VS_SED=m--# IPVS SH scheduler#IPVS sh算法调度CONFIG_IP_VS_SH_TAB_BITS=8## IPVS application helper#CONFIG_IP_VS_FTP=mCONFIG_IP_VS_NFCT=yCONFIG_IP_VS_PE_SIP=m...</code></pre><h2 id="ipvsadm相关文件"><a href="#ipvsadm相关文件" class="headerlink" title="ipvsadm相关文件"></a>ipvsadm相关文件</h2><pre><code class="shell">[root@node1 ~]# rpm -ql ipvsadm/etc/sysconfig/ipvsadm-config#ipvs配置文件/usr/lib/systemd/system/ipvsadm.service#守护进程服务/usr/sbin/ipvsadm#主程序/usr/sbin/ipvsadm-restore#ipvs规则重载工具/usr/sbin/ipvsadm-save#ipvs规则保存工具/usr/share/doc/ipvsadm-1.27/usr/share/doc/ipvsadm-1.27/README/usr/share/man/man8/ipvsadm-restore.8.gz/usr/share/man/man8/ipvsadm-save.8.gz/usr/share/man/man8/ipvsadm.8.gz#其他文档</code></pre><h2 id="ipvsadm命令"><a href="#ipvsadm命令" class="headerlink" title="ipvsadm命令"></a>ipvsadm命令</h2><pre><code class="shell">[root@node1 ~]# ipvsadm -hipvsadm v1.27 2008/5/15 (compiled with popt and IPVS v1.2.1)# ipvsadm 版本信息 包括IPVS版本Usage:  ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] [--pe persistence_engine] [-b sched-flags]  #添加|修改一条虚拟服务格式  ipvsadm -D -t|u|f service-address  #删除一个一条虚拟服务格式  ipvsadm -C  #清除内核虚拟服务器表中的所有记录的格式  ipvsadm -R  #从标准输入中还原虚拟服务列表的格式  ipvsadm -S [-n]  #保存虚拟服务规则至标准输出的格式  ipvsadm -a|e -t|u|f service-address -r server-address [options]  #添加|修改一条真实服务器记录的格式  ipvsadm -d -t|u|f service-address -r server-address  #删除一条真实服务器记录的格式  ipvsadm -L|l [options]  #列出虚拟服务器表  ipvsadm -Z [-t|u|f service-address]  #虚拟服务表计数器清零  ipvsadm --set tcp tcpfin udp  #更改用于IPVS连接的超时值，tcp表示TCP会话，tcpfin表示接收到FIN数据包后的TCP会，udp表示UDP数据包的超时值（均以秒为单位）  ipvsadm --start-daemon state [--mcast-interface interface] [--syncid sid]  #启动同步守护进程，state的值可以是master或backup，用来说明调度服务器是master或是backup  ipvsadm --stop-daemon state  #停止同步进程  ipvsadm -hCommands:Either long or short options are allowed.  --add-service     -A        add virtual service with options|添加一个虚拟服务，使用ip地址、端口号、协议来唯一定义一个虚拟服务，添加内容保存在内核虚拟服务器列表中  --edit-service    -E        edit virtual service with options|编辑内核虚拟服务器表中的一条虚拟服务器记录  --delete-service  -D        delete virtual service|删除内核虚拟服务器表中的一条虚拟服务器记录，并删除所有与该虚拟服务器相关联的真实服务器  --clear           -C        clear the whole table|清除内核虚拟服务器表中的所有记录  --restore         -R        restore rules from stdin|从标准输入中还原虚拟服务列表  --save            -S        save rules to stdout|保存虚拟服务规则至标准输出  --add-server      -a        add real server with options|在内核虚拟服务器表的一条记录里添加一条新的真实服务器记录。也就是在一个虚拟服务器中增加一台新的真实服务器  --edit-server     -e        edit real server with options|编辑一条虚拟服务器记录中的某条真实服务器记录  --delete-server   -d        delete real server|删除一条虚拟服务器记录中的某条真实服务器记录  --list            -L|-l     list the table|如果没有指定参数，则列出虚拟服务器表。如果选择了虚拟服务器地址，则仅列出该虚拟服务器的信息。如果选择-c选项，则显示连接表。输出内容受到其他参数的影响  --zero            -Z        zero counters in a service or all services|虚拟服务表计数器清零（清空当前的连接数量等）  --set tcp tcpfin udp        set connection timeout values|更改用于IPVS连接的超时值。该命令始终使用3个参数，分别表示TCP会话，接收到FIN数据包后的TCP会话和UDP数据包的超时值（以秒为单位）。超时值0表示保留相应条目的当前超时值  --start-daemon              start connection sync daemon|启动同步守护进程  --stop-daemon               stop connection sync daemon|停止同步守护进程  --help            -h        display this help message|显示帮助信息Options:  --tcp-service  -t service-address   service-address is host[:port]   #说明虚拟服务器提供的是tcp 的服务。服务器地址的形式为 主机[:端口]。  #主机可以是IP地址也可以是主机名。  #端口可以是普通的端口号，也可以是端口的服务名称。端口可以被省略，在这种情况下，默认端口号为0。当端口号为0时，需要指定服务器提供持久稳固的服务（也即是使用了-p | --persistent选项）才有效，在这种情况下，它是一个通配符端口，即访问任何端口的连接都将被接受。  --udp-service  -u service-address   service-address is host[:port]  #虚拟服务器提供的是udp 的服务。服务器地址的形式为 主机[:端口]。  --fwmark-service  -f fwmark         fwmark is an integer greater than zero  #使用fwamrk（fwmark是一个大于0的整数值）来防火墙标识集群服务，而不是地址、 端口和协议使用它，fwmark可以通过结合IPtables将多个以调度器为目标的端口定义成一个防火墙标识，由ipvsdam通过此项关联标识，则可以实现对一个IP多端口调度，即实现后端服务器可以开放多个服务  --ipv6         -6                   fwmark entry uses IPv6  #与-f一起使用表示fwmark规则使用IPv6地址  --scheduler    -s scheduler         one of rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq,                                      the default scheduler is wlc.  #指定集群服务使用的调度算法。10种调度算法被实现为内核模块。默认的调度算法是wlc  --pe            engine              alternate persistence engine may be sip,                                      not set by default.  #设置持久化引擎如源IP，默认不设置  --persistent   -p [timeout]         persistent service  #开启持久化服务，开启它则表示在指定时间内，来自同一IP的请求都会转发到后端同一台真实服务器上进行处理，默认时间为300秒  #此选项可以与SSL或FTP等协议结合使用，这对客户端始终与同一台真实服务器保持连接至关重要  --netmask      -M netmask           persistent granularity mask  #使用网络掩码来屏蔽持久化来源IP的地址范围，默认值为255.255.255.255，即所有来源IP请求都会享受持久化服务  --real-server  -r server-address    server-address is host (and port)  #指定真实服务器的主机IP与端口  --gatewaying   -g                   gatewaying (direct routing) (default)  #指定IPVS的工作模式为DR模式，DR为默认模式  --ipip         -i                   ipip encapsulation (tunneling)  #指定IPVS的工作模式为IP隧道模式  --masquerading -m                   masquerading (NAT)  #指定IPVS的工作模式为NAT模式  --weight       -w weight            capacity of real server  #指定真实服务器的权重值  --u-threshold  -x uthreshold        upper threshold of connections  #设置转发请求的最大上连接阀值，范围为0~65535，当连接数超过指定上限时，LVS则不会转发请求  --l-threshold  -y lthreshold        lower threshold of connections  #设置转发请求的下连接阀值，范围为0~65535，当连接数降低至指定值时，LVS则继续提供服务，默认值为0  --mcast-interface interface         multicast interface for connection sync  #设置用于连接同步守护进程的组播接口  --syncid sid                        syncid for connection sync (default=255)  #设置连接同步守护进程的SID号，用于标识，范围0~255，默认为255  --connection   -c                   output of current IPVS connections  #显示连接信息，一般与"-l"连用  --timeout                           output of timeout (tcp tcpfin udp)  #显示TCP、TCPFIN、UDP超时时间信息，一般与"-l"连用  --daemon                            output of daemon information  #显示连接同步守护信息，一般与"-l"连用  --stats                             output of statistics information  #显示统计信息，一般与"-l"连用  --rate                              output of rate information  #显示转发速率信息，一般与"-l"连用  --exact                             expand numbers (display exact values)  #显示数据包和字节计数器的确切值，扩大字符长度  --thresholds                        output of thresholds information  #显示阀值信息，一般与"-l"连用  --persistent-conn                   output of persistent connection info  #显示持久化连接信息，一般与"-l"连用  --nosort                            disable sorting output of service/server entries  #不要对虚拟服务和真实服务器的列表进行排序  --sort                              does nothing, for backwards compatibility  #排序虚拟服务和真实服务器的列表。虚拟服务条目按照&lt;protocol，address，port&gt;升序排列。真实的服务器条目按&lt;地址，端口&gt;升序排列。  --ops          -o                   one-packet scheduling  #指定一个虚拟服务使用单包调度。该选项只能用于UDP服务。如果指定了此选项，则创建的所有连接都仅用于转发一个数据包。选项对于将UDP数据包从相同的客户端端口调度到不同的真实服务器很有用  --numeric      -n                   numeric output of addresses and ports  #地址和端口以数字格式显示，一般与"-l"连用  --sched-flags  -b flags             scheduler flags (comma-separated)  #设置调度算法的范围标识，用于SH算法，有两个标识：sh-fallback，如果真实服务器不可用，则将其转发到其他真实服务器上。sh-port,将源地址的端口号也添加到散列键=值中</code></pre><h2 id="ipvsadm策略文件-etc-sysconfig-ipvsadm"><a href="#ipvsadm策略文件-etc-sysconfig-ipvsadm" class="headerlink" title="ipvsadm策略文件/etc/sysconfig/ipvsadm"></a>ipvsadm策略文件/etc/sysconfig/ipvsadm</h2><p>没有策略文件通常启动服务会报错</p><pre><code class="shell"></code></pre><h2 id="ipvsadm工具用法"><a href="#ipvsadm工具用法" class="headerlink" title="ipvsadm工具用法"></a>ipvsadm工具用法</h2><pre><code class="shell">##管理集群服务  ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] [--pe persistence_engine] [-b sched-flags]  #添加|修改一条虚拟服务格式  ipvsadm -D -t|u|f service-address  #删除一个一条虚拟服务格式  ipvsadm -C  #清除内核虚拟服务器表中的所有记录的格式  ipvsadm -R  #从标准输入中还原虚拟服务列表的格式  ipvsadm -S [-n]  #保存虚拟服务规则至标准输出的格式      ##管理集群中的RS    ipvsadm -a|e -t|u|f service-address -r server-address [options]  #添加|修改一条真实服务器记录的格式  ipvsadm -d -t|u|f service-address -r server-address  #删除一条真实服务器记录的格式  ipvsadm -L|l [options]  #列出虚拟服务器表  ipvsadm -Z [-t|u|f service-address]  #虚拟服务表计数器清零</code></pre><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><pre><code class="shell">#LVS    Nat模式[root@localhost ~]# vim /etc/sysctl.confnet.ipv4.ip_forward = 1[root@localhost ~]# sysctl -p[root@localhost ~]# ipvsadm -A -t 192.168.137.128:80 -s rr[root@localhost ~]# ipvsadm -a -t 192.168.137.128:80 -r 192.168.100.133 -m[root@localhost ~]# ipvsadm -a -t 192.168.137.128:80 -r 192.168.100.134 -m[root@localhost ~]# ipvsadm -LnIP Virtual Server version 1.2.1 (size=4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.137.128:80 rr  -&gt; 192.168.100.133:80           Masq    1      0          0  -&gt; 192.168.100.134:80           Masq    1      0          0</code></pre><pre><code class="shell"># Lvs    DR模式[root@localhost network-scripts]# cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOF&gt; net.ipv4.conf.all.arp_ignore = 1&gt; net.ipv4.conf.lo.arp_ignore = 1&gt; net.ipv4.conf.lo.arp_announce = 2&gt; net.ipv4.conf.all.arp_announce = 2&gt; EOF[root@localhost network-scripts]# sysctl -pnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-arptables = 1net.ipv4.ip_forward = 1以下4行配置是新添加的：net.ipv4.conf.all.arp_ignore = 1net.ipv4.conf.lo.arp_ignore = 1net.ipv4.conf.lo.arp_announce = 2net.ipv4.conf.all.arp_announce = 2[root@localhost network-scripts]# systemctl restart NetworkManager[root@localhost network-scripts]# systemctl restart network</code></pre><p> <code>-g</code>:参数设置LVS工作模式为DR模式<br> <code>-w</code>:设置权重</p><pre><code class="shell">[root@test3 ~]# ipvsadm -A -t 192.168.2.133:80 -s wrr[root@test3 ~]# ipvsadm -a -t 192.168.2.133:80 -r 192.168.2.128 -g -w 1[root@test3 ~]# ipvsadm -a -t 192.168.2.133:80 -r 192.168.2.129 -g -w 2[root@test3 ~]# ipvsadm -LnIP Virtual Server version 1.2.1 (size=4096)Prot LocalAddress:Port Scheduler Flags  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  192.168.2.133:80 wrr  -&gt; 192.168.2.128:80             Route   1      0          0  -&gt; 192.168.2.129:80             Route   2      0          0[root@test3 ~]# ipvsadm-save -n &gt; /etc/sysconfig/ipvsadm-config</code></pre><pre><code class="shell">[root@test3 ~]# vim /etc/keepalived/keepalived.conf! Configuration File for keepalivedglobal_defs {   notification_email {     acassen@firewall.loc         //设置报警收件人邮箱，可以定义多个   }   notification_email_from Alexandre.Cassen@firewall.loc    //设置发件人   smtp_server 127.0.0.1         //定义邮件服务器   smtp_connect_timeout 30       //连接超时时间   router_id LVS1          //设置路由ID号（需修改）   vrrp_skip_check_adv_addr   vrrp_strict   vrrp_garp_interval 0   vrrp_gna_interval 0}vrrp_instance VI_1 {           //每一个vrrp_instance就定义一个虚拟路由器    state MASTER         //由初始状态状态转换为master状态（需修改）    interface ens33      //定义网络接口（根据自己的网卡名称设置，主备可以不同）    virtual_router_id 51  //虚拟路由的id号，一般不能大于255（主辅VRID号必须一致）（需修改）    priority 100         //服务器优先级（需修改）    advert_int 1         //初始化通告    authentication {          //认证机制        auth_type PASS        auth_pass 1111      //密码（主辅服务器密码必须一致）    }    virtual_ipaddress {           //虚拟地址VIP（需修改）        192.168.2.150    }}virtual_server 192.168.2.150 80 {         //设置ipvsadm的VIP规则（需修改）    delay_loop 6    lb_algo wrr       //设置LVS调度算法为WRR（需修改）    lb_kind DR        //设置LVS的模式为DR（需修改）    #persistence_timeout 50   //注释掉的作用是保持连接，开启后，客户端在一定时间内始终访问相同服务器(超时时间)    protocol TCP    real_server 192.168.2.128 80 {        //设置后端web服务器真实IP（需修改）        weight 1          //设置权重为1（需修改）        TCP_CHECK {              //对后台real_server做健康检查            connect_timeout 3   //等待超时时间(访问时等待3秒)            nb_get_retry 3    //失败后尝试次数(访问失败后再尝试3次访问)            delay_before_retry 3   //每隔多久执行一次(每隔3秒执行一次)        }    }    real_server 192.168.2.129 80 {         //设置后端web服务器真实IP（需修改）        weight 2        //设置权重为2（需修改）        TCP_CHECK {          //对后台real_server做健康检查            connect_timeout 3            nb_get_retry 3            delay_before_retry 3        }    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/linux-ji-chu-you-hua/"/>
      <url>/2021/08/14/linux-ji-chu-you-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="基础优化"><a href="#基础优化" class="headerlink" title="基础优化"></a>基础优化</h1><p>安装centos7 </p><p>修改内核（将默认网卡名ens33改成eth0）</p><p>将光标移动到选择”Install CentOS 7”**</p><p>选择<strong>Tab键，打开Kernel</strong>启动项，再后面添加net.ifnames=0 biosdevname=0</p><p>分区    </p><p>/boot    1024MB</p><p>swap        4096MB</p><p>/                剩余空间</p><h2 id="一、解决网络问题排查思路"><a href="#一、解决网络问题排查思路" class="headerlink" title="一、解决网络问题排查思路"></a>一、解决网络问题排查思路</h2><p>当我们部署完虚拟机遇到无法上网的问题是，排查思路如下：</p><p>ps：由内到外</p><h3 id="1、linux层面检查"><a href="#1、linux层面检查" class="headerlink" title="1、linux层面检查"></a>1、linux层面检查</h3><pre><code class="shell">ip a        查看网卡运行状态如果网卡处于done或者网卡无显示信息，systemctl restart network重启网卡、停止NetworkManager查看网卡配置文件具体信息</code></pre><h3 id="2、vm层面检查"><a href="#2、vm层面检查" class="headerlink" title="2、vm层面检查"></a>2、vm层面检查</h3><pre><code class="shell">虚拟网络编辑器 ---&gt; vmnet8 网卡设置 查看子网、掩码、网关等设置</code></pre><h3 id="3、windows层面检查"><a href="#3、windows层面检查" class="headerlink" title="3、windows层面检查"></a>3、windows层面检查</h3><pre><code class="shell">本地网卡检查 ---&gt; 控制面板\网络和 Internet\网络连接本地服务检查 ---&gt; 任务管理器 服务 vmware相关服务重启</code></pre><h2 id="二、基础优化步骤"><a href="#二、基础优化步骤" class="headerlink" title="二、基础优化步骤"></a>二、基础优化步骤</h2><h3 id="1、配置yum仓库"><a href="#1、配置yum仓库" class="headerlink" title="1、配置yum仓库"></a>1、配置yum仓库</h3><pre><code class="shell">rm -f /etc/yum.repos.d/*curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repocurl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo#或curl -o /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repoyum install -y https://repo.huaweicloud.com/epel/epel-release-latest-7.noarch.rpmsed -i "s/#baseurl/baseurl/g" /etc/yum.repos.d/epel.reposed -i "s/metalink/#metalink/g" /etc/yum.repos.d/epel.reposed -i "s@https\?://download.fedoraproject.org/pub@https://repo.huaweicloud.com@g" /etc/yum.repos.d/epel.repoyum clean allyum makecache</code></pre><h3 id="2、系统升级"><a href="#2、系统升级" class="headerlink" title="2、系统升级"></a>2、系统升级</h3><pre><code class="shell">yum -y upgrade  #只升级系统包，不升级软件和系统内核yum -y update  #升级系统包、软件、内核。刚做完系统执行一次，以后不要执行，避免长时间未更新，出现兼容问题。yum update -y --exclud=kernel*    #排除内核都更新</code></pre><h3 id="3、安装基础软件包"><a href="#3、安装基础软件包" class="headerlink" title="3、安装基础软件包"></a>3、安装基础软件包</h3><pre><code class="shell">yum install net-tools vim tree htop iftop iotop  bash-completion bash-completion-extras lrzsz sysstat sl lsof unzip telnet nmap nc psmisc dos2unix bash-completion wget  nethogs ntpdate nfsutils rsync glances gcc gcc-c++ glibc yum-utils httpd-tools -y</code></pre><h3 id="4、关闭系统服务"><a href="#4、关闭系统服务" class="headerlink" title="4、关闭系统服务"></a>4、关闭系统服务</h3><h4 id="1、关闭防火墙"><a href="#1、关闭防火墙" class="headerlink" title="1、关闭防火墙"></a>1、关闭防火墙</h4><pre><code class="shell">systemctl stop firewalld      -----&gt;临时关闭systemctl status firewalld    -----&gt;查看状态systemctl disable firewalld   -----&gt;永久关闭</code></pre><h4 id="2、关闭SElinux"><a href="#2、关闭SElinux" class="headerlink" title="2、关闭SElinux"></a>2、关闭SElinux</h4><pre><code class="shell">setenforce 0                  -----&gt;临时关闭sed -i '/^SELINUX=/c SELINUX=disabled' /etc/selinux/config        ---&gt;永久关闭[root@oldboy ~]# getenforce        -----&gt;检查状态Permissive</code></pre><h4 id="3、关闭NetworkManager"><a href="#3、关闭NetworkManager" class="headerlink" title="3、关闭NetworkManager"></a>3、关闭NetworkManager</h4><pre><code class="shell">systemctl stop NetworkManager      -----&gt;临时关闭systemctl status NetworkManager    -----&gt;查看状态systemctl disable NetworkManager       -----&gt;永久关闭</code></pre><h3 id="5、配置ntp服务，同步系统时间"><a href="#5、配置ntp服务，同步系统时间" class="headerlink" title="5、配置ntp服务，同步系统时间"></a>5、配置ntp服务，同步系统时间</h3><pre><code class="shell">echo '#Timing synchronization time' &gt;&gt;/var/spool/cron/root    #给定时任务加上注释echo '0 */1 * * * /usr/sbin/ntpdate ntp1.aliyun.com &amp;&gt;/dev/null' &gt;&gt;/var/spool/cron/root        #设置定时任务crontab -l    #检查结果</code></pre><h3 id="6、优化显示输出"><a href="#6、优化显示输出" class="headerlink" title="6、优化显示输出"></a>6、优化显示输出</h3><p>vim /etc/bashrc 进入bashrc文件 按下41gg 跳转文件的41行 按下i键进入编辑模式，输入#，注释当前行，光标移动到#号前，按下回车键空出当前41行内容，而后光标移动到41行（空行位置），粘贴参数。而后按下ESC键，退出编辑模式，按下SHIFT+; wq 保存退出</p><pre><code class="shell">[ "$PS1" = "\\s-\\v\\\$ " ] &amp;&amp; PS1="[\[\e[34;1m\]\u@\[\e[0m\]\[\e[32;1m\]\H\[\e[0m\] \[\e[31;1m\]\w\[\e[0m\]]\\$ "</code></pre><h3 id="7、优化ssh连接速度"><a href="#7、优化ssh连接速度" class="headerlink" title="7、优化ssh连接速度"></a>7、优化ssh连接速度</h3><pre><code class="shell">sed -i 's@#UseDNS yes@UseDNS no@g' /etc/ssh/sshd_configsed -i 's@^GSSAPIAuthentication yes@GSSAPIAuthentication no@g' /etc/ssh/sshd_configsystemctl restart sshd</code></pre><h3 id="8、hosts解析"><a href="#8、hosts解析" class="headerlink" title="8、hosts解析"></a>8、hosts解析</h3><p>vim /etc/hosts</p><p>根据需要修改</p><pre><code class="shell">192.168.100.11 centos7</code></pre><h3 id="9、调整单个进程最大打开文件数"><a href="#9、调整单个进程最大打开文件数" class="headerlink" title="9、调整单个进程最大打开文件数"></a>9、调整单个进程最大打开文件数</h3><pre><code class="shell">echo '* - nofile 65535' &gt;&gt; /etc/security/limits.conf</code></pre><p>以上完成后开始克隆</p><h1 id="修改每台主机的主机名、IP地址"><a href="#修改每台主机的主机名、IP地址" class="headerlink" title="修改每台主机的主机名、IP地址"></a>修改每台主机的主机名、IP地址</h1><h2 id="一、修改主机名"><a href="#一、修改主机名" class="headerlink" title="一、修改主机名"></a>一、修改主机名</h2><pre><code class="shell">hostnamectl set-hostname 要换的名字        #注意看要换的名字hostnamectl set-hostname web01</code></pre><h2 id="二、修改ip地址"><a href="#二、修改ip地址" class="headerlink" title="二、修改ip地址"></a>二、修改ip地址</h2><pre><code class="shell">sed -i 's#原ip#更改后ip#g' /etc/sysconfig/network-scripts/ifcfg-eth[01]   #注意自己要换的ip和原ip是什么sed -i 's#200#7#g' /etc/sysconfig/network-scripts/ifcfg-eth[01]systemctl restart network</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/linux/"/>
      <url>/2021/08/14/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-https-www-linuxprobe-com-basic-learning-00-html"><a href="#Linux-https-www-linuxprobe-com-basic-learning-00-html" class="headerlink" title="Linux](https://www.linuxprobe.com/basic-learning-00.html)"></a>Linux](<a href="https://www.linuxprobe.com/basic-learning-00.html">https://www.linuxprobe.com/basic-learning-00.html</a>)</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><pre><code class="shell">ssh-keygen -t rsa  #生成密钥和私钥文件 id_rsa、id_rsa.pubcd .sshssh-copy-id ipssh root@ip </code></pre><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><pre><code class="shell">vim /etc/sysconfig/network-scripts/ifcfg-eth0IPADDR=192.168.100.10PREFIX=24GATEWAY=192.168.100.1DNS=192.168.100.1systemctl restart network</code></pre><h3 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h3><pre><code class="shell">vim /etc/hosts192.168.100.10 node1192.168.100.20 node2</code></pre><h3 id="网络端口监听"><a href="#网络端口监听" class="headerlink" title="网络端口监听"></a>网络端口监听</h3><pre><code class="shell">netstatnetstat -nlpt #获取进程名、进程号、用户IDnetstat -tnl #可以看到处于监听状态的TCP端口和连接</code></pre><h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><p>Linux <a href="https://www.linuxprobe.com/how-to-crontab.html">crontab</a>是用来定期执行程序的命令。</p><pre><code class="shell">crontab [-u user] filecrontab [ -u user ] [ -i ] { -e | -l | -r }• -u user：用于设定某个用户的crontab服务；• file: file为命令文件名，表示将file作为crontab的任务列表文件并载入crontab；• -e：编辑某个用户的crontab文件内容，如不指定用户则表示当前用户；• -l：显示某个用户的crontab文件内容，如不指定用户则表示当前用户；• -r：从/var/spool/cron目录中删除某个用户的crontab文件。• -i：在删除用户的crontab文件时给确认提示</code></pre><p>每一分钟执行一次command（因cron默认每1分钟扫描一次，因此全为*即可）</p><pre><code class="shell">*    *    *    *    *  command</code></pre><p>每小时的第3和第15分钟执行command</p><pre><code class="shell">3,15   *    *    *    *  command</code></pre><p>每天上午8-11点的第3和15分钟执行command：</p><pre><code class="shell">3,15  8-11  *  *  *  command</code></pre><p>每隔2天的上午8-11点的第3和15分钟执行command：</p><pre><code class="shell">3,15  8-11  */2  *   *  command</code></pre><p>每个星期一的上午8点到11点的第3和第15分钟执行command</p><pre><code class="shell">3,15  8-11   *   *  1 command</code></pre><p>每晚的21:30重启smb</p><pre><code class="shell">30  21   *   *  *  /etc/init.d/smb restart</code></pre><p>每月1、10、22日的4 : 45重启smb</p><pre><code class="shell">45  4  1,10,22  *  *  /etc/init.d/smb restart</code></pre><p>每周六、周日的1 : 10重启smb</p><pre><code class="shell">10  1  *  *  6,0  /etc/init.d/smb restart</code></pre><p>每天18 : 00至23 : 00之间每隔30分钟重启smb</p><pre><code class="shell">0,30  18-23  *  *  *  /etc/init.d/smb restart</code></pre><p>每一小时重启smb</p><pre><code class="shell">*  */1  *  *  *  /etc/init.d/smb restart</code></pre><p>晚上11点到早上7点之间，每隔一小时重启smb</p><pre><code class="shell">*  23-7/1  *   *   *  /etc/init.d/smb restart</code></pre><p>每月的4号与每周一到周三的11点重启smb</p><pre><code class="shell">0  11  4  *  mon-wed  /etc/init.d/smb restart</code></pre><p>每小时执行/etc/cron.hourly目录内的脚本</p><pre><code class="shell">0  1   *   *   *     root run-parts /etc/cron.hourly</code></pre><h2 id="磁盘管理和文件系统"><a href="#磁盘管理和文件系统" class="headerlink" title="磁盘管理和文件系统"></a>磁盘管理和文件系统</h2><table><thead><tr><th>RAID级别</th><th>最少硬盘</th><th>可用容量</th><th>读写性能</th><th>安全性</th><th>特点</th></tr></thead><tbody><tr><td>0</td><td>2</td><td>n</td><td>n</td><td>低</td><td>追求最大容量和速度，任何一块盘损坏，数据全部异常。</td></tr><tr><td>1</td><td>2</td><td>n/2</td><td>n</td><td>高</td><td>追求最大安全性，只要阵列组中有一块硬盘可用，数据不受影响。</td></tr><tr><td>5</td><td>3</td><td>n-1</td><td>n-1</td><td>中</td><td>在控制成本的前提下，追求硬盘的最大容量、速度及安全性，允许有一块硬盘异常，数据不受影响。</td></tr><tr><td>10</td><td>4</td><td>n/2</td><td>n/2</td><td>高</td><td>综合RAID1和RAID0的优点，追求硬盘的速度和安全性，允许有一半硬盘异常（不可同组），数据不受影响</td></tr></tbody></table><pre><code class="shell">df -h                #将容量结果以易读的容量格式显示出来fdisk -l            #列出所有分区信息</code></pre><h3 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h3><p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为 <strong>d</strong> 则是目录</li><li>当为 <strong>-</strong> 则是文件；</li><li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li><li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><table><thead><tr><th>文件类型</th><th>属主权限</th><th>属组权限</th><th>其它用户权限</th></tr></thead><tbody><tr><td>d</td><td>rwx</td><td>r-x</td><td>r-x</td></tr><tr><td>目录文件</td><td>读 写 执行</td><td>读 写 执行</td><td>读 写 执行</td></tr></tbody></table><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><pre><code class="shell">vim 常用命令输入模式    i    #i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。o    #o 为在目前光标所在的下一行处输入新的一行；O 为在目前光标所在的上一行处输入新的一行！a    #a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。gg    #移动到这个档案的第一行，相当于 1G x    #在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) dd    #删除游标所在的那一整行yy    #复制游标所在的那一行p    #p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！u    #复原前一个动作.[Ctrl]+r    #重做上一个动作。:set nu        #显示行号，设定之后，会在每一行的前缀显示该行的行号vim 中批量添加注释方法一 ：块选择模式批量注释：Ctrl + v 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 I 进入行首插入模式输入注释符号如 // 或 #，输入完毕之后，按两下 ESC，Vim 会自动将你选中的所有行首都加上注释，保存退出完成注释。取消注释：Ctrl + v 进入块选择模式，选中你要删除的行首的注释符号，注意 // 要选中两个，选好之后按 d 即可删除注释，ESC 保存退出。</code></pre><h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><h3 id="yum常用命令"><a href="#yum常用命令" class="headerlink" title="yum常用命令"></a>yum常用命令</h3><ul><li>\1. 列出所有可更新的软件清单命令：<strong>yum check-update</strong></li><li>\2. 更新所有软件命令：<strong>yum update</strong></li><li>\3. 仅安装指定的软件命令：<strong>yum install <package_name></package_name></strong></li><li>\4. 仅更新指定的软件命令：<strong>yum update <package_name></package_name></strong></li><li>\5. 列出所有可安裝的软件清单命令：<strong>yum list</strong></li><li>\6. 删除软件包命令：<strong>yum remove <package_name></package_name></strong></li><li>\7. 查找软件包命令：<strong>yum search <keyword></keyword></strong></li><li>\8. 清除缓存命令:<ul><li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li><li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li><li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的 headers</li><li><strong>yum clean, yum clean all (= yum clean packages; yum clean oldheaders)</strong> :清除缓存目录下的软件包及旧的 headers</li></ul></li></ul><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><pre><code class="shell"> rpm -ivh &lt;package_name&gt;        #安装软件 rpm -qi &lt;package_name&gt;        #显示软件安装信息</code></pre><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="配置管理nginx-conf"><a href="#配置管理nginx-conf" class="headerlink" title="配置管理nginx.conf"></a>配置管理nginx.conf</h3><pre><code class="nginx">########### 每个指令必须有分号结束。##################user administrator administrators;  #配置用户或者组，默认为nobody nobody。#worker_processes 2;  #允许生成的进程数，默认为1#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emergevents {    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport    worker_connections  1024;    #最大连接数，默认为512}http {    include       mime.types;   #文件扩展名与文件类型映射表    default_type  application/octet-stream; #默认文件类型，默认为text/plain    #access_log off; #取消服务日志        log_format myFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义格式    access_log log/access.log myFormat;  #combined为日志格式的默认值    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。    upstream mysvr {         server 127.0.0.1:7878;      server 192.168.10.121:3333 backup;  #热备    }    error_page 404 https://www.baidu.com; #错误页    server {        keepalive_requests 120; #单连接请求上限次数。        listen       4545;   #监听端口        server_name  127.0.0.1;   #监听地址               location  ~*^.+$ {       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。           #root path;  #根目录           #index vv.txt;  #设置默认页           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表           deny 127.0.0.1;  #拒绝的ip           allow 172.18.5.54; #允许的ip                   }     }}</code></pre><pre><code class="nginx"># For more information on configuration, see:#   * Official English Documentation: http://nginx.org/en/docs/#   * Official Russian Documentation: http://nginx.org/ru/docs/user nginx;worker_processes auto;        #允许生成的进程数，取决于CPU核数error_log /var/log/nginx/error.log;        #错误日志pid /run/nginx.pid;         #主进程id，指定nginx进程运行文件存放地址# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events {    worker_connections 1024;        ##worker进程处理的请求数}##服务器核心配置http {        ##日志格式    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';        ##访问日志    access_log  /var/log/nginx/access.log  main;    sendfile            on;    tcp_nopush          on;    tcp_nodelay         on;    ##会话保持时间    keepalive_timeout   65;    types_hash_max_size 4096;    include             /etc/nginx/mime.types;    default_type        application/octet-stream;    # Load modular configuration files from the /etc/nginx/conf.d directory.    # See http://nginx.org/en/docs/ngx_core_module.html#include    # for more information.    include /etc/nginx/conf.d/*.conf;        #引入子配置文件    server {        listen       80;        ##监听所有的ipv4的地址        listen       [::]:80;    ##监听所有的ipv6的地址        server_name  _;        root         /usr/share/nginx/html;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }    }# Settings for a TLS enabled server.##    server {#        listen       443 ssl http2;#        listen       [::]:443 ssl http2;#        server_name  _;#        root         /usr/share/nginx/html;##        ssl_certificate "/etc/pki/nginx/server.crt";#        ssl_certificate_key "/etc/pki/nginx/private/server.key";#        ssl_session_cache shared:SSL:1m;#        ssl_session_timeout  10m;#        ssl_ciphers HIGH:!aNULL:!MD5;#        ssl_prefer_server_ciphers on;##        # Load configuration files for the default server block.#        include /etc/nginx/default.d/*.conf;##        error_page 404 /404.html;#            location = /40x.html {#        }##        error_page 500 502 503 504 /50x.html;#            location = /50x.html {#        }#    }}</code></pre><pre><code class="nginx">server {        listen       80;        listen       [::]:80;        server_name  _;        root         /usr/share/nginx/html;            # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;         location = /hello {            root         /usr/share/nginx/html;        ##网站目录    目录/URL            index        index.html index.htm;        #默认首页    index.html        }        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }</code></pre><h3 id="自定义站点"><a href="#自定义站点" class="headerlink" title="自定义站点"></a>自定义站点</h3><p>1.获取信息</p><p>站点名称：mysite.com</p><p>端口：81</p><p>站点目录：/opt/mysite</p><p>2.创建站点 </p><pre><code class="shell">[root@localhost ~]# mkdir -p /opt/mysite[root@localhost ~]# cd /opt/mysite/[root@localhost mysite]# ls[root@localhost mysite]# echo mysite &gt; index.com[root@localhost mysite]# mkdir static[root@localhost mysite]# echo static &gt; static/index.com </code></pre><p>3.配置nginx服务</p><pre><code class="nginx">server {        listen       81;        listen       [::]:80;        server_name  mysite.com;        root         /opt/mysite;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;         location = /static {            root         /opt/mysite;        ##网站目录    目录/URL            index        index.html index.htm;        #默认首页    index.html        }        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }}</code></pre><p>4.启动nginx</p><pre><code class="shell">vim /etc/nginx/conf.d/mysite.conf</code></pre><p>5.安全配置</p><p>安全组（开放端口）</p><pre><code class="shell">systemctl stop firewalld    #关闭防火墙</code></pre><p>6.配置域名</p><p>域名–&gt;解析成IP</p><p>买一个域名：</p><p>本地hosts</p><p>win：C:\Windows\System32\drivers\etc\hosts</p><h3 id="nginx配置虚拟主机"><a href="#nginx配置虚拟主机" class="headerlink" title="nginx配置虚拟主机"></a>nginx配置虚拟主机</h3><ul><li>基于IP虚拟主机</li><li>基于端口的虚拟主机</li><li>基于域名</li><li>基于访问路径配置</li></ul><h4 id="基于IP配置虚拟主机"><a href="#基于IP配置虚拟主机" class="headerlink" title="基于IP配置虚拟主机"></a>基于IP配置虚拟主机</h4><p>每台机器配置一个站点</p><h4 id="基于端口配置虚拟主机"><a href="#基于端口配置虚拟主机" class="headerlink" title="基于端口配置虚拟主机"></a>基于端口配置虚拟主机</h4><ul><li>site1:/opt/site1</li><li>site2:/opt/site2</li></ul><pre><code class="nginx">server {        listen       82;        listen       [::]:82;        server_name  _;        root         /opt/site1;        index        index.html index.htm;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }}</code></pre><pre><code class="nginx">server {        listen       83;        listen       [::]:83;        server_name  _;        root         /opt/site2;        index        index.html index.htm;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }}</code></pre><h4 id="基于域名配置虚拟主机"><a href="#基于域名配置虚拟主机" class="headerlink" title="基于域名配置虚拟主机"></a>基于域名配置虚拟主机</h4><ul><li>mysite1.com /opt mysite1</li><li>mysite2.com /opt mysite2</li></ul><pre><code class="shell">mkdir /opt/mysite1 /opt/mysite2echo mysite1 &gt;/opt/mysite1/index.htmlecho mysite2 &gt;/opt/mysite1/index.html</code></pre><p>配置站点</p><pre><code class="nginx">server {        listen       85;        listen       [::]:85;        server_name  mysite1.com;        root         /opt/mysite1;        index        index.html index.htm;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }}</code></pre><pre><code class="nginx">server {        listen       86;        listen       [::]:86;        server_name  mysite1.com;        root         /opt/mysite2;        index        index.html index.htm;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }}</code></pre><p>基于访问路径配置虚拟主机</p><pre><code class="nginx">server {        listen       80;        listen       [::]:80;        server_name  _;        root         /opt;        index        index.html index.htm;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        location = /site1 {        }                location = /site2 {        }        location = /site3 {        }        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }}</code></pre><h3 id="nginx配置代理服务器"><a href="#nginx配置代理服务器" class="headerlink" title="nginx配置代理服务器"></a>nginx配置代理服务器</h3><p>一台机器：运行一个代理站点和两个其他站点</p><p>创建数据</p><ul><li>proxysite1:/opt/proxy1</li><li>proxysite2:/opt/proxy2</li></ul><pre><code class="shell">mkdir /opt/proxy1 /opt/proxy2echo "my proxy site1" &gt; /opt/proxy1/index.htmlecho "my proxy site2" &gt; /opt/proxy2/index.html</code></pre><p>创建站点</p><p>proxy1</p><pre><code class="nginx">server {        listen       87;        listen       [::]:87;        server_name  _;        root         /opt/proxy1;        index        index.html index.htm;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }}</code></pre><p>proxy2</p><pre><code class="nginx">server {        listen       88;        listen       [::]:88;        server_name  _;        root         /opt/proxy2;        index        index.html index.htm;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;        error_page 404 /404.html;        location = /404.html {        }        error_page 500 502 503 504 /50x.html;        location = /50x.html {        }}</code></pre><p>proxy</p><pre><code class="nginx">server {    listen       89;    location / {        proxy_pass http://192.168.100.128:88/;    }    location ~ \.(gif|jpg|png)$ {        root /data/images;    }}</code></pre><p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html">Module ngx_http_proxy_module</a></p><pre><code class="nginx">proxy_pass        ##设置代理服务器的协议和地址以及位置应映射到的可选 URI。作为协议，可以指定“ http”或“ https”。地址可以指定为域名或 IP 地址，以及可选的端口：</code></pre><h3 id="配置NGINX支持PHP网站解析"><a href="#配置NGINX支持PHP网站解析" class="headerlink" title="配置NGINX支持PHP网站解析"></a>配置NGINX支持PHP网站解析</h3><h4 id="静动分离"><a href="#静动分离" class="headerlink" title="静动分离"></a>静动分离</h4><pre><code class="nginx">server {        listen       81;        listen       [::]:80;        server_name  mysite.com;        root         /opt/mysite;        # Load configuration files for the default server block.        include /etc/nginx/default.d/*.conf;         location = /static {            root         /opt/mysite;        ##网站目录    目录/URL            index        index.html index.htm;        #默认首页    index.html        }       location /.php$ {        root   /opt/mysite;        index  index.php;        fastcgi_pass  localhost:9000;        fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;        fastcgi_param QUERY_STRING $query_string;        include fastcgi_params;    }}</code></pre><p>准备php页面</p><pre><code class="php">&lt;?php    phpinfo();?&gt;</code></pre><h3 id="nginx配置负载均衡器"><a href="#nginx配置负载均衡器" class="headerlink" title="nginx配置负载均衡器"></a>nginx配置负载均衡器</h3><pre><code class="nginx">http {    upstream backend {        server backend1.example.com;        server backend2.example.com;        server 192.0.0.1 backup;    }        server {        location / {            proxy_pass http://backend;        }    }}</code></pre><p>服务器权重</p><pre><code class="nginx">upstream backend {    server backend1.example.com weight=5;    server backend2.example.com;    server 192.0.0.1 backup;}#weight 参数server设置服务器的权重；默认是1#在这个例子中，backend1.example.com有 weight 5；其他两台服务器有默认权重（1），但有 IP 地址的那台192.0.0.1被标记为backup服务器，除非其他两台服务器都不可用，否则不会接收请求。随着权重的这种配置，每的6请求，5发送到backend1.example.com和1对backend2.example.com。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/google-chrome-mo-ren-fei-an-quan-duan-kou-lie-biao/"/>
      <url>/2021/08/14/google-chrome-mo-ren-fei-an-quan-duan-kou-lie-biao/</url>
      
        <content type="html"><![CDATA[<h2 id="Google-Chrome-默认非安全端口列表"><a href="#Google-Chrome-默认非安全端口列表" class="headerlink" title="Google Chrome 默认非安全端口列表"></a>Google Chrome 默认非安全端口列表</h2><pre><code class="markdown">  1,    // tcpmux  7,    // echo  9,    // discard  11,   // systat  13,   // daytime  15,   // netstat  17,   // qotd  19,   // chargen  20,   // ftp data  21,   // ftp access  22,   // ssh  23,   // telnet  25,   // smtp  37,   // time  42,   // name  43,   // nicname  53,   // domain  77,   // priv-rjs  79,   // finger  87,   // ttylink  95,   // supdup  101,  // hostriame  102,  // iso-tsap  103,  // gppitnp  104,  // acr-nema  109,  // pop2  110,  // pop3  111,  // sunrpc  113,  // auth  115,  // sftp  117,  // uucp-path  119,  // nntp  123,  // NTP  135,  // loc-srv /epmap  139,  // netbios  143,  // imap2  179,  // BGP  389,  // ldap  465,  // smtp+ssl  512,  // print / exec  513,  // login  514,  // shell  515,  // printer  526,  // tempo  530,  // courier  531,  // chat  532,  // netnews  540,  // uucp  556,  // remotefs  563,  // nntp+ssl  587,  // stmp?  601,  // ??  636,  // ldap+ssl  993,  // ldap+ssl  995,  // pop3+ssl  2049, // nfs  3659, // apple-sasl / PasswordServer  4045, // lockd  6000, // X11  6665, // Alternate IRC [Apple addition]  6666, // Alternate IRC [Apple addition]  6667, // Standard IRC [Apple addition]  6668, // Alternate IRC [Apple addition]  6669, // Alternate IRC [Apple addition]</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/docker/"/>
      <url>/2021/08/14/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="docker安装部署添加阿里云镜像加速器"><a href="#docker安装部署添加阿里云镜像加速器" class="headerlink" title="docker安装部署添加阿里云镜像加速器"></a>docker安装部署添加阿里云镜像加速器</h3><pre><code class="shell">sudo yum install -y yum-utilssudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo    ##安装docker    sudo yum install docker-ce docker-ce-cli containerd.io##添加阿里云镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://rwo46igw.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre><code class="shell">docker version    #显示docker的版本信息docker info        #显示docker的系统信息，包括镜像和容器的数量docker --help    #帮助命令</code></pre><p><a href="https://docs.docker.com/reference/">docker帮助文档</a></p><pre><code class="shell">##镜像命令[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   5 months ago   13.3kB#解释REPOSITORY        镜像的仓库源TAG                镜像的标签IMAGE ID        镜像的idCREATED            镜像的创建时间SIZE            镜像的大小#-a，--all        列出所有镜像-q，--quiet        只显示镜像的id[root@localhost ~]# docker search mysql    #搜索镜像[root@localhost ~]# docker pull mysql    #下载镜像[root@localhost ~]# docker rmi -f 容器id    #删除指定容器[root@localhost ~]# docker rmi -f $(docker images -aq)    #删除所有镜像##容器命令docker run [images]#参数--name='name'    容器名字，用来区分容器-d                后台方式运行-it                使用交互模式运行，进入容器查看内容-p                制定容器端口 -p 主机端口:容器端口-P                随机指定端口docker ps    #列出当前正在运行的容器-a        #列出当前正在运行的容器+带出历史运行过的容器-n=?    #显示最近创建的容器-q        #只显示容器编号#退出容器exit        #容器停止退出CTRL+P+Q     #不停止退出#删除容器docker rm 容器id            #删除指定容器，不能删除正在运行的容器，rm -f 强制删除docker rm -f $(docker ps -aq)    #删除所有的容器docker ps -a -q|xargs docker rm #删除所有的容器#启动和停止容器docker start 容器id        #启动容器docker restart 容器id        #重启容器docker stop 容器id        #停止当前正在运行的容器docker kill 容器id        #强制停止容器#其他命令docker run -d 镜像名#docker容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止，容器启动后，发现自己没有提供服务，会立刻停止docker logs -tf --tail 10  #查看日志  -f 跟踪日志输出docker top 容器id        #查看容器中进程信息docker inspect 容器id        #查看镜像的元数据#进入当前正在运行的容器docker exec -it 容器id /bash/shelldocker attach 容器id#从容器内拷贝文件到主机上docker cp 容器id:容器内路径 目的主机路径docker stats    #监控容器资源消耗</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code class="shell">attach    Attach to a running container  #当前shell下attach连接指定运行镜像build     Build an image from a Dockerfile  #通过Dockerfile定制镜像commit    Create a new image from a container's changes  #提交当前容器为新的镜像cp    Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中create    Create a new container  #创建一个新的容器，同run 但不启动容器diff    Inspect changes on a container's filesystem  #查看docker容器变化events    Get real time events from the server#从docker服务获取容器实时事件exec    Run a command in a running container#在已存在的容器上运行命令export    Export a container's filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)history    Show the history of an image  #展示一个镜像形成历史images    List images  #列出系统当前镜像import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)info    Display system-wide information  #显示系统相关信息inspect    Return low-level information on a container or image  #查看容器详细信息kill    Kill a running container  #kill指定docker容器load    Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)login    Register or log in to a Docker registry#注册或者登陆一个docker源服务器logout    Log out from a Docker registry  #从当前Docker registry退出logs    Fetch the logs of a container  #输出当前容器日志信息pause    Pause all processes within a container#暂停容器port    List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口ps    List containers  #列出容器列表pull    Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像push    Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器rename    Rename a container  #重命名容器restart    Restart a running container  #重启运行的容器rm    Remove one or more containers  #移除一个或者多个容器rmi    Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)run    Run a command in a new container  #创建一个新的容器并运行一个命令save    Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)search    Search the Docker Hub for images  #在dockerhub中搜索镜像start    Start one or more stopped containers#启动容器stats    Display a live stream of container(s) resource usage statistics  #统计容器使用资源stop    Stop a running container  #停止容器tag         Tag an image into a repository  #给源中镜像打标签top       Display the running processes of a container #查看容器中运行的进程信息unpause    Unpause all processes within a container  #取消暂停容器version    Show the Docker version information#查看容器版本号wait         Block until a container stops, then print its exit code  #截取容器停止时的退出状态值</code></pre><h3 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h3><h4 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h4><pre><code class="shell">docekr commit 提交容器成为一个新的副本    #保存当前容器状态docker commit -m="提交的描述信息" -a="作者" 容器id 目标镜像名：[tag]</code></pre><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><p>容器的持久化和同步操作！容器间也是可以数据共享的！</p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><blockquote><p>方式一：直接使用命令挂载   -v</p></blockquote><pre><code class="shell">docker run -it -v 主机目录：容器目录#MySQL数据持久化# 运行容器，需要做数据挂载  #安装启动MySQL，需要配置密码！！#官方测试：    docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag#启动-d 后台运行-p 端口映射-v 卷挂载-e 环境配置--name 容器名</code></pre><h4 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h4><pre><code class="shell">#匿名挂载-v 容器内路径！docker run -d -P --name nginx1 -v /etc/nginx nginx#查看volume的情况docker volume ls#具名挂载docker run -d -P --name nginx2 -v juming-nginx:etc/nginx nginx-v 容器内路径            #匿名挂载-v 卷名：容器内路径            #具名挂载-v /宿主机路径：：容器内路径    #指定路径挂载#拓展-v 容器内路径：ro   rw  改变读写权限ro    readonly    #只读rw  readwrite    #可读可写ro  只要看到就说明ro这个路径只能通过宿主机来操作，容器内部是无法操作</code></pre><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile 就是用来构建 docker 镜像的构建文件，命令脚本</p><pre><code class="shell">#创建一个dockerfile文件，名字随机建议Dockerfile#文件内容  指令（大写） 参数FROM centosVOLUME ["/volume01","/volume02"]CMD echo "----end----"CMD /bin/bash#每个命令就是镜像的一层</code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/markdown-yu-fa/"/>
      <url>/2021/08/14/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>hello,world!</strong></p><p><strong>hello,world!</strong></p><p><em>hello,world!</em></p><p><em>hello,world!</em></p><p><em><strong>hello,world!</strong></em></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>hello,world!</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p><u>字段前加</u></p><u></u><p><u>字段后加</u></p><p><u>hello,world</u></p><h2 id="创建脚注"><a href="#创建脚注" class="headerlink" title="创建脚注"></a>创建脚注</h2><p>创建脚注<a href="%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C%EF%BC%81">^hello,world!</a>鼠标移到hello,world！可以看到对应的脚注</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>有序列表数字后跟.再跟空格</p><ol><li></li><li></li><li></li></ol><p>无序列表在字段前用 * 或 + 或 -</p><ul><li></li></ul><ul><li></li></ul><ul><li></li></ul><p>嵌套循环在子列表符号前加四个空格</p><ol><li>1<ul><li>a</li><li>b</li></ul></li></ol><p>​    2</p><ul><li></li><li></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>只要学不死，就往死里学！</p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>直接使用&lt;&gt;在里面填地址</p><p><a href="https://kuangstudy.com/">https://kuangstudy.com</a></p><p>先用[]给链接赋名再使用&lt;&gt;填地址</p><p><a href="https://www.kuangstudy.com/course/play/1317503462556848129">点击跳转狂神markdown教程</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>加反引号``表示代码的一小段</p><p><code>hello,world!</code></p><p>前后使用三个```表示代码块，后可指定代码语言</p><pre><code class="java">public class demo{    piblic static void main (String[] ages){        System.out.plintln("hello,world!")    }}</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>分隔不同的单元格用 | ，分隔表头和其他行用 -</p><table><thead><tr><th align="right"></th><th></th><th></th></tr></thead><tbody><tr><td align="right"></td><td></td><td></td></tr><tr><td align="right"></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
