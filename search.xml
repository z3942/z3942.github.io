<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LNMP</title>
      <link href="/2021/09/17/lnmp/"/>
      <url>/2021/09/17/lnmp/</url>
      
        <content type="html"><![CDATA[<h2 id="LNMP"><a href="#LNMP" class="headerlink" title="LNMP"></a>LNMP</h2><h3 id="nginx部署"><a href="#nginx部署" class="headerlink" title="nginx部署"></a>nginx部署</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">安装形式yum\rpm\源代码编译安装安装nginx系统依赖环境检查yum install pcre pcre-devel openssl openssl-devel gcc -y sqlite-devel下载源代码包wget http://nginx.org/download/nginx-1.20.1.tar.gz解压缩源代码包tar -zxvf nginx-1.20.1.tar.gz创建普通的nginx用户，用于运行nginx进程，降低nginx的系统权限useradd nginx -u 1111 -s /sbin/nologin开始编译安装nginx服务./configure  --user=nginx --group=nginx --prefix=/opt/nginx/ --with-http_stub_status_module --with-http_ssl_modulemake &amp;&amp; make install 配置软链接ln -s /opt/nginx/  /opt/nginx添加环境变量vim /etc/profilePATH="$PATH:/opt/nginx/sbin"source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库搭建"><a href="#数据库搭建" class="headerlink" title="数据库搭建"></a>数据库搭建</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">安装MySQLyum\rpm包安装，简单，快速，无法定制化、\源代码编译安装，定制化软件功能，安装过程复杂二进制方式安装，解压缩后直接简单配置即可使用，无需再安装，速度较快创建普通的mysql用户，降低程序运行权限useradd mysql -s /sbin/nologin下载mysql二进制代码包 wget https://mirrors.aliyun.com/mysql/MySQL-5.7/mysql-5.7.33-linux-glibc2.12-x86_64.tar.gz解压缩tar -zxvf mysql-5.7.33-linux-glibc2.12-x86_64.tar.gz配置软链接ln -s /opt/mysql-5.7.33-linux-glibc2.12-x86_64  /opt/mysql卸载可能centos7存在的mariadb相关依赖rpm -e --nodeps mariadb-libs准备启动mysql的配置文件vim /etc/my.cnf[mysqld]user=mysqlbasedir=/opt/mysqldatadir=/opt/mysql/datasocket=/tmp/mysql.sockserver_id=1port=3306log_error=/opt/mysql/data/mysql_err.log[mysql]socket=/tmp/mysql.sock检查mysql所需依赖环境yum install libaio-devel -y创建存放数据的文件夹 mkdir -p /opt/mysql/data 进行权限控制 chown -R mysql.mysql /opt/mysql  初始化mysql服务端 /opt/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/opt/mysql/ --datadir=/opt/mysql/data  配置mysql客户端 复制mysql启动脚本 cp /opt/mysql/support-files/mysql.server  /etc/init.d/mysqldchmod +x /etc/init.d/mysqldvim /etc/init.d/mysqldbasedir=/usr/local/mysql　　//在第46~47行datadir=/usr/local/mysql/data 配置环境变量 vim /etc/profilePATH="$PATH:/opt/nginx/sbin:/opt/mysql/bin"启动mysqlservice mysqld start  \  /etc/init.d/mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="php部署"><a href="#php部署" class="headerlink" title="php部署"></a>php部署</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> 检查 ps -ef|grep mysql ps -ef|grep nginx  安装所需环境yum install gcc gcc-c++ zlib-devel libxm12-devel libjpeg-devel libjpeg-turbo-devel libiconv-devel freetype-devel libpng-devel gd-devel libxslt-devel libcurl-devel sqlite-devel-ywget https://www.php.net/distributions/php-7.4.23.tar.gztar -zxvf libiconv-1.16.tar.gzcd libiconv-1.16/./configure --prefix=/opt/libiconv make &amp;&amp; make install安装phpwget https://www.php.net/distributions/php-7.4.23.tar.gztar -zxvf php-7.4.23.tar.gz./configure --prefix=/opt/php74 \    --enable-mysqlnd \    --with-pdo-mysql \    --with-pdo-mysql=mysqlnd \    --with-iconv-dir=/opt/libiconv \    --with-pdo-pgsql=/usr/bin/pg_config \    --enable-bcmath \    --enable-fpm \    --with-fpm-user=www-data \    --with-fpm-group=www-data \    --enable-mbstring \    --enable-phpdbg \    --enable-shmop \    --enable-sockets \    --enable-sysvmsg \    --enable-sysvsem \    --enable-sysvshm \    --enable-zip \    --with-libzip=/usr/lib/x86_64-linux-gnu \    --with-zlib \    --with-curl \    --with-pear \    --with-openssl \    --enable-pcntl \    --with-readline        make &amp;&amp; make install          比较php生产配置文件和开发配置文件的区别   vimdiff php.ini-development  php.ini-production   cp php.ini-development  /opt/php74/lib/php.ini  cd /opt/php74/etc/  cp php-fpm.conf.default  php-fpm.conf  cd php-fpm.d/  cp www.conf.default  www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc -y         <span class="token comment">#默认安装旧版本4.85</span>yum -y <span class="token function">install</span> centos-release-sclyum -y <span class="token function">install</span> devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils  <span class="token comment">#安装新版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>切换为新版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scl <span class="token builtin class-name">enable</span> devtoolset-9 <span class="token function">bash</span>      <span class="token comment">#临时切换，退出服务器恢复</span><span class="token builtin class-name">echo</span> <span class="token string">"source /opt/rh/devtoolset-9/enable"</span> <span class="token operator">&gt;&gt;</span>/etc/profile  <span class="token comment">#永久切换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix</title>
      <link href="/2021/08/30/zabbix/"/>
      <url>/2021/08/30/zabbix/</url>
      
        <content type="html"><![CDATA[<h5 id="安装-Zabbix-存储库"><a href="#安装-Zabbix-存储库" class="headerlink" title="安装 Zabbix 存储库"></a>安装 Zabbix 存储库</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -Uvh https://repo.zabbix.com/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm yum clean all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="安装-Zabbix-服务器和代理"><a href="#安装-Zabbix-服务器和代理" class="headerlink" title="安装 Zabbix 服务器和代理"></a>安装 Zabbix 服务器和代理</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> zabbix-server-mysql zabbix-agent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="C。安装-Zabbix-前端"><a href="#C。安装-Zabbix-前端" class="headerlink" title="C。安装 Zabbix 前端"></a>C。安装 Zabbix 前端</h5><p>启用红帽软件集合</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> centos-release-scl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑文件 /etc/yum.repos.d/zabbix.repo 并启用 zabbix-frontend 存储库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>zabbix-frontend<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装 Zabbix 前端包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> zabbix-web-mysql-scl zabbix-nginx-conf-scl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装数据库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> mariadb-serversystemctl start mariadb<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># systemctl enable mariadb</span>Created symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># mysql_secure_installation</span>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB      SERVERS IN PRODUCTION USE<span class="token operator">!</span>  PLEASE READ EACH STEP CAREFULLY<span class="token operator">!</span>In order to log into MariaDB to secure it, we<span class="token string">'ll need the currentpassword for the root user.  If you'</span>ve just installed MariaDB, andyou haven<span class="token string">'t set the root password yet, the password will be blank,so you should just press enter here.Enter current password for root (enter for none):OK, successfully used password, moving on...Setting the root password ensures that nobody can log into the MariaDBroot user without the proper authorisation.Set root password? [Y/n] yNew password:Re-enter new password:Password updated successfully!Reloading privilege tables.. ... Success!By default, a MariaDB installation has an anonymous user, allowing anyoneto log into MariaDB without having to have a user account created forthem.  This is intended only for testing, and to make the installationgo a bit smoother.  You should remove them before moving into aproduction environment.Remove anonymous users? [Y/n] y ... Success!Normally, root should only be allowed to connect from '</span>localhost<span class="token string">'.  Thisensures that someone cannot guess at the root password from the network.Disallow root login remotely? [Y/n] n ... skipping.By default, MariaDB comes with a database named '</span><span class="token builtin class-name">test</span><span class="token string">' that anyone canaccess.  This is also intended only for testing, and should be removedbefore moving into a production environment.Remove test database and access to it? [Y/n] y - Dropping test database... ... Success! - Removing privileges on test database... ... Success!Reloading the privilege tables will ensure that all changes made so farwill take effect immediately.Reload privilege tables now? [Y/n] y ... Success!Cleaning up...All done!  If you'</span>ve completed all of the above steps, your MariaDBinstallation should now be secure.Thanks <span class="token keyword">for</span> using MariaDB<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="d-创建初始数据库"><a href="#d-创建初始数据库" class="headerlink" title="d. 创建初始数据库"></a>d. 创建初始数据库</h5><p>确保您已启动并运行数据库服务器。</p><p>在您的数据库主机上运行以下命令。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># mysql -uroot -ppasswordmysql&gt; create database zabbix character set utf8 collate utf8_bin;mysql&gt; create user zabbix@localhost identified by 'password';mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;mysql&gt; quit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Zabbix 服务器主机上导入初始模式和数据。系统将提示您输入新创建的密码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz <span class="token operator">|</span> mysql -uzabbix -p zabbix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="e-为-Zabbix-服务器配置数据库"><a href="#e-为-Zabbix-服务器配置数据库" class="headerlink" title="e. 为 Zabbix 服务器配置数据库"></a>e. 为 Zabbix 服务器配置数据库</h5><p>编辑文件 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">DBPassword</span><span class="token operator">=</span>password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="为Zabbix前端配置PHP"><a href="#为Zabbix前端配置PHP" class="headerlink" title="为Zabbix前端配置PHP"></a>为Zabbix前端配置PHP</h5><p>编辑配置文件 /etc/opt/rh/rh-nginx116/nginx/conf.d/zabbix.conf, uncomment and set ‘listen’ and ‘server_name’ directives.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">listen <span class="token number">80</span><span class="token punctuation">;</span>server_name example.com<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑配置文件 /etc/opt/rh/rh-php72/php-fpm.d/zabbix.conf, add nginx to listen.acl_users directive.</p><pre class="line-numbers language-none"><code class="language-none">listen.acl_users = apache,nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Then uncomment and set the right timezone for you.</p><pre class="line-numbers language-none"><code class="language-none">; php_value[date.timezone] = Rsia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动Zabbix-server和agent进程"><a href="#启动Zabbix-server和agent进程" class="headerlink" title="启动Zabbix server和agent进程"></a>启动Zabbix server和agent进程</h5><p>启动Zabbix server和agent进程，并为它们设置开机自启：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpmsystemctl <span class="token builtin class-name">enable</span> zabbix-server zabbix-agent rh-nginx116-nginx rh-php72-php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>zabbix-agent2</strong></p><p>安装 zabbix rpm 源,鉴于国内网络情况，使用阿里云 zabbix 源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -Uvh https://mirrors.aliyun.com/zabbix/zabbix/5.0/rhel/7/x86_64/zabbix-release-5.0-1.el7.noarch.rpm<span class="token function">sed</span> -i <span class="token string">'s#http://repo.zabbix.com#https://mirrors.aliyun.com/zabbix#'</span> /etc/yum.repos.d/zabbix.repoyum clean all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装 Zabbix Agent2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> zabbix-agent2 -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认配置文件为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/zabbix/zabbix_agent2.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认二进制文件为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/sbin/zabbix_agent2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用以下命令启动 Agent2 并配置开机启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> --now zabbix-agent2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置</strong></p><p>zabbix agent2 的配置与之前的 zabbix agent 配置基本一致</p><pre class="line-numbers language-none"><code class="language-none">Server=172.16.66.11ServerActive=172.16.66.11Hostname=node16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Server 和 ServerActive 配置为 zabibx server 或 zabbix proxy 地址，Hostname 配置为主机名即可。 Agent2 没有组件依赖，可直接拷贝编译好的二进制文件和配置文件在其他主机上运行即可。</p><p>服务端安装测试工具</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y zabbix-getzabbix_get -s <span class="token string">'192.168.100.51'</span> -p10050 -k <span class="token string">'system.hostname'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决zabbix-server查看乱码问题</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#找个 windows 系统的电脑， C:\Windows\Fonts 目录找个中文字体文件</span><span class="token comment">#下载后上传到 zabbix server 服务器上的zabbix WEB 网站目录</span><span class="token comment">#找到 Zabbix WEB 字库目录</span><span class="token builtin class-name">cd</span> /usr/share/zabbix/assets/fonts <span class="token function">mv</span> graphfont.ttf graphfont.ttf.bak <span class="token function">ln</span> -s simhei.ttf graphfont.ttf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义监控内容"><a href="#自定义监控内容" class="headerlink" title="自定义监控内容"></a>自定义监控内容</h3><p>自定义监控服务器登录的人数</p><p>需求：限制登录人数不超过三个，超过三个就发出报警。</p><h4 id="命令行角度"><a href="#命令行角度" class="headerlink" title="命令行角度"></a>命令行角度</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#明确需要执行的linux命令</span><span class="token function">who</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token comment">##手动创建zabbix的配置文件，用于自定义key</span>/etc/zabbix/zabbix_agent2.conf<span class="token comment">###创建配置文件，内容如下</span><span class="token assign-left variable">UserParameter</span><span class="token operator">=</span>login.user,who<span class="token operator">|</span><span class="token function">wc</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在页面添加zabbix-server的自定义监控项模板"><a href="#在页面添加zabbix-server的自定义监控项模板" class="headerlink" title="在页面添加zabbix-server的自定义监控项模板"></a>在页面添加zabbix-server的自定义监控项模板</h3><p>添加流程：</p><ul><li><p>创建模板</p></li><li><p>创建应用集</p></li><li><p>创建监控项，自定义item,你具体想监控的内容</p></li><li><p>创建触发器，当监控项获取到值的时候，进行和触发器比较，判断决定是否报警</p></li><li><p>创建图形</p></li><li><p>将具体的主机和该模板链接，关联</p></li></ul><h3 id="邮件报警"><a href="#邮件报警" class="headerlink" title="邮件报警"></a>邮件报警</h3><h3 id="全网监控方案"><a href="#全网监控方案" class="headerlink" title="全网监控方案"></a>全网监控方案</h3><p>聚合图形</p><p>自动添加主机监控</p><ul><li>克隆监控模板</li><li>自动注册和自动发现</li><li>使用zabbix的api接口，利用curl语言，或者开发自己的编程脚本如Python等</li></ul><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/image-20210819184807840.png" alt="image-20210819184807840"></p><h3 id="监控实施方案"><a href="#监控实施方案" class="headerlink" title="监控实施方案"></a>监控实施方案</h3><p>硬件监控</p><p>应用服务监控</p><p>互联网有大量的开源模板可以使用</p><blockquote><p>rsync服务监控</p><p>​    监控服务器的873端口是存活的</p><p>​    有关端口的监控，使用zabbix自带的 key net . tcp. port[ ,873]</p><p>​    进行数据推拉，检测效果</p><p>监控NFS服务是否正常</p><p>​    通过key检测111端口net . tcp. port[ ,111]</p><p>​    showmount -e ip| wc -l</p><p>监控mysq1数据库是否正常</p><p>​    通过端口net. tcp . port[ , 3306]</p><p>​    mysql -uroot -p</p><p>​    zabbix自带了mysql的监控模板</p><p>web服务器监控</p><p>​    net.tcp.port[,80]</p><p>​    zabbix也提供了对web服务器的监控模板</p></blockquote><p><strong>监控服务的具体方法</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">端口检测的命令<span class="token function">netstat</span>ss<span class="token function">lsof</span>结合grep查看端口是否存活在服务端<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment"># zabbix_get -s '192.168.100.51' -p 10050 -k 'net.tcp.port[,80]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询进程信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过客户端连接</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">web服务器 curl查询mysql  用sql语句连接验证缓存数据库服务  数据读写验证<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="自动发现，自动注册"><a href="#自动发现，自动注册" class="headerlink" title="自动发现，自动注册"></a>自动发现，自动注册</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#什么是自动发现</span>zabbix server 主动地去发现所有的客户端，然后将客户端的信息，登记在服务器的机器上缺点：zabbix-server压力较大耗时较久，且压力大<span class="token comment">#自动注册</span>zabbix agent2主动上报自己的信息，发给zabbix-server缺点agent2可能找不到server（配置文件写错，网络不通）<span class="token comment">#被动模式，主动模式区别（站在agent2立场）</span><span class="token comment">#被动模式，对于agent2来说，就是server来找agent2拿数据</span><span class="token comment">#主动模式，agent2主动把信息发给server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#配置hosts解析</span><span class="token function">vim</span> /etc/hosts<span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.100.50 centos7<span class="token number">192.168</span>.100.51 zbx-agent01<span class="token comment">#自动发现配置</span><span class="token comment">#自动注册</span><span class="token number">1</span>准备机器serveragent2<span class="token number">2</span>修改agent2 的配置文件<span class="token punctuation">[</span>root@zbx-agent01 zabbix_agent2.d<span class="token punctuation">]</span><span class="token comment"># grep -Ev '^#|^$' /etc/zabbix/zabbix_agent2.conf</span><span class="token assign-left variable">PidFile</span><span class="token operator">=</span>/var/run/zabbix/zabbix_agent2.pid<span class="token assign-left variable">LogFile</span><span class="token operator">=</span>/var/log/zabbix/zabbix_agent2.log<span class="token assign-left variable">LogFileSize</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">Server</span><span class="token operator">=</span><span class="token number">192.168</span>.100.50 <span class="token comment">#写入服务端配置</span><span class="token assign-left variable">ServerActive</span><span class="token operator">=</span><span class="token number">192.168</span>.100.50<span class="token comment">#写入服务端地址</span><span class="token assign-left variable">Hostname</span><span class="token operator">=</span>zbx-agent01<span class="token comment">#agent2主机名</span><span class="token assign-left variable">Include</span><span class="token operator">=</span>/etc/zabbix/zabbix_agent2.d/*.conf<span class="token assign-left variable">ControlSocket</span><span class="token operator">=</span>/tmp/agent.sock<span class="token number">3</span>创建动作自动注册<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/image-20210819193340879.png" alt="image-20210819193340879"></p><h3 id="分布式监控——负载均衡"><a href="#分布式监控——负载均衡" class="headerlink" title="分布式监控——负载均衡"></a>分布式监控——负载均衡</h3><blockquote><p>分布式监控作用</p><ul><li>分担server的集中式压力<ul><li>Agent &gt; proxy &gt; server</li></ul></li><li>多机房之间的网络延迟问题<ul><li>上海机房 &gt; proxy &gt; server</li></ul></li></ul></blockquote><h4 id="部署分布式监控"><a href="#部署分布式监控" class="headerlink" title="部署分布式监控"></a>部署分布式监控</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">``<span class="token variable"><span class="token variable">`</span><span class="token comment">### SNMP监控</span>简单网络管理协议<span class="token variable">`</span></span>``shell服务端安装snmp监控程序yum <span class="token function">install</span> -y net-snmp net-snmp-utils开启snmp的配置<span class="token function">sed</span> -i.ori <span class="token string">'57a view systemview   included  .1'</span> /etc/snmp/snmp.confsystemctl start snmpd.service使用snmp命令 -v 指定协议版本   -c  指定暗号   sysname snmp的key snmpwalk -v 2c  -c  public <span class="token number">127.9</span>.9.1 sysname <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主从数据库</title>
      <link href="/2021/08/18/zhu-cong-shu-ju-ku/"/>
      <url>/2021/08/18/zhu-cong-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="主从数据库"><a href="#主从数据库" class="headerlink" title="主从数据库"></a>主从数据库</h1><p>主数据库： </p><p>1、ip地址配置、主机名修改、主机映射； </p><p>2、防护墙和SeLinux关闭； </p><p>3、yum源配置（本地yum源）； </p><p>4、vsftpd安装和配置，运行 </p><p>5、安装软件包mariadb、mariadb-server； </p><p>6、启动mariadb； </p><p>7、执行MySQL配置（mysql_secure_installation）; </p><p>8、修改配置文件/etc/my.cnf log_bin=mysql-bin binlog_ignore_db=mysql server_id=10 </p><p>9、重启mariadb； </p><p>10、登录mysql数据（mysql -uroot -p000000） </p><p>grant all privileges on <em>.</em> to ‘root‘@’%’ identified by ‘000000’; </p><p>grant replication slave on <em>.</em> to ‘gyj‘@’xserver2’ identified by ‘000000’;</p><h2 id="11、验证"><a href="#11、验证" class="headerlink" title="11、验证"></a>11、验证</h2><p>从数据库： </p><p>1、ip地址配置、主机名修改、主机映射； </p><p>2、防护墙和SeLinux关闭； </p><p>3、yum源配置（ftp的yum源）； </p><p>4、安装软件包mariadb、mariadb-server； 启动mariadb； </p><p>5、执行MySQL配置（mysql_secure_installation）; </p><p>6、修改配置文件/etc/my.cnf log_bin=mysql-bin binlog_ignore_db=mysql server_id=20 </p><p>7、重启mariadb； </p><p>8、登录mysql数据（mysql -uroot -p000000）</p><p> change master to master_host=’xserver1’,master_user=’gyj’,master_password=’000000’; start slave; </p><p>show slave status \G </p><p>9、验证</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenStack</title>
      <link href="/2021/08/18/openstack/"/>
      <url>/2021/08/18/openstack/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h1><h1 id="一、keystone"><a href="#一、keystone" class="headerlink" title="一、keystone"></a>一、keystone</h1><h2 id="1、创建对象"><a href="#1、创建对象" class="headerlink" title="1、创建对象"></a>1、创建对象</h2><p>创建用户：openstack user create –domain domainname –password password <user-name></user-name></p><p>域创建：openstack domain create testDomain</p><p>项目创建：openstack project create –domain domainname <project-name></project-name></p><p>角色创建：openstack role create <role-name></role-name></p><p>绑定用户和项目权限：openstack role add –user username –project projectname <role-name></role-name></p><p>端点创建：openstack endpoint create network/volume/image/compute –region RegionOne public/internal/admin <a href="http://x.x.x.x:0/">http://X.X.X.X:0000/</a>…</p><h2 id="2、查询"><a href="#2、查询" class="headerlink" title="2、查询"></a>2、查询</h2><p>openstack user/project/domain/role/catalog/endpoint list</p><p>openstack user/project/domain/role/catalog/endpoint show <name>/<id></id></name></p><h2 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h2><p>openstack user/project/domain/role/catalog/endpoint delete <name>/<id></id></name></p><h2 id="4、设置-更新"><a href="#4、设置-更新" class="headerlink" title="4、设置/更新"></a>4、设置/更新</h2><p>openstack user/project/domain/role/endpoint set</p><h1 id="二、glance"><a href="#二、glance" class="headerlink" title="二、glance"></a>二、glance</h1><p>镜像上传：glance image-create –name <image-name> –disk-format qcow2 –container-format bare –progress &lt; /root/cirros-3.1-.img</image-name></p><p>镜像查看：glance image-list</p><p>​                   glance image-show <image-id></image-id></p><p>镜像修改：glance image-update –min-disk=1 <image-id></image-id></p><p>镜像删除：glance image-delete <image-id></image-id></p><h1 id="三、nova"><a href="#三、nova" class="headerlink" title="三、nova"></a>三、nova</h1><p>安全组：secgroup</p><p>云主机类型：flavor</p><p>1、安全组管理</p><p>nova secgroup-create test ‘test the nova command about the rules’</p><p>2、云主机类型管理</p><p>nova flavor-create test 6 2048 20 2      #id    内存（MB）   硬盘（GB）   VCPU个数</p><p>3、实例管理</p><p>nova boot</p><p>nova delete</p><h1 id="四、neutron"><a href="#四、neutron" class="headerlink" title="四、neutron"></a>四、neutron</h1><p>查询网络服务列表：neutron agent-list -c id -c host -c binary</p><p>查询网络列表：neutron net-list</p><h1 id="五、cinder【块存储，Block-Storage】"><a href="#五、cinder【块存储，Block-Storage】" class="headerlink" title="五、cinder【块存储，Block Storage】"></a>五、cinder【块存储，Block Storage】</h1><p>创建云硬盘(大小单位为GB)：cinder create –name <cinder-name> –volume-type <type-name> <size-num></size-num></type-name></cinder-name></p><p>创建云硬盘类型：cinder type-create <type-name></type-name></p><p>删除云硬盘：cinder delete <id>/<name></name></id></p><h1 id="六、swift【对象存储，Object-Storage】"><a href="#六、swift【对象存储，Object-Storage】" class="headerlink" title="六、swift【对象存储，Object Storage】"></a>六、swift【对象存储，Object Storage】</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>对象存储，不能像传统文件系统那样进行挂载和访问，只能通过Rest API接口来访问数据。</p><p>对象存储的存储类型大多为图片、邮件、视频和存储备份等永久性的静态资源【非结构化】。</p><p>Swift三个基本概念：</p><p>·Account：账户，使用swift系统，每个用户都必须有一个账号。</p><p>·Container：容器，类似于windows中的文件夹或unix系统中的目录，</p><p>·Object：对象，swift中的基本存储单元。一个对象包含两部分：数据、元数据（包含容器名称、对象本身名称、用户添加的自定义数据属性，这些属性必须是key-value格式）。元数据不能超过90个key-value属性，并且这些属性的总大小不能超过4KB。</p><p>用户上传的对象最大是5GB（用户可通过swift内建的大对象支持技术获取超过5GB的大对象），最小0bytes。</p><p>上述三个概念之间的关系：</p><p>​        一个Account可以创建任意多个Container，一个Container中可以包含任意多个Object。</p><p>一个很重要的概念：环，Ring</p><p>​       Ring是Swift中最重要的组件，用于记录存储对象与物理位置间的映射关系。在设涉及Account、Container和Object信息时，就需要查询集群的Ring信息。Ring使用Zone、Device、Partition和Replica来维护这些映射信息。</p><h2 id="2、优势"><a href="#2、优势" class="headerlink" title="2、优势"></a>2、优势</h2><p>（1）数据访问的灵活性：通过Rest API实现文件的存储和管理。数据放于容器之内，我们可以创建公有的容器和私有的容器。swift对所需的硬件没有刻意要求，可充分利用商用硬件来节约单位存储成本。</p><p>（2）高数据持久性：swift提供多重备份机制，拥有极高的数据可靠性。swift在5个zone、5×10个存储节点、数据复制3份，数据持久性的SLA能够达到10个9，即存储1万个文件到swift中，经过10万年后，可能会丢失一个文件。</p><p>（3）极高的可扩展性：swift通过独立节点来形成存储系统。很那达到性能上瓶颈。</p><p>（4）无单点故障：由于swift节点独立的特点，实际工作时不会发生传统存储系统的单点故障。</p><h2 id="3、架构"><a href="#3、架构" class="headerlink" title="3、架构"></a>3、架构</h2><h3 id="（1）节点类型"><a href="#（1）节点类型" class="headerlink" title="（1）节点类型"></a>（1）节点类型</h3><p>认证节点：主要负责对用户的请求授权【认证服务使用keystone】。</p><p>代理节点：主要用于和用户交互，接受用户的请求并给用户做出响应。</p><p>存储节点：存储数据。</p><h3 id="（2）服务类型"><a href="#（2）服务类型" class="headerlink" title="（2）服务类型"></a>（2）服务类型</h3><p>代理服务：对外提供对象服务API，会根据环的信息来查找服务地址并转发用户请求至相应的账户、容器或对象服务。</p><p>认证服务：验证访问用户的身份信息，获得一个对象访问令牌（Token），在一定时间内一直有效，会将令牌进行缓存。</p><p>缓存服务：缓存的内容包括对象服务令牌、账户和容器的存在信息【注意：不会缓存对象本身的数据】。缓存服务一般使用memcached。</p><p>账户服务：提供账户元数据和统计信息，并维护所含容器列表的服务。每个账户的信息被存储在一个SQLite数据中。</p><p>容器服务：提供容器元数据和统计信息，并维护所含对象列表的服务，每个容器的信息被存储在一个SQLite数据中。</p><p>对象服务：提供对象元数据和统计信息，每个对象的内容会以文件的形式存储在文件系统中，元数据会作为文件属性来存储，建议采用支持扩展属性的xfs文件系统。</p><p>复制服务：检测本地分区副本和远程副本是否一致（通过对比散列文件和高级水印来完成），发现不一致时会采用推式（push）更新远程副本。</p><p>更新服务：当对象由于高负载的原因无法立即更新，任务将会被序列化到本地文件系统进行排队，以便服务恢复后进行异步更新。</p><p>审计服务：检查对象、容器和账户的完整性，如果发现比特级错误，文件将被隔离，并复制其他的副本以覆盖本地损坏的副本；其他类型的错误会被记录到日志中。</p><p>账户清理服务：移除被标记为删除的账户，删除其所包含的所有容器和对象。</p><p>Zone：区域，同一个Partition的Replica（副本）不能同时放在同一个node（节点）上或同一个Zone内。防止所有的node都在一个机架或一个机房中，一旦发生断点、网络故障等，造成用户无法访问的情况。</p>]]></content>
      
      
      <categories>
          
          <category> OpenStack </category>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LNMP搭建</title>
      <link href="/2021/08/18/lnmp-da-jian/"/>
      <url>/2021/08/18/lnmp-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="lnmp搭建"><a href="#lnmp搭建" class="headerlink" title="lnmp搭建"></a>lnmp搭建</h1><h2 id="一、Linux安装"><a href="#一、Linux安装" class="headerlink" title="一、Linux安装"></a>一、Linux安装</h2><p>略</p><h2 id="二、nginx安装"><a href="#二、nginx安装" class="headerlink" title="二、nginx安装"></a>二、nginx安装</h2><h2 id="1、yum源配置【注意：清空系统-etc-yum-repos-d目录下的文件】"><a href="#1、yum源配置【注意：清空系统-etc-yum-repos-d目录下的文件】" class="headerlink" title="1、yum源配置【注意：清空系统/etc/yum.repos.d目录下的文件】"></a>1、yum源配置【注意：清空系统/etc/yum.repos.d目录下的文件】</h2><h3 id="（1）创建仓库目录"><a href="#（1）创建仓库目录" class="headerlink" title="（1）创建仓库目录"></a>（1）创建仓库目录</h3><p>mkdir -p /opt/centos /opt/lnmp</p><h3 id="（2）准备仓库文件"><a href="#（2）准备仓库文件" class="headerlink" title="（2）准备仓库文件"></a>（2）准备仓库文件</h3><p>mount CentOS-7-x86_64-DVD-1511.iso /opt/centos cp -rf /root/lnmp/* /opt/lnmp</p><h3 id="（3）配置yum源文件"><a href="#（3）配置yum源文件" class="headerlink" title="（3）配置yum源文件"></a>（3）配置yum源文件</h3><p>vi /etc/yum.repos.d/local.repo [centos] name=centos7 baseurl=file:///opt/centos gpgcheck=0 enabled=1 [lnmp] name=lnmp baseurl=file:///opt/lnmp gpgcheck=0 enabled=1</p><h3 id="（4）验证"><a href="#（4）验证" class="headerlink" title="（4）验证"></a>（4）验证</h3><p>yum clean all yum repolist</p><h2 id="2、软件包安装"><a href="#2、软件包安装" class="headerlink" title="2、软件包安装"></a>2、软件包安装</h2><p>yum install -y nginx yum install -y net-tools netstat -ntpl</p><h2 id="三、mysql安装"><a href="#三、mysql安装" class="headerlink" title="三、mysql安装"></a>三、mysql安装</h2><p>yum install -y mariadb mariadb-server</p><p>systemctl start mariadb</p><p>mysql_secure_installation</p><p>—–主从实验时的配置—–</p><p>vi /etc/my.cnf</p><p>log_bin=mysql-bin</p><p>binlog_ignore_db=mysql</p><p>server_id=15</p><p>systemctl restart mariadb</p><p>—-验证—-</p><p>mysql -uroot -p000000</p><p>授权命令：grant all privileges on <em>.</em> to ‘username‘@’%’ identified by ‘password’;</p><p>主从授权：grant replication slave on <em>.</em> to ‘username‘@’%’ identified by ‘password’;</p><h2 id="四、php"><a href="#四、php" class="headerlink" title="四、php"></a>四、php</h2><h2 id="1、安装软件包"><a href="#1、安装软件包" class="headerlink" title="1、安装软件包"></a>1、安装软件包</h2><p>yum install -y php php-fpm php-mysql</p><p>systemctl start php-fpm</p><h2 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h2><p>vi /etc/php-fpm.conf【主配置文件】</p><p>vi /etc/php-fpm.d/*.conf</p><h3 id="3、配置nginx支持php"><a href="#3、配置nginx支持php" class="headerlink" title="3、配置nginx支持php"></a>3、配置nginx支持php</h3><p>vi /etc/nginx/conf.d/default.conf</p><p>去掉location ~ .php$ { …}前的#号，使其生效</p><p>修改如下：</p><p>location ~ .php$ {        root           /www;   #修改为自己的网站根目录        fastcgi_pass   127.0.0.1:9000;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;  #修改        include        fastcgi_params;    }</p><p>systemctl restart nginx</p><h2 id="五、wordpress部署"><a href="#五、wordpress部署" class="headerlink" title="五、wordpress部署"></a>五、wordpress部署</h2><p>1、解压文件</p><p>yum install -y unzip</p><p>unzip wordpress-4.7.3-zh_CN.zip</p><p>cp -rf /root/wordpress/* /www</p><p>2、网站设置</p><p>cp /www/wp-config-sample.php wp-config.php</p><p>vi wp-config.php</p><p>/** WordPress数据库的名称 */ define(‘DB_NAME’, ‘wordpress’);</p><p>/** MySQL数据库用户名 */ define(‘DB_USER’, ‘root’);</p><p>/** MySQL数据库密码 */ define(‘DB_PASSWORD’, ‘000000’);</p><p>3、数据库的创建</p><p>mysql -uroot -p000000</p><p>create database wordpress;</p><p>4、网站安装配置</p><p>访问<a href="http://192.168.100.10/">http://192.168.100.10</a></p><p>需要指定</p><p>网站的名称：张三的BLOG</p><p>网站的密码：</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker简介</title>
      <link href="/2021/08/18/docker-jian-jie/"/>
      <url>/2021/08/18/docker-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="一、容器"><a href="#一、容器" class="headerlink" title="一、容器"></a>一、容器</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><p>PaaS指平台即服务（Platform as a Service）,容器就提供了这种平台服务。它将软件打包成标准单元，用于开发、交付或部署。通常所说的容器都是Linux容器（Linux Container，LXC）。目前，很多容器云平台是通过Docker及Kubernetes（K8S）等技术提供应用运行平台，从而实现运维自动化、快速部署应用、弹性伸缩、动态调整应用环境资源，进而提高研发运营效率。</p><h2 id="2、Docker容器"><a href="#2、Docker容器" class="headerlink" title="2、Docker容器"></a>2、Docker容器</h2><p>是一种轻量级、可移植、自包含的软件打包技术。它可以使应用程序几乎可以运行在任何地方以相同的方式运行。</p><p>容器的本质是一种基于操作系统能力的隔离技术，是一组收到资源限制且彼此间相互隔离的进程。</p><p>运行这些进程所需的所有文件都由另一个镜像提供。</p><p>容器最大的优势是轻量化。</p><p>容器本身没有操作系统，直接共享宿主机的内核。</p><h2 id="3、K8S"><a href="#3、K8S" class="headerlink" title="3、K8S"></a>3、K8S</h2><p>是谷歌公司开源的容器集群管理系统，用于管理云平台中多个主机的容器化的应用。可实现容器集群的自动化部署和自动化扩缩容、维护等功能。</p><h2 id="4、Swarm"><a href="#4、Swarm" class="headerlink" title="4、Swarm"></a>4、Swarm</h2><p>是Docker公司自带的容器管理工具，和K8S重合，是竞争关系。Docker Swarm应用越来越小。</p><h1 id="二、Docker容器"><a href="#二、Docker容器" class="headerlink" title="二、Docker容器"></a>二、Docker容器</h1><h2 id="1、与传统虚拟化技术的区别"><a href="#1、与传统虚拟化技术的区别" class="headerlink" title="1、与传统虚拟化技术的区别"></a>1、与传统虚拟化技术的区别</h2><p><strong>传统虚拟化技术：</strong>虚拟硬件后，在其上运行完整操作系统。</p><p><strong>容器：</strong>共享同一操作系统的内核，将应用基础与系统其它部分隔离开。</p><p>主要区别在于虚拟化层的位置和操作系统资源的使用方式。</p><h2 id="2、Docker简介"><a href="#2、Docker简介" class="headerlink" title="2、Docker简介"></a>2、Docker简介</h2><p>一个开源的应用容器引擎，由DotCloud公司编写（在2013年年底更名为Docker），主要项目代码在GitHub进行维护，至今已经超过3万6千个Star（标星），和一万多个Fork（分支）。Docker最初是在Ubuntu12.04上开发实现的。Red Hat从RHEL6.5开始对Docker进行支持。谷歌公司也在其PaaS产品中广泛应用Docker。</p><h2 id="3、Docker实现原理"><a href="#3、Docker实现原理" class="headerlink" title="3、Docker实现原理"></a>3、Docker实现原理</h2><p>开发语言：Go语言</p><p>基于三大技术：Cgroups、Namespace、AUFS，对进程进行封装隔离，属于操作系统层面的虚拟化技术。</p><p>最初实现是基于LXC，从Docker0.7以后开始去除LXC，转而使用自行开发的Libcontainer，从Docker1.11开始，进一步演进为RunC和Containerd。（LXC→Libcontainer→RunC、Containerd）。</p><h3 id="（1）Cgroups【资源限制】"><a href="#（1）Cgroups【资源限制】" class="headerlink" title="（1）Cgroups【资源限制】"></a>（1）Cgroups【资源限制】</h3><p>Control Groups，控制组，其作用是在Linux中限制某个或某些进程的分配资源。</p><p>在group中，有分配好的CPU时间、IO时间、可用内存大小等。Groups是将任意进程进行分组化管理的Linux内核功能。</p><p>Cgroups中，一个重要概念是“子系统”，也就是资源控制器，每个子系统就是一个资源的分配器。</p><p>Cgroups中，默认有诸多资源组，可以限制几乎所有服务器上的资源，如CPU MEM Iops、Iobandwide、Net、Device Access等。</p><h3 id="（2）Namespace【资源隔离】"><a href="#（2）Namespace【资源隔离】" class="headerlink" title="（2）Namespace【资源隔离】"></a>（2）Namespace【资源隔离】</h3><p>一种资源隔离技术。</p><p>隔离对象：进程树、网络接口、挂载点、进程间通信（IPC）等</p><p>Linux主要有7种不同的命名空间：</p><p>​    CLONE_NEWGRROUP  新控制组</p><p>​        CLONE_NEWIPC            新进程间通信</p><p>​        CLONE_NEWNET           新网络</p><p>​        CLONE_NEWPID            新进程</p><p>​        CLONE_NEWNS             新命名空间</p><p>​        CLONE_NEWUSER         新用户</p><p>​        CLONE_NEWUTS           新通用分时系统</p><h3 id="（3）AUFS"><a href="#（3）AUFS" class="headerlink" title="（3）AUFS"></a>（3）AUFS</h3><p>Another Union File System，是一个能透明覆盖一个或多个现有文件系统的层状文件系统，支持将不同目录挂载到同一个虚拟文件系统下的文件系统，可以把不同的目录联合在一起，组成一个单一的目录。</p><p>这是一种虚拟的文件系统，不用格式化，直接挂载即可。</p><p>Docker使用AUFS作为容器的文件系统。当一个进程需要修改一个文件时，AUFS创建该文件的一个副本。</p><p>使用AUFS可以是Docker具有容器镜像复制能力。</p><p>基于Linux的Namespace、Cgroups、AUFS这三大技术支撑了目前Docker的实现，也是Docker能够出现的最重要的原因。</p><p>AUFS不支持红帽Linux</p><p>Docker公司与红帽公司合作开发了基于DeviceMapper技术的后端存储。</p><p>devicemapper  Linux中指基于块设备存储而非文件系统存储。</p><h2 id="4、Docker优势"><a href="#4、Docker优势" class="headerlink" title="4、Docker优势"></a>4、Docker优势</h2><h3 id="（1）更高效的利用系统资源"><a href="#（1）更高效的利用系统资源" class="headerlink" title="（1）更高效的利用系统资源"></a>（1）更高效的利用系统资源</h3><p>Docker对系统资源的利用率很高，一台主机上可以同时运行数千个Docker容器。容器除了运行其中应用外，基本不消耗额外的系统资源，使得应用的性能很高，同时系统的开销尽量小。</p><h3 id="（2）更快速的交付和部署"><a href="#（2）更快速的交付和部署" class="headerlink" title="（2）更快速的交付和部署"></a>（2）更快速的交付和部署</h3><p>Docker在整个开发周期中可以辅导实现快速交付，并允许开发者在装有应用和服务的本地容器做开发，可以直接集成到可持续开发流程之中。</p><h3 id="（3）更高效的部署和扩容"><a href="#（3）更高效的部署和扩容" class="headerlink" title="（3）更高效的部署和扩容"></a>（3）更高效的部署和扩容</h3><p>Docker容器几乎可以运行在任意平台上，包括物理机、虚拟机、公有云、私有云等，方便迁移。</p><p>Docker的兼容性和轻量特性可以很轻松的实现负载动态管理，可以快速扩容或方便下线应用和服务。</p><h3 id="（4）更简单的管理"><a href="#（4）更简单的管理" class="headerlink" title="（4）更简单的管理"></a>（4）更简单的管理</h3><p>使用Docker，通常只需要小小的改动就可以替代以往大量的更新工作。所有的修改都是以增量的方式被分发和更新，从而实现自动化且高效的管理。</p><h2 id="5、Docker架构"><a href="#5、Docker架构" class="headerlink" title="5、Docker架构"></a>5、Docker架构</h2><p>采用C/S架构：使用远程API管理和创建Docker容器，Docker客户端只需向Docker服务器或守护进程发出请求，服务器或守护进程将完成所有的工作并返回结果。</p><p>完整Docker服务包含的组件：Docker Daemon服务器、Docker客户端、Docker镜像、Docker仓库、Docker容器。</p><h3 id="（1）Docker客户端：Docker构建、Docker拉取、Docker启动"><a href="#（1）Docker客户端：Docker构建、Docker拉取、Docker启动" class="headerlink" title="（1）Docker客户端：Docker构建、Docker拉取、Docker启动"></a>（1）Docker客户端：Docker构建、Docker拉取、Docker启动</h3><h3 id="（2）Docker-Daemon：守护进程"><a href="#（2）Docker-Daemon：守护进程" class="headerlink" title="（2）Docker Daemon：守护进程"></a>（2）Docker Daemon：守护进程</h3><h3 id="（3）Docker镜像："><a href="#（3）Docker镜像：" class="headerlink" title="（3）Docker镜像："></a>（3）Docker镜像：</h3><p>镜像是一个只读模板，用于创建Docker容器。镜像由Dockerfile文件描述镜像的内容。</p><p>​                                  构建一个镜像实际就是安装、配置和运行的过程。Docker镜像基于AUFS中的UnionFS把以上       过程进行分层（Layer）存储，这样更新镜像可以只更新变化的层。</p><p>Docker镜像生成方法：a、从无到有开始创建镜像</p><p>​                                        b、下载并使用别人创建好的现成镜像</p><p>​                                        c、在现有镜像上创建新镜像</p><p>构建自定义镜像有两种方式：Docker commit、Dockerfile</p><p>Docker Commit：在以往版本控制系统里提交变更</p><p>Dockerfile：由一系列命令和参数构成的脚本，这些命令基于基础镜像并最终创建一个新的镜像。</p><h3 id="（4）Docker容器："><a href="#（4）Docker容器：" class="headerlink" title="（4）Docker容器："></a>（4）Docker容器：</h3><p>镜像的运行实例，可被启动、开始、停止、删除。容器是相互隔离的。</p><p>容器由应用程序本身和依赖两部分组成。</p><p>容器在宿主机操作系统的用户空间中运行，与操作系统的其它进程隔离（这显著区别于虚拟机）。</p><h3 id="（5）Docker仓库"><a href="#（5）Docker仓库" class="headerlink" title="（5）Docker仓库"></a>（5）Docker仓库</h3><p>镜像文件集中存放的场所。</p><p>Docker仓库本身也是一个容器，这个容器中往往放着多个仓库。每个仓库可以包含多个镜像，每个镜像有不同的标签（Tag）。</p><p>公有仓库：Docker Hub是Docker公司提供的互联网公共镜像仓库。</p><p>私有仓库：生产环境中，往往需要一个私有的镜像仓库来管理镜像。</p><p>Registry就是一个管理镜像私有仓库的开源软件。（Registry旧版本用Python编写，新版本用go编写）。</p><h2 id="6、Docker版本"><a href="#6、Docker版本" class="headerlink" title="6、Docker版本"></a>6、Docker版本</h2><p>docker-ce：社区版</p><p>docker-ee：商业版</p><h2 id="7、Docker部署"><a href="#7、Docker部署" class="headerlink" title="7、Docker部署"></a>7、Docker部署</h2><p>两个节点：xserver1   xserver2</p><h3 id="（1）准备【连个节点】"><a href="#（1）准备【连个节点】" class="headerlink" title="（1）准备【连个节点】"></a>（1）准备【连个节点】</h3><p>网络配置</p><p>主机名称修改</p><p>主机映射</p><p>关闭防火墙和SeLinux（disabled）</p><p>yum源配置</p><h3 id="（2）内核升级【连个节点】"><a href="#（2）内核升级【连个节点】" class="headerlink" title="（2）内核升级【连个节点】"></a>（2）内核升级【连个节点】</h3><p>yum upgrade -y</p><p>reboot</p><p>【<strong>注意</strong>】删除升级过程中自动添加的CentOS-*仓库文件（.repo）</p><h3 id="（3）开启路由转发【两个节点】"><a href="#（3）开启路由转发【两个节点】" class="headerlink" title="（3）开启路由转发【两个节点】"></a>（3）开启路由转发【两个节点】</h3><p>vi /etc/sysctl.conf</p><p>​    net.ipv4.ip_forward=1</p><p>​    net.bridge.bridge-nf-call-ip6tables=1</p><p>​    net.bridge.bridge-nf-call-iptalbes=1</p><p>modprobe net-filter</p><p>sysctl -p</p><h3 id="（4）Docker引擎安装"><a href="#（4）Docker引擎安装" class="headerlink" title="（4）Docker引擎安装"></a>（4）Docker引擎安装</h3><p><strong>【xserver1】</strong></p><p>yum install -y yum-utils device-mapper-persistent-data</p><p><strong>【两个节点】</strong></p><p>yum install -y docker-ce docker-ce-cli containerd.io</p><p>systemctl daemon-reload</p><p>systemctl restart docker &amp;&amp; systemctl enable docker</p><p>验证：docker info</p><h3 id="（5）部署仓库（Registry）【xserver1】"><a href="#（5）部署仓库（Registry）【xserver1】" class="headerlink" title="（5）部署仓库（Registry）【xserver1】"></a>（5）部署仓库（Registry）【xserver1】</h3><p>~/image.sh</p><p>装载镜像：docker load -i images/registry_latest.tar</p><p>查看镜像：docker images</p><p>运行容器：docker run -d -v /opt/registry:/var/lib/registry -p 5000:5000 –restart=always –name registry registry:latest</p><p>查看运行的容器：docker ps</p><h3 id="（6）上传镜像【xserver1】"><a href="#（6）上传镜像【xserver1】" class="headerlink" title="（6）上传镜像【xserver1】"></a>（6）上传镜像【xserver1】</h3><p>修改配置文件</p><p>vi /etc/docker/daemo.json</p><p>​    {“insecure-registries”:[“192.168.100.10:5000”]}</p><p>systemclt restart docker</p><p>打标签：docker tag centos:latest 192.168.100.10:5000/centos:latest</p><p>推镜像：docker push 192.168.100.10:5000/centos:latest</p><p>验证：curl -L <a href="http://192.168.100.10:5000/v2/_catalog">http://192.168.100.10:5000/v2/_catalog</a></p><h3 id="（7）拉取镜像【xserver2】"><a href="#（7）拉取镜像【xserver2】" class="headerlink" title="（7）拉取镜像【xserver2】"></a>（7）拉取镜像【xserver2】</h3><p>docker pull 192.168.100.10:5000/centos:latest</p><p>docker images</p><h2 id="8、docker运维命令"><a href="#8、docker运维命令" class="headerlink" title="8、docker运维命令"></a>8、docker运维命令</h2><h3 id="（1）镜像"><a href="#（1）镜像" class="headerlink" title="（1）镜像"></a>（1）镜像</h3><p>查看镜像列表：docker images</p><p>获取镜像：docker pull -a –disable-content-trust name:tag</p><p><strong>-a：</strong>拉取所有tagged镜像</p><p><strong>–disable-content-trust：</strong>忽略镜像校验（默认开启校验）</p><p>查找镜像：docker search –automated –no-trunc –filter=10 java</p><p><strong>–automated：</strong>只列出automated build类型镜像</p><p><strong>–no-trunc：</strong>显示完整镜像描述</p><p><strong>–filter=star：</strong>列出收藏数不少于指定值得镜像</p><p>删除镜像：docker rmi -f –no-prune busybox:latest</p><p><strong>-f：</strong>强制删除</p><p>-<strong>-no-prune：</strong>不移除该镜像的过程镜像（默认移除过程镜像）</p><p>导入导出镜像：</p><p>导出：docker export containerID &gt; image-name【tar类型】</p><p>导入：docker import - nginx:latest</p><h3 id="（2）容器命令"><a href="#（2）容器命令" class="headerlink" title="（2）容器命令"></a>（2）容器命令</h3><p>列出容器列表：docker ps -a</p><p>​                           docker container ls -a</p><p><strong>-a：</strong>显示所有容器（包括终止状态）</p><p>查看容器信息：docker stats containerID/containerNAME【动态信息：资源使用情况】</p><p>​                           docker inspect containerID/containerNAME【静态信息】</p><p>查看容器日志信息：docker logs containerID/containerNAME</p><p>运行容器：docker run -i -t -d –rm -p 80:80 –name nginx nginx:latest</p><p><strong>-i：</strong>交互式操作</p><p><strong>-t：</strong>终端</p><p><strong>-d：</strong>后台运行，并返回容器ID</p><p><strong>–rm：</strong>容器退出后随之删除，可避免空间浪费</p><p><strong>-p 主机端口/本地端口:容器端口：</strong>端口映射</p><p><strong>-v 挂载目录:容器目录/镜像保存目录：</strong>目录对应</p><p><strong>–name image-name：</strong>镜像名称</p><p>进入容器：docker exec -it containerID bash【使用exit或Ctrl+C退出】</p><p>启动容器：docker start containerID</p><p>启动所有容器：docker start $(docker ps -aq)</p><p>关闭容器：docker stop containerID</p><p>批量关闭：docker stop $(docker ps -aq)</p><p>删除容器【容器必须先终止或关闭】：docker rm containerID</p><p>docker rm -f containerID【强制删除正在运行中容器】</p><p>删除所有终止状态的容器：docker container prune</p><p>批量删除：docker rm $(docker ps -aq)</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2021/08/15/git/"/>
      <url>/2021/08/15/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="一、SVN版本控制"><a href="#一、SVN版本控制" class="headerlink" title="一、SVN版本控制"></a>一、SVN版本控制</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器上的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的工作推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><h2 id="二、Git版本控制"><a href="#二、Git版本控制" class="headerlink" title="二、Git版本控制"></a>二、Git版本控制</h2><p>Git是分布式版本控制系统。没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候就不需要联网了，因为版本都在自己的电脑上，协同的方法是这样的：比如说自己在电脑上改了文件A。这时，两人只需要把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到了更新了哪些代码和文件。<br>Git是目前世界上最先进的分布式版本控制系统。</p><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5%E8%A1%A8.jpg" alt="git常用命令速查表"></p><h2 id="Git的基本操作"><a href="#Git的基本操作" class="headerlink" title="Git的基本操作"></a>Git的基本操作</h2><ol><li><p><strong>提交，修改</strong></p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git add</td><td>添加文件到仓库</td></tr><tr><td>git status</td><td>查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td>git diff</td><td>比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td>git commit</td><td>提交暂存区到本地仓库。</td></tr><tr><td>git rest</td><td>回退版本。</td></tr><tr><td>git rm</td><td>删除工作区文件。</td></tr><tr><td>git mv</td><td>移动或重命名工作区文件</td></tr></tbody></table></li><li><p>提交日志</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git log</td><td>查看历史提交记录</td></tr><tr><td>git blame<file></file></td><td>以列表形式查看指定文件的历史修改记录</td></tr></tbody></table></li><li><p>远程操作</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git remote</td><td>远程仓库操作</td></tr><tr><td>git fetch</td><td>从远程获取代码库</td></tr><tr><td>git pull</td><td>下载远程代码并合并</td></tr><tr><td>git push</td><td>上传远程代码并合并</td></tr></tbody></table></li><li><p>创建分支</p><pre class="line-numbers language-none"><code class="language-none">git branch (branchname)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换分支命令</p><pre class="line-numbers language-none"><code class="language-none">git checkout (branchname)git checkout -b (branchname)## 创建新分支并立刻切换到该分支下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p></blockquote></li><li><p>合并分支</p><pre class="line-numbers language-none"><code class="language-none">git merge<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p></blockquote></li><li><p>删除分子</p><pre class="line-numbers language-none"><code class="language-none">git branch -d (branchname)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用分支将工作切分开来，从而让我们能够在不同开发环境中做事，并来回切换。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/15/hello-world/"/>
      <url>/2021/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Helloworld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Helloworld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN的使用常见命令</title>
      <link href="/2021/08/15/svn-de-shi-yong-chang-jian-ming-ling/"/>
      <url>/2021/08/15/svn-de-shi-yong-chang-jian-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>SVN的使用常见命令</p><h4 id="常见的选项："><a href="#常见的选项：" class="headerlink" title="常见的选项："></a>常见的选项：</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>mport</td><td>将未版本化的文件纳入版本控制并提交</td></tr><tr><td>checkout</td><td>#从版本库中检出一个修订版</td></tr><tr><td>update</td><td>#更新工作拷贝</td></tr><tr><td>add，delete，copy，move</td><td>#增、删、复制、移动文件或目录</td></tr><tr><td>status</td><td>检查状态差异</td></tr><tr><td>diff</td><td>检查文件行级详细差异</td></tr><tr><td>revert</td><td>恢复</td></tr><tr><td>resolve</td><td>解决冲突</td></tr><tr><td>switch</td><td>切换工作拷贝对应的版本库分支</td></tr><tr><td>log</td><td>查看历史记录</td></tr><tr><td>list</td><td>显示示文件目录</td></tr><tr><td>cat</td><td>查看某个文件内容</td></tr></tbody></table><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><h5 id="1-代码取出"><a href="#1-代码取出" class="headerlink" title="1. 代码取出"></a>1. 代码取出</h5><p>svn checkout svn://192.168.1.17/jgou1/ day03</p><p>代码会取出到day03这个目录里</p><h5 id="2-添加新文件"><a href="#2-添加新文件" class="headerlink" title="2. 添加新文件"></a>2. 添加新文件</h5><p>svn add js.v5<br>svn commit -m “添加v5版本”</p><h5 id="3-删除文件"><a href="#3-删除文件" class="headerlink" title="3. 删除文件"></a>3. 删除文件</h5><p>[root@zmedu-17 day05]# svn delete js.v4<br>D js.v4</p><h5 id="4-查看文件的详细信息"><a href="#4-查看文件的详细信息" class="headerlink" title="4. 查看文件的详细信息"></a>4. 查看文件的详细信息</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@zmedu-17 day05<span class="token punctuation">]</span><span class="token comment"># svn info js.v2</span>路径: js.v2名称: js.v2工作副本根目录: /root/day031/day05URL: svn://192.168.1.17/jgou1/js.v2版本库根: svn://192.168.1.17/jgou1版本库 UUID: 989d2139-49f8-4dd6-9218-489338656310版本: <span class="token number">1</span>节点种类: 文件调度: 正常最后修改的作者: root最后修改的版本: <span class="token number">1</span>最后修改的时间: <span class="token number">2020</span>-08-02 <span class="token number">12</span>:42:03 +0800 <span class="token punctuation">(</span>日, <span class="token number">2020</span>-08-02<span class="token punctuation">)</span>文本最后更新: <span class="token number">2020</span>-08-02 <span class="token number">12</span>:56:20 +0800 <span class="token punctuation">(</span>日, <span class="token number">2020</span>-08-02<span class="token punctuation">)</span>校验和: da39a3ee5e6b4b0d3255bfef95601890afd80709<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bash</p><p>Copy</p><h5 id="5-svn帮助"><a href="#5-svn帮助" class="headerlink" title="5. svn帮助"></a>5. svn帮助</h5><p>svn help</p><h5 id="6-恢复本地修改"><a href="#6-恢复本地修改" class="headerlink" title="6. 恢复本地修改"></a>6. 恢复本地修改</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@zmedu-17 day05<span class="token punctuation">]</span><span class="token comment"># svn revert js.v4</span>已恢复“js.v4”<span class="token punctuation">[</span>root@zmedu-17 day05<span class="token punctuation">]</span><span class="token comment"># ls</span>js.v1  js.v2  js.v4<span class="token punctuation">[</span>root@zmedu-17 day05<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bash</p><p>Copy</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>svn的使用需要在日常的工作中去练习，孰能生巧。 可以使用svn与码云交互，平时写的代码或者文件都可以使用svn传到码云上备份</p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sudo使用</title>
      <link href="/2021/08/15/sudo-shi-yong/"/>
      <url>/2021/08/15/sudo-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="sudo使用"><a href="#sudo使用" class="headerlink" title="sudo使用"></a>sudo使用</h2><p>sudo是系统管理指令；由于root用户权限过大，在实际生产过程中很少使用root用户直接登录系统，而是使用普通用户登录系统；但是如果普通用户要对系统进行日常维护操作时需要su到root用户，为了提高安全性，可以使用sudo授权某一用户在某一主机以某一用户身份运行某些命令；从而减少root用户密码知晓人，提高系统安全性。</p><p>sudo的<strong>优势</strong>：</p><p>①授权指定用户在指定的主机上运行指定的管理命令；</p><p>②详细记录用户基于sudo执行的命令相关的日志信息；</p><p>③”检票系统”:时效性认证，用户第一次执行sudo命令时会要求输入密码来验证用户身份，成功后用户会获得一个有固定存活时长的”==令牌==”（令牌默认存活时长为5分钟）</p><h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><p>sudo 是一种权限管理机制，管理员可以授权于一些普通用户去执行一些 root 执行的操作，而不需要知道 root 的密码。</p><p>sudo 允许一个已授权用户以超级用户或者其它用户的角色运行一个命令。当然，能做什么不能做什么都是通过安全策略来指定的。sudo 支持插件架构的安全策略，并能把输入输出写入日志。第三方可以开发并发布自己的安全策略和输入输出日志插件，并让它们无缝的和 sudo 一起工作。默认的安全策略记录在 /etc/sudoers 文件中。而安全策略可能需要用户通过密码来验证他们自己。也就是在用户执行 sudo 命令时要求用户输入自己账号的密码。如果验证失败，sudo 命令将会退出。</p><p><strong>语法格式：</strong>sudo [参数]</p><p><strong>常用参数：</strong></p><table><thead><tr><th>-v</th><th>因为 sudo 在第一次执行时或是在 N分钟内没有执行（N 预设为五）会问密码，这个参数是重新做一次确认，如果超过N分钟，也会问密码</th></tr></thead><tbody><tr><td>-k</td><td>强迫使用者在下一次执行 sudo 时问密码（不论有没有超过 N 分钟）</td></tr><tr><td>-b</td><td>将要执行的指令放在背景执行</td></tr><tr><td>-p</td><td>prompt 可以更改问密码的提示语，其中 %u 会代换为使用者的帐号名称，%h 会显示主机名称</td></tr><tr><td>-s</td><td>执行环境变数中的SHELL 所指定的shell ，或是 /etc/passwd 里所指定的 shell</td></tr><tr><td>command</td><td>要以系统管理者身份（或以 -u 更改为其他人）执行的指令</td></tr></tbody></table><p><strong>参考实例</strong></p><p>切换到root用户：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxcool ~<span class="token punctuation">]</span><span class="token comment"># sudo su</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定用户执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxcool ~<span class="token punctuation">]</span><span class="token comment"># sudo -u userb ls -l </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以root权限执行上一条命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxcool ~<span class="token punctuation">]</span><span class="token comment"># sudo !!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出目前的权限：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@linuxcool ~<span class="token punctuation">]</span><span class="token comment"># sudo -l </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出 sudo 的版本资讯：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@linuxcool ~<span class="token punctuation">]</span><span class="token comment"># sudo -V</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础</title>
      <link href="/2021/08/15/ji-suan-ji-wang-luo-ji-chu/"/>
      <url>/2021/08/15/ji-suan-ji-wang-luo-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="DNS域名"><a href="#DNS域名" class="headerlink" title="DNS域名"></a>DNS域名</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">DNS域名根域一级域名：Top Level Domain: com, edu, mil, gov, net, org, int,arpa组织域：.com, .org, .net, .mil, .edu, .gov, .info, .cc, .me, .tv国家域：.cn, .us, .uk, .jp, .tw, .hk, .iq, .ir反向域：.in-addr.arpa最多127 级域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/20170506085719_12418.png" alt="网络及TCP三次握手四次挥手"></p><p>1.物理层：</p><p>二进制传输；为启动，维护以及关闭物理链路定义了电气规范，机械规范，过程规范和功能规范</p><p>2.数据链路层：</p><p>访问介质；定义如何格式化数据以便进行传输以及如何控制对网络的访问</p><p>支持错误检测</p><p>3.网络层；数据传输</p><p>路由数据包</p><p>选择传递数据的最佳路径</p><p>支持逻辑寻址和路径选择</p><p>4.传输层；传输问题</p><p>确保数据传输的可靠性</p><p>建立，维护和终止虚拟电路</p><p>通过错误检查和恢复</p><p>信息流控制来保障可靠性</p><p>5.会话层；主机间通信</p><p>建立，管理和终止在应用程序之间的会话</p><p>6.表示层；数据表示</p><p>确保接受系统可以读出该数据</p><p>格式化数据</p><p>构建数据</p><p>协商用于应用层的数据传输语法</p><p>提供加密</p><p>7.应用层；网络进程访问应用层</p><p>为应用程序进程提供网络服务（电子邮件，文件传输和终端仿真）</p><p>提供用户身份验证</p><p><strong>TCP/IP 协议栈和 OSI 模型</strong></p><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/20170506090525_48281.png" alt="网络及TCP三次握手四次挥手"></p><p>1.OSI 模型中物理层，数据链路层，网络层，传输层中的数据传输单位分别是什么？其他三个层的名称是什么？</p><p>  答:物理层单位为比特bit，数据链路层单位为帧，网络层单位为包，传输层单位为段，其他三个层分别是会话层，表示层，应用层。</p><p>  2.简述为什么说 TCP 是可靠连接而 UDP 是不可靠连接？</p><p>  答:TCP是面向连接的协议(三次握手，四次挥手)，全双工，半关闭，将数据打成段，排序，错误检查，确认机制，数据恢复，重传，流量控制，滑动窗口，拥塞控制，慢启动和拥塞避免算法。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户组和权限管理</title>
      <link href="/2021/08/15/linux-yong-hu-zu-he-quan-xian-guan-li/"/>
      <url>/2021/08/15/linux-yong-hu-zu-he-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="linux用户组和权限管理"><a href="#linux用户组和权限管理" class="headerlink" title="linux用户组和权限管理"></a>linux用户组和权限管理</h2><p><strong>用户</strong>分为三类：<br> 1、<strong>超级用户</strong>：root uid=0,简单来说uid为0的用户就是超级用户。<br> 2、<strong>虚拟用户</strong>：存在linux中，满足文件或者程序运行的需要，而创建的。不能登录，不能使用。uid=1-499,1-999(centos7)<br> 3、<strong>普通用户</strong>：管理员root创建的用户。uid=500+，1000+（centos7）</p><p><strong>用户组</strong>就是具有相同特征的用户的集合。一个组可以包含多个用户，每个用户也可以属于不同的组。用户组的目的方便管理员对用户进行集中管理。用户组也分为两类：系统组和普通组。</p><p> <strong>用户和用户组的关系</strong>：<br> 一对一：一个用户存在一个组，也可以是组中唯一成员<br> 一对多：一个用户属于多个组，只有一个主组，其余为附加组<br> 多对一：多个用户存在于一个组<br> 多对多：多个用户可以存在多个组</p><h3 id="用户及用户组配置文件介绍"><a href="#用户及用户组配置文件介绍" class="headerlink" title="用户及用户组配置文件介绍"></a>用户及用户组配置文件介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/image-20210815100918751.png" alt="image-20210815100918751"></p><p><strong>/etc/passwd  用户及其属性信息</strong> </p><p>第一列（以冒号为分隔符）：用户名<br> 第二列：密码位<br> 第三列：UID号  CentOS6 1-499为系统用户，预留<br>                            CentOS7 1-999为系统用户，预留<br> 第四列：GID号  主组和辅助组<br> 第五列：用户全名或注释<br> 第六列：用户的家目录<br> 第七列：用户默认的shell类型</p><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/image-20210815100952908.png" alt="image-20210815100952908"></p><p> <strong>/etc/group  组及其属性信息</strong></p><p>第一列：组名称<br> 第二列：组密码，通常不需要设定<br> 第三列：GID CentOS6 1-499为系统组，预留<br> CentOS7 1-999为系统组，预留<br> 第四列：以该组为附加组的用户列表</p><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/image-20210815101153612.png" alt="image-20210815101153612"></p><p><strong>/etc/shadow  用户密码及其相关属性</strong></p><p> 第一列：用户名<br> 第二列：密码位  $加密方式$salt$password<br>            !!代表账户被锁定<br> 第三列:更改密码时间（天数计算）—距离1970年1月1号时间<br> 第四列：密码最短口令有效期<br> 第五列：口令过期时间，更改口令往后的时间<br> 第六列：口令到期前提前多少天提醒<br> 第七列：口令过期后多少天账户过期<br> 第八列：帐号的有效期</p><p><img src="https://cdn.jsdelivr.net/gh/z3942/images/image-20210815101302149.png" alt="image-20210815101302149"></p><p><strong>/etc/gshadow  组密码及其相关属性</strong></p><p> 第一列：组名<br> 第二列：组密码<br> 第三列：管理员列表，可以更改组密码和成员<br> 第四列：将该组作为辅助组的成员列表</p><blockquote><p> 用户管理命令 </p></blockquote><p> useradd<br> -u uid 创建用户时指定uid<br> -g gid 指明用户所属基本组<br> -c 用户的注释信息<br> -M 不建家目录<br> -s 指定用户的默认shell<br> -e 用户过期时间<br> -G 为用户指明附加组，组须事先存在</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment">#cat /etc/default/useradd </span> <span class="token comment"># useradd defaults file</span> <span class="token assign-left variable">GROUP</span><span class="token operator">=</span><span class="token number">100</span>                         <span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/home <span class="token comment">#把用户的家目录建在/home中          </span> <span class="token assign-left variable">INACTIVE</span><span class="token operator">=</span>-1 <span class="token comment">#是否启用帐号过期停权，-1表示不启用</span> <span class="token assign-left variable">EXPIRE</span><span class="token operator">=</span> <span class="token comment">#帐号终止日期，不设置表示不启用</span> <span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/bash <span class="token comment">#新用户默认所用的shell类型</span> <span class="token assign-left variable">SKEL</span><span class="token operator">=</span>/etc/skel <span class="token comment">#配置新用户家目录的默认存放路径。当我们用useradd添加用户时，</span> 用户家目录下的文件，都是从这里配置的目录中复制过去的。下面会详细解释一下/etc/skel <span class="token assign-left variable">CREATE_MAIL_SPOOL</span><span class="token operator">=</span>yes <span class="token comment">#创建mail文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>组帐号管理命令 </p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">groupadd</span>-g 创建指定gid的组-r 创建系统组 CentOS <span class="token number">6</span>: ID<span class="token operator">&lt;</span><span class="token number">500</span>CentOS <span class="token number">7</span>: ID<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token function">groupmod</span> -n newgrpname oldgrpname  修改组名-g  newgid groupname  修改gid<span class="token function">groupdel</span><span class="token function">groupdel</span> 组名 删除组gpasswd-a user 将user添加至指定组中-d user 从指定组中移除用户user例如： <span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment">#gpasswd -a ma -g zhu</span>Adding user ma to group zhu <span class="token comment">#将用户ma添加到组zhu中</span><span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment">#gpasswd -d ma -g zhu </span>Removing user ma from group zhu <span class="token comment">#将用户ma从组zhu中删除</span>groupmems<span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>action<span class="token punctuation">]</span>options-g 更改为指定组actions-a 指定用户加入组-d 从组中删除用户-p 从组中清除所有成员-l 显示组成员列表 <span class="token function">groups</span> 查看用户所属组列表<span class="token punctuation">[</span>root@centos7 ~<span class="token punctuation">]</span><span class="token comment">#groups ma</span>ma <span class="token builtin class-name">:</span> maroot@centos7 ~<span class="token punctuation">]</span><span class="token comment">#groups zhu</span>zhu <span class="token builtin class-name">:</span> zhu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><h4 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 通过ls -li可查看文件的长格式信息，我们取出一个进行解释</span> <span class="token punctuation">[</span>root@centos7 /<span class="token punctuation">]</span><span class="token comment">#ls -li</span> <span class="token number">64</span> dr-xr-xr-x.  <span class="token number">4</span> root root <span class="token number">4</span>.0K Jul <span class="token number">14</span> <span class="token number">11</span>:33 boot<span class="token comment"># 第1列：inode号</span><span class="token comment"># 第2列：第1个字符代表文件的类型（-是普通文件，d是目录等等）</span><span class="token comment">#第2-10个字符代表文件权限，前三个是用户的权限、中间三个用户组的、后面其他用户的权限</span><span class="token comment">#第11个字符.与SELINUX相关，暂时不做描述</span><span class="token comment"># 第3列：文件的硬连接数</span><span class="token comment"># 第4列：文件对应的属主或者用户</span><span class="token comment"># 第5列：文件对应的属组或者用户组</span><span class="token comment"># 第6列：文件大小</span><span class="token comment"># 第7列：文件最后的修改的时间</span><span class="token comment"># 第8列：文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改文件属主和属组"><a href="#修改文件属主和属组" class="headerlink" title="修改文件属主和属组"></a>修改文件属主和属组</h4><p> chown 修改文件的属主（也可以改组）<br> 用户 文件或者目录   &lt;==仅仅授权用户<br> ：组 文件活目录    &lt;==仅仅授权组<br> 用户：组 文件或目录  &lt;==表示授权用户和组<br> -R 递归<br> –reference=源文件 目标文件<br> 强调：<br> 1）其中的冒号“：”可以用点好“.”代替<br> 2）要授权的用户和组名，必须是linux系统里实际存在的</p><p> chgrp 修改文件的属组（只能改组）<br> —-reference=源文件 目标文件<br> -R 递归 </p><h4 id="文件权限-1"><a href="#文件权限-1" class="headerlink" title="文件权限"></a>文件权限</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">普通文件 r：可以读取文件的内容 w：可以追加或者覆盖文件的内容 x：可以执行改文件，需要和r配合 目录文件 r：可以查看目录下有哪些文件，不能查看文件的详细信息 w：可以在目录中创建和删除文件，需要x配合 x：可以cd进入该目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改文件权限</span> <span class="token function">chmod</span> 方法一：chmod <span class="token assign-left variable">u</span><span class="token operator">=</span>rwx,g<span class="token operator">=</span>rx,o<span class="token operator">=</span>r /app/f1   方法二：chmod <span class="token number">755</span> /app/f1 方法三：chmod –reference<span class="token operator">=</span>f1 f2     <span class="token operator">&lt;=</span><span class="token operator">=</span>将f2的权限修改成f1一样<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令总结</title>
      <link href="/2021/08/15/linux-ming-ling-zong-jie/"/>
      <url>/2021/08/15/linux-ming-ling-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux命令总结"><a href="#Linux命令总结" class="headerlink" title="Linux命令总结"></a>Linux命令总结</h2><h3 id="1、登陆和开关机"><a href="#1、登陆和开关机" class="headerlink" title="1、登陆和开关机"></a>1、登陆和开关机</h3><p>   关机<br>　　<br>　　halt<br>　　<br>　　poweroff<br>　　<br>　　init 0<br>　　<br>　　重启<br>　　<br>　　reboot<br>　　<br>　　init 6<br>　　<br>　　shutdown<br>　　<br>　　shutdown -r 重启<br>　　<br>　　shutodwn -h 关机<br>　　<br>　　shutdown -c 取消计划关机<br>　　<br>　　shutdown +0 马上关机<br>　　<br>　　+1 一分钟后关机<br>　　<br>　　-X X分钟后关机<br>　　<br>　　20:00 今天20：00关机<br>　　<br>　　whoami 显示当前的登录用户名<br>　　<br>　　who am i 显示当前的登录用户名 终端名 登录时间<br>　　<br>　　who 显示当前所有的登录用户名 终端名 登录时间<br>　　<br>　　w 显示当前所有的登录用户名 终端名 登录时间 登录的来源 当前在做什么　　</p><h3 id="2-切换用户与当前工作目录"><a href="#2-切换用户与当前工作目录" class="headerlink" title="2.切换用户与当前工作目录"></a><strong>2.切换用户与当前工作目录</strong></h3><p>　　su – 用户名 切换用户，并切换至用户家目录<br>　　<br>　　su 用户名 非登陆切换用户<br>　　<br>　　cd 相对或者绝对路径 进入目录<br>　　<br>　　-P 如果目标目录是个软链接目录，则直接进入其源始目录<br>　　<br>　　.. 进入上一级目录<br>　　<br>　　cd 进入家目录<br>　　<br>　　cd ~或直接 cd 进入家目录<br>　　<br>　　cd – 进入上一次的工作目录<br>　　<br>　　pwd 获取当前目录路径　　</p><h3 id="3-基本常用命令"><a href="#3-基本常用命令" class="headerlink" title="3.基本常用命令"></a>3.基本常用命令</h3><p>　　date 获取系统时间<br>　　<br>　　date -s “2018-1-20 13:50:11” 设置系统时间<br>　　<br>　　hwclock 或 clock 获取原子时间<br>　　<br>　　-s 将硬时间写入软时间。<br>　　<br>　　-w 将软时间写入硬时间。<br>　　<br>　　cal 获取日历<br>　　<br>　　history 获取命令的历史记录<br>　　<br>　　hostname 获取主机名<br>　　<br>　　中断命令<br>　　<br>　　ctrl+C 强制中断<br>　　<br>　　ctrl+d 正常中断　　</p><h3 id="4-帮助命令文档查询"><a href="#4-帮助命令文档查询" class="headerlink" title="4.帮助命令文档查询"></a>4.帮助命令文档查询</h3><hr><p>　　type 用来判断命令的类型<br>　　<br>　　enable 管理显示内部命令<br>　　<br>　　enable command 禁用内部命令<br>　　<br>　　enable -n command 激活已禁用的内部命令<br>　　<br>　　help 内部命令<br>　　<br>　　外部命令 –help<br>　　<br>　　查看指定命令的帮助信息<br>　　<br>　　whereis command 查看命令的路径（外部命令）和 帮助文档的路径<br>　　<br>　　which command 查看命令路径<br>　　<br>　　man 检索命令帮助文档　　</p><h3 id="5-文件查询"><a href="#5-文件查询" class="headerlink" title="5.文件查询"></a>5.文件查询</h3><hr><p>　　ls 列出目录的内容<br>　　<br>　　ls 列出目录的内容<br>　　<br>　　-a 列出所有文件（包含隐藏文件）<br>　　<br>　　-A 列出所有文件（包含隐藏文件但不包含.和..）<br>　　<br>　　-l 长列出（即显示属性信息）<br>　　<br>　　-R 递归<br>　　<br>　　-ld 查看指定目录的属性<br>　　<br>　　-1 竖显示<br>　　<br>　　stat 文件名<br>　　<br>　　查看一个文件的详细属性，包括三个时间戳。<br>　　<br>　　file 文件路径 判断文件的类型<br>　　<br>　　-b 只显示辨识结果，不显示文件名<br>　　<br>　　-f 文件路径 根据文件内容，将其中的文件分别辨识<br>　　<br>　　cat 文件名 查看文件内容<br>　　<br>　　vim 文件名 查看并编辑文件　　</p><h3 id="6，新建文件-移动、复制、删除文件"><a href="#6，新建文件-移动、复制、删除文件" class="headerlink" title="6，新建文件, 移动、复制、删除文件"></a>6，新建文件, 移动、复制、删除文件</h3><hr><p>　　touch newfile 创建空文件<br>　　<br>　　touch oldfile 更新文件的三个时间戳<br>　　<br>　　touch -a oldfile 更新文件的atime和ctime<br>　　<br>　　touch -m oldfile 更新文件的mtime和ctime<br>　　<br>　　touch -t 201802122021.59 fstab<br>　　<br>　　touch -c newfile 若文件存在则更新时间戳，若不存在不创建<br>　　<br>　　mkdir<br>　　<br>　　-p 一次性创建多级目录，无论父级目录是否存在。<br>　　<br>　　-v 创建时显示信息<br>　　<br>　　-m mode 创建时直接指定权限<br>　　<br>　　rmdir 删除空目<br>　　<br>　　cp src dst 被复制文件路径 新文件或被覆盖文件路径<br>　　<br>　　-i 覆盖时提示<br>　　<br>　　-r 递归，可复制目录<br>　　<br>　　–preserv=mode 权限不变<br>　　<br>　　–preserv=owner 权限及所属关系不变<br>　　<br>　　–preserv=timestamp 时间不变<br>　　<br>　　–preserv=all 以上全变<br>　　<br>　　-p 等于 –preserv=mode,owner,timestamp 复制时保留权限，时间不变<br>　　<br>　　-d 复制软链接<br>　　<br>　　-v 显示复制过程<br>　　<br>　　-a 以上全部<br>　　<br>　　-f 当dst已存在，但当前用户对其没有w权限，导致无法直接覆盖，如果当前用户对所在目录有wx权限，即可创建和删除文件，那么，加上-f后，会先删除文件，再创建新文件，最后再填充内容与src一致。<br>　　<br>　　mv src dst<br>　　<br>　　若dst不存在，则改名。<br>　　<br>　　-i 若dst已存在，则询问是否覆盖<br>　　<br>　　-f 抵消掉-i的作用，直接覆盖，不询问<br>　　<br>　　rm 删除<br>　　<br>　　rm 文件名<br>　　<br>　　-i 询问是否删除<br>　　<br>　　-f 抵消掉-i的作用，直接删除，不询问<br>　　<br>　　-r 递归，删除目录<br>　　<br>　　ls |xargs rm -rf 当删除的文件数量过多，超过了所支持的参数数量上限时，可配合管道及xargs来删除。<br>　　<br>　　–no-preserve-root</p><h3 id="7-文本处理命令"><a href="#7-文本处理命令" class="headerlink" title="7.文本处理命令"></a>7.文本处理命令</h3><hr><p>　　tr<br>　　<br>　　[set1] [set2 将set1转换成set2,set1的位数多于set2时，多出的位数全转成 set2的最后一位，如tr abcd ef 即a转成e，bcd均转成f<br>　　<br>　　-d [set1] 删除set1的字符<br>　　<br>　　-c [set1] [set2 除了set1以外的剩下其他字符都转换set2（换行符也会被转）<br>　　<br>　　-cd [set1] 删除除set1以外的字符<br>　　<br>　　-s [set1] 将连续重复的字符转为一个<br>　　<br>　　cut -d分隔符（只能是单个字符） -f取哪一列 文件名<br>　　<br>　　-output-delimiter=分隔符 表示输出的分隔符。默认为原文件分隔符<br>　　<br>　　-fn,m 或 -fn-m<br>　　<br>　　-cn,m 或 -cn,m -cn<br>　　<br>　　sort<br>　　<br>　　-t分隔符<br>　　<br>　　-k以分隔符的第几列排序<br>　　<br>　　-n以数字方式排序<br>　　<br>　　-r倒序排列<br>　　<br>　　-u去除重复项<br>　　<br>　　-f忽略大小写<br>　　<br>　　uniq 去重<br>　　<br>　　uniq 去除连续的重复行，仅保留一行<br>　　<br>　　-u 去除连续的重复行，不保留<br>　　<br>　　-d 仅显示重复的行，去除不重复的行<br>　　<br>　　-c 显示的结果前显示重复的次数　　</p><h3 id="8-正则表达式grep-和-sed"><a href="#8-正则表达式grep-和-sed" class="headerlink" title="8.正则表达式grep 和 sed"></a>8.正则表达式grep 和 sed</h3><hr><p>　　grep<br>　　<br>　　–color=auto 关键字高亮显示<br>　　<br>　　-v 反选<br>　　<br>　　-n 显示行号<br>　　<br>　　-c 显示匹配行的数量<br>　　<br>　　-i 忽略大小写<br>　　<br>　　-q 静默<br>　　<br>　　-A n 显示关键字及其下n行<br>　　<br>　　-B n 显示关键字及其上n行<br>　　<br>　　-C n 显示关键字及其上下n行<br>　　<br>　　-e：实现多个选项间的逻辑or关系<br>　　<br>　　-w：匹配整个单词<br>　　<br>　　-E 或 egrep 使用扩展正则<br>　　<br>　　-F 或 fgrep 不使用正则<br>　　<br>　　sed<br>　　<br>　　-i 更改原文件<br>　　<br>　　-i.bak 在更改前将原文件备份为.bak<br>　　<br>　　-n 不打印<br>　　<br>　　-e 多模式<br>　　<br>　　-f sed.txt 指定scripts的文件<br>　　<br>　　-r 指定扩展正则<br>　　<br>　　p打印<br>　　<br>　　d删除<br>　　<br>　　a在指定行后增加<br>　　<br>　　i在指定行前增加<br>　　<br>　　c替换指定行<br>　　<br>　　w将模式空间的行写入指定文件<br>　　<br>　　r将文件中的内容读入模式空间<br>　　<br>　　=: 为模式空间中的行打印行号<br>　　<br>　　!:模式空间中匹配行取反处理</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux运维排除问题步骤</title>
      <link href="/2021/08/15/linux-yun-wei-pai-chu-wen-ti-bu-zou/"/>
      <url>/2021/08/15/linux-yun-wei-pai-chu-wen-ti-bu-zou/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux服务器上排除问题的基本步骤"><a href="#Linux服务器上排除问题的基本步骤" class="headerlink" title="Linux服务器上排除问题的基本步骤"></a>Linux服务器上排除问题的基本步骤</h1><p>遇到服务器故障时，需要有条理的从几个方面入手排查</p><p><strong>一、尽可能搞清楚问题的前因后果</strong></p><p>1、故障的表现是什么？无响应？报错？</p><p>2、故障是什么时候发现的？</p><p>3、故障是否可重现？</p><p>4、有没有出现的规律（比如每小时出现一次）</p><p>5、最后一次对整个平台进行更新的内容是什么（代码、服务器等）？</p><p>6、故障影响的特定用户群是什么样的(已登录的, 退出的, 某个地域的…)?</p><p>7、基础架构（物理的、逻辑的）的文档是否能找到?</p><p>8、是否有监控平台可用?（比如Zabbix、 Nagios、 cacti… ）</p><p>9、是否有日志可以查看?（比如Loggly、Airbrake、 Graylog…）</p><p>最后两个是最方便的信息来源。</p><p><strong>二、有谁在?</strong></p><p>用下面两个命令看看都有谁在线，有哪些用户访问过</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ w $ last<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>三、之前发生了什么?</strong></p><p>查看一下之前服务器上执行过的命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">history</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常情况我们运行history命令是不会显示命令被执行的时间的。所以我们还需要设置下HISTTIMEFORMAT的环境变量，命令如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">HISTTIMEFORMAT</span><span class="token operator">=</span><span class="token string">'%F %T'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>四、现在在运行的进程是啥?</strong></p><p>用下面两个命令可以看到正在运行的进程及相关用户,推荐用pstree</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ pstree -a $ psaux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>五、监听的网络服务</strong></p><p>查看所有正在运行的服务，检查它们是否应该运行，下面3个命令可以分开查看，不至于一下子列出一大堆服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">netstat</span> -ntlp $ <span class="token function">netstat</span> -nulp $ <span class="token function">netstat</span> -nxlp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>六、CPU和内存</strong></p><p>通过下面4个命令检查</p><p>1、还有空余的内存吗? 服务器是否正在内存和硬盘之间进行swap?</p><p>2、还有剩余的CPU吗? 服务器是几核的? 是否有某些CPU核负载过多了?</p><p>3、服务器最大的负载来自什么地方? 平均负载是多少?</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">free</span> -m $ <span class="token function">uptime</span> $ <span class="token function">top</span> $ <span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>七、硬件</strong></p><p>通过下面3个命令检查</p><p>1、找到RAID卡 (是否带BBU备用电池)、 CPU、空余的内存插槽。根据这些情况可以大致了解硬件问题的来源和性能改进的办法</p><p>2、网卡是否设置好? 是否正运行在半双工状态? 速度是10MBps? 有没有 TX/RX 报错?</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ lspci $ dmidecode $ <span class="token function">ethtool</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>八、IO 性能</strong></p><p>通过下面4个命令检查(这些命令对于调试后端性能非常有用)</p><p>1、服务器硬盘是否已满?</p><p>2、是否开启了swap交换模式 (si/so)?</p><p>3、CPU被谁占用：系统进程? 用户进程? 虚拟机?</p><p>4、谁在进行 IO： 是不是数据库吃掉了所有的系统资源? 还是你的PHP或jiva进程?</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ iostat -kx <span class="token number">2</span> $ <span class="token function">vmstat</span> <span class="token number">2</span> <span class="token number">10</span> $ mpstat <span class="token number">2</span> <span class="token number">10</span> $ dstat --top-io --top-bi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>九、挂载点和文件系统</strong></p><p>通过下面几个命令检查</p><p>1、一共挂载了多少文件系统?</p><p>2、有没有某个服务专用的文件系统? (比如数据库?)</p><p>3、文件系统的挂载选项是什么： noatime? default? 有没有文件系统被重新挂载为只读模式了？</p><p>4、磁盘空间是否还有剩余?</p><p>5、是否有大文件被删除但没有清空?</p><p>6、如果磁盘空间有问题，你是否还有空间来扩展一个分区？</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mount</span> $ <span class="token function">cat</span> /etc/fstab $ vgs $ pvs $ lvs $ <span class="token function">df</span> -h $ lsof+D / /* beware not tokillyour box */<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>十、内核、中断和网络</strong></p><p>通过下面命令检查</p><p>1、你的中断请求是否是均衡地分配给CPU处理，还是会有某个CPU的核因为大量的网络中断请求或者RAID请求而过载了？</p><p>2、SWAP交换的设置是什么？对于工作站来说swappinness 设为 60 就很好, 不过对于服务器就太糟了：你最好永远不要让服务器做SWAP交换，不然对磁盘的读写会锁死SWAP进程</p><p>3、conntrack_max 是否设的足够大，能应付你服务器的流量?</p><p>4、在不同状态下(TIME_WAIT, …)TCP连接时间的设置是怎样的？</p><p>5、如果要显示所有存在的连接，netstat 会比较慢， 你可以先用 ss 看一下总体情况</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sysctl -a <span class="token operator">|</span> grep<span class="token punctuation">..</span>. $ <span class="token function">cat</span> /proc/interrupts $ <span class="token function">cat</span> /proc/net/ip_conntrack  /* may take sometimeon busy servers */ $ <span class="token function">netstat</span> $ ss -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>十一、系统日志和内核消息</strong></p><p>通过下面命令检查</p><p>1、查看错误和警告消息，比如看看是不是很多关于连接数过多导致？</p><p>2、看看是否有硬件错误或文件系统错误?</p><p>3、分析是否能将这些错误事件和前面发现的疑点进行时间上的比对</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">dmesg</span> $ <span class="token function">less</span> /var/log/messages $ <span class="token function">less</span> /var/log/secure $ <span class="token function">less</span> /var/log/auth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>十二、定时任务</strong></p><p>通过下面命令检查</p><p>1、是否有某个定时任务运行过于频繁?</p><p>2、是否有些用户提交了隐藏的定时任务?</p><p>3、在出现故障的时候，是否正好有某个备份任务在执行？</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span>  /etc/cron* +cat $ foruserin<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /etc/passwd<span class="token operator">|</span>cut-f1 -d:<span class="token variable">)</span></span><span class="token punctuation">;</span>docrontab -l -u <span class="token variable">$user</span><span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>十三、应用系统日志</strong></p><p>这边以LAMP（Linux+Apache+Mysql+Perl）应用环境举例：</p><p>1、Apache &amp; Nginx; 查找访问和错误日志, 直接找 5xx 错误, 再看看是否有 limit_zone 错误</p><p>2、MySQL; 在mysql.log找错误消息，看看有没有结构损坏的表， 是否有innodb修复进程在运行，是否有disk/index/query 问题</p><p>3、PHP-FPM; 如果设定了 php-slow 日志, 直接找错误信息 (php, mysql, memcache, …)，如果没设定，赶紧设定</p><p>4、Varnish; 在varnishlog 和 varnishstat 里, 检查 hit/miss比. 看看配置信息里是否遗漏了什么规则，使最终用户可以直接攻击你的后端？</p><p>5、HA-Proxy; 后端的状况如何？健康状况检查是否成功？是前端还是后端的队列大小达到最大值了？</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2021/08/15/nginx/"/>
      <url>/2021/08/15/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="配置管理nginx-conf"><a href="#配置管理nginx-conf" class="headerlink" title="配置管理nginx.conf"></a>配置管理nginx.conf</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">########### 每个指令必须有分号结束。#################</span><span class="token comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><span class="token comment">#worker_processes 2;  #允许生成的进程数，默认为1</span><span class="token comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><span class="token directive"><span class="token keyword">error_log</span> log/error.log debug</span><span class="token punctuation">;</span>  <span class="token comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">accept_mutex</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span>    <span class="token directive"><span class="token keyword">multi_accept</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>  <span class="token comment">#设置一个进程是否同时接受多个网络连接，默认为off</span>    <span class="token comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>    <span class="token comment">#最大连接数，默认为512</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>   <span class="token comment">#文件扩展名与文件类型映射表</span>    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span> <span class="token comment">#默认文件类型，默认为text/plain</span>    <span class="token comment">#access_log off; #取消服务日志    </span>    <span class="token directive"><span class="token keyword">log_format</span> myFormat <span class="token string">'<span class="token variable">$remote_addr–</span><span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> <span class="token variable">$request</span> <span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> <span class="token variable">$http_referer</span> <span class="token variable">$http_user_agent</span> <span class="token variable">$http_x_forwarded_for</span>'</span></span><span class="token punctuation">;</span> <span class="token comment">#自定义格式</span>    <span class="token directive"><span class="token keyword">access_log</span> log/access.log myFormat</span><span class="token punctuation">;</span>  <span class="token comment">#combined为日志格式的默认值</span>    <span class="token directive"><span class="token keyword">sendfile</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span>    <span class="token directive"><span class="token keyword">sendfile_max_chunk</span> <span class="token number">100k</span></span><span class="token punctuation">;</span>  <span class="token comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span> <span class="token number">65</span></span><span class="token punctuation">;</span>  <span class="token comment">#连接超时时间，默认为75s，可以在http，server，location块。</span>    <span class="token directive"><span class="token keyword">upstream</span> mysvr</span> <span class="token punctuation">{</span>         <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:7878</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">server</span> 192.168.10.121:3333 backup</span><span class="token punctuation">;</span>  <span class="token comment">#热备</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> https://www.baidu.com</span><span class="token punctuation">;</span> <span class="token comment">#错误页</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">keepalive_requests</span> <span class="token number">120</span></span><span class="token punctuation">;</span> <span class="token comment">#单连接请求上限次数。</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">4545</span></span><span class="token punctuation">;</span>   <span class="token comment">#监听端口</span>        <span class="token directive"><span class="token keyword">server_name</span>  127.0.0.1</span><span class="token punctuation">;</span>   <span class="token comment">#监听地址       </span>        <span class="token directive"><span class="token keyword">location</span>  ~*^.+$</span> <span class="token punctuation">{</span>       <span class="token comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span>           <span class="token comment">#root path;  #根目录</span>           <span class="token comment">#index vv.txt;  #设置默认页</span>           <span class="token directive"><span class="token keyword">proxy_pass</span>  http://mysvr</span><span class="token punctuation">;</span>  <span class="token comment">#请求转向mysvr 定义的服务器列表</span>           <span class="token directive"><span class="token keyword">deny</span> 127.0.0.1</span><span class="token punctuation">;</span>  <span class="token comment">#拒绝的ip</span>           <span class="token directive"><span class="token keyword">allow</span> 172.18.5.54</span><span class="token punctuation">;</span> <span class="token comment">#允许的ip           </span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># For more information on configuration, see:</span><span class="token comment">#   * Official English Documentation: http://nginx.org/en/docs/</span><span class="token comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><span class="token directive"><span class="token keyword">user</span> nginx</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">worker_processes</span> auto</span><span class="token punctuation">;</span><span class="token comment">#允许生成的进程数，取决于CPU核数</span><span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/error.log</span><span class="token punctuation">;</span><span class="token comment">#错误日志</span><span class="token directive"><span class="token keyword">pid</span> /run/nginx.pid</span><span class="token punctuation">;</span> <span class="token comment">#主进程id，指定nginx进程运行文件存放地址</span><span class="token comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><span class="token directive"><span class="token keyword">include</span> /usr/share/nginx/modules/*.conf</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">worker_connections</span> <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token comment">##worker进程处理的请求数</span><span class="token punctuation">}</span><span class="token comment">##服务器核心配置</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span><span class="token comment">##日志格式</span>    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span><span class="token comment">##访问日志</span>    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>            <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">tcp_nopush</span>          <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">tcp_nodelay</span>         <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token comment">##会话保持时间</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>   <span class="token number">65</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">types_hash_max_size</span> <span class="token number">4096</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">include</span>             /etc/nginx/mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span>        application/octet-stream</span><span class="token punctuation">;</span>    <span class="token comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span>    <span class="token comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span>    <span class="token comment"># for more information.</span>    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span><span class="token comment">#引入子配置文件</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span><span class="token comment">##监听所有的ipv4的地址</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span><span class="token comment">##监听所有的ipv6的地址</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment"># Settings for a TLS enabled server.</span><span class="token comment">#</span><span class="token comment">#    server {</span><span class="token comment">#        listen       443 ssl http2;</span><span class="token comment">#        listen       [::]:443 ssl http2;</span><span class="token comment">#        server_name  _;</span><span class="token comment">#        root         /usr/share/nginx/html;</span><span class="token comment">#</span><span class="token comment">#        ssl_certificate "/etc/pki/nginx/server.crt";</span><span class="token comment">#        ssl_certificate_key "/etc/pki/nginx/private/server.key";</span><span class="token comment">#        ssl_session_cache shared:SSL:1m;</span><span class="token comment">#        ssl_session_timeout  10m;</span><span class="token comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span><span class="token comment">#        ssl_prefer_server_ciphers on;</span><span class="token comment">#</span><span class="token comment">#        # Load configuration files for the default server block.</span><span class="token comment">#        include /etc/nginx/default.d/*.conf;</span><span class="token comment">#</span><span class="token comment">#        error_page 404 /404.html;</span><span class="token comment">#            location = /40x.html {</span><span class="token comment">#        }</span><span class="token comment">#</span><span class="token comment">#        error_page 500 502 503 504 /50x.html;</span><span class="token comment">#            location = /50x.html {</span><span class="token comment">#        }</span><span class="token comment">#    }</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>         <span class="token directive"><span class="token keyword">location</span> = /hello</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>         /usr/share/nginx/html</span><span class="token punctuation">;</span><span class="token comment">##网站目录目录/URL</span>    <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span><span class="token comment">#默认首页index.html</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义站点"><a href="#自定义站点" class="headerlink" title="自定义站点"></a>自定义站点</h3><p>1.获取信息</p><p>站点名称：mysite.com</p><p>端口：81</p><p>站点目录：/opt/mysite</p><p>2.创建站点 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /opt/mysite</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/mysite/</span><span class="token punctuation">[</span>root@localhost mysite<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token punctuation">[</span>root@localhost mysite<span class="token punctuation">]</span><span class="token comment"># echo mysite &gt; index.com</span><span class="token punctuation">[</span>root@localhost mysite<span class="token punctuation">]</span><span class="token comment"># mkdir static</span><span class="token punctuation">[</span>root@localhost mysite<span class="token punctuation">]</span><span class="token comment"># echo static &gt; static/index.com </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.配置nginx服务</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">81</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  mysite.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>         <span class="token directive"><span class="token keyword">location</span> = /static</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite</span><span class="token punctuation">;</span><span class="token comment">##网站目录目录/URL</span>    <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span><span class="token comment">#默认首页index.html</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.启动nginx</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/nginx/conf.d/mysite.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.安全配置</p><p>安全组（开放端口）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop firewalld<span class="token comment">#关闭防火墙</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.配置域名</p><p>域名–&gt;解析成IP</p><p>买一个域名：</p><p>本地hosts</p><p>win：C:\Windows\System32\drivers\etc\hosts</p><h3 id="nginx配置虚拟主机"><a href="#nginx配置虚拟主机" class="headerlink" title="nginx配置虚拟主机"></a>nginx配置虚拟主机</h3><ul><li>基于IP虚拟主机</li><li>基于端口的虚拟主机</li><li>基于域名</li><li>基于访问路径配置</li></ul><h4 id="基于IP配置虚拟主机"><a href="#基于IP配置虚拟主机" class="headerlink" title="基于IP配置虚拟主机"></a>基于IP配置虚拟主机</h4><p>每台机器配置一个站点</p><h4 id="基于端口配置虚拟主机"><a href="#基于端口配置虚拟主机" class="headerlink" title="基于端口配置虚拟主机"></a>基于端口配置虚拟主机</h4><ul><li>site1:/opt/site1</li><li>site2:/opt/site2</li></ul><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">82</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:82</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/site1</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">83</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:83</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/site2</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于域名配置虚拟主机"><a href="#基于域名配置虚拟主机" class="headerlink" title="基于域名配置虚拟主机"></a>基于域名配置虚拟主机</h4><ul><li>mysite1.com /opt mysite1</li><li>mysite2.com /opt mysite2</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> /opt/mysite1 /opt/mysite2<span class="token builtin class-name">echo</span> mysite1 <span class="token operator">&gt;</span>/opt/mysite1/index.html<span class="token builtin class-name">echo</span> mysite2 <span class="token operator">&gt;</span>/opt/mysite1/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置站点</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">85</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:85</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  mysite1.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite1</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">86</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:86</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  mysite1.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite2</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于访问路径配置虚拟主机</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /site1</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>                <span class="token directive"><span class="token keyword">location</span> = /site2</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">location</span> = /site3</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nginx配置代理服务器"><a href="#nginx配置代理服务器" class="headerlink" title="nginx配置代理服务器"></a>nginx配置代理服务器</h3><p>一台机器：运行一个代理站点和两个其他站点</p><p>创建数据</p><ul><li>proxysite1:/opt/proxy1</li><li>proxysite2:/opt/proxy2</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> /opt/proxy1 /opt/proxy2<span class="token builtin class-name">echo</span> <span class="token string">"my proxy site1"</span> <span class="token operator">&gt;</span> /opt/proxy1/index.html<span class="token builtin class-name">echo</span> <span class="token string">"my proxy site2"</span> <span class="token operator">&gt;</span> /opt/proxy2/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建站点</p><p>proxy1</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">87</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:87</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/proxy1</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>proxy2</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">88</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:88</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/proxy2</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>proxy</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">89</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://192.168.100.128:88/</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">location</span> ~ \.(gif|jpg|png)$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span> /data/images</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html">Module ngx_http_proxy_module</a></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">proxy_pass<span class="token comment">##设置代理服务器的协议和地址以及位置应映射到的可选 URI。作为协议，可以指定“ http”或“ https”。地址可以指定为域名或 IP 地址，以及可选的端口：</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置NGINX支持PHP网站解析"><a href="#配置NGINX支持PHP网站解析" class="headerlink" title="配置NGINX支持PHP网站解析"></a>配置NGINX支持PHP网站解析</h3><h4 id="静动分离"><a href="#静动分离" class="headerlink" title="静动分离"></a>静动分离</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">81</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  mysite.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>         <span class="token directive"><span class="token keyword">location</span> = /static</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite</span><span class="token punctuation">;</span><span class="token comment">##网站目录目录/URL</span>    <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span><span class="token comment">#默认首页index.html</span>        <span class="token punctuation">}</span>       <span class="token directive"><span class="token keyword">location</span> /.php$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>   /opt/mysite</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.php</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span>  localhost:9000</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME /home/www/scripts/php<span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> QUERY_STRING <span class="token variable">$query_string</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备php页面</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="nginx配置负载均衡器"><a href="#nginx配置负载均衡器" class="headerlink" title="nginx配置负载均衡器"></a>nginx配置负载均衡器</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">server</span> backend1.example.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server</span> backend2.example.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server</span> 192.0.0.1 backup</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>            <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器权重</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">server</span> backend1.example.com weight=5</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> backend2.example.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.0.0.1 backup</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">#weight 参数server设置服务器的权重；默认是1</span><span class="token comment">#在这个例子中，backend1.example.com有 weight 5；其他两台服务器有默认权重（1），但有 IP 地址的那台192.0.0.1被标记为backup服务器，除非其他两台服务器都不可用，否则不会接收请求。随着权重的这种配置，每的6请求，5发送到backend1.example.com和1对backend2.example.com。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限及如何设计数据库</title>
      <link href="/2021/08/14/quan-xian-ji-ru-he-she-ji-shu-ju-ku/"/>
      <url>/2021/08/14/quan-xian-ji-ru-he-she-ji-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="权限及如何设计数据库"><a href="#权限及如何设计数据库" class="headerlink" title="权限及如何设计数据库"></a>权限及如何设计数据库</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote><p>基本命令</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/* 用户和权限管理 */ ------------------用户信息表：mysql.user-- 刷新权限FLUSH PRIVILEGES-- 增加用户 CREATE USER kuangshen IDENTIFIED BY '123456'CREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)  - 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。  - 只能创建用户，不能赋予权限。  - 用户名，注意引号：如 'user_name'@'192.168.1.1'  - 密码也需引号，纯数字密码也要加引号  - 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD-- 重命名用户 RENAME USER kuangshen TO kuangshen2RENAME USER old_user TO new_user-- 设置密码SET PASSWORD = PASSWORD('密码')    -- 为当前用户设置密码SET PASSWORD FOR 用户名 = PASSWORD('密码')    -- 为指定用户设置密码-- 删除用户 DROP USER kuangshen2DROP USER 用户名-- 分配权限/添加用户GRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] 'password']  - all privileges 表示所有权限  - *.* 表示所有库的所有表  - 库名.表名 表示某库下面的某表-- 查看权限   SHOW GRANTS FOR root@localhost;SHOW GRANTS FOR 用户名   -- 查看当前用户权限  SHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();-- 撤消权限REVOKE 权限列表 ON 表名 FROM 用户名REVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名    -- 撤销所有权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>权限解释</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 权限列表ALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限ALTER    -- 允许使用ALTER TABLEALTER ROUTINE    -- 更改或取消已存储的子程序CREATE    -- 允许使用CREATE TABLECREATE ROUTINE    -- 创建已存储的子程序CREATE TEMPORARY TABLES        -- 允许使用CREATE TEMPORARY TABLECREATE USER        -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。CREATE VIEW        -- 允许使用CREATE VIEWDELETE    -- 允许使用DELETEDROP    -- 允许使用DROP TABLEEXECUTE        -- 允许用户运行已存储的子程序FILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILEINDEX     -- 允许使用CREATE INDEX和DROP INDEXINSERT    -- 允许使用INSERTLOCK TABLES        -- 允许对您拥有SELECT权限的表使用LOCK TABLESPROCESS     -- 允许使用SHOW FULL PROCESSLISTREFERENCES    -- 未被实施RELOAD    -- 允许使用FLUSHREPLICATION CLIENT    -- 允许用户询问从属服务器或主服务器的地址REPLICATION SLAVE    -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）SELECT    -- 允许使用SELECTSHOW DATABASES    -- 显示所有数据库SHOW VIEW    -- 允许使用SHOW CREATE VIEWSHUTDOWN    -- 允许使用mysqladmin shutdownSUPER    -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。UPDATE    -- 允许使用UPDATEUSAGE    -- “无权限”的同义词GRANT OPTION    -- 允许授予权限/* 表维护 */-- 分析和存储表的关键字分布ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...-- 检查一个或多个表是否有错误CHECK TABLE tbl_name [, tbl_name] ... [option] ...option = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}-- 整理数据文件的碎片OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="MySQL备份"><a href="#MySQL备份" class="headerlink" title="MySQL备份"></a>MySQL备份</h3><p>数据库备份必要性</p><ul><li>保证重要数据不丢失</li><li>数据转移</li></ul><p>MySQL数据库备份方法</p><ul><li>mysqldump备份工具</li><li>数据库管理工具,如SQLyog</li><li>直接拷贝数据库文件和相关配置文件</li></ul><p><strong>mysqldump客户端</strong></p><p>作用 :</p><ul><li>转储数据库</li><li>搜集数据库进行备份</li><li>将数据转移到另一个SQL服务器,不一定是MySQL服务器</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 导出1. 导出一张表 -- mysqldump -uroot -p123456 school student &gt;D:/a.sql　　mysqldump -u用户名 -p密码 库名 表名 &gt; 文件名(D:/a.sql)2. 导出多张表 -- mysqldump -uroot -p123456 school student result &gt;D:/a.sql　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 文件名(D:/a.sql)3. 导出所有表 -- mysqldump -uroot -p123456 school &gt;D:/a.sql　　mysqldump -u用户名 -p密码 库名 &gt; 文件名(D:/a.sql)4. 导出一个库 -- mysqldump -uroot -p123456 -B school &gt;D:/a.sql　　mysqldump -u用户名 -p密码 -B 库名 &gt; 文件名(D:/a.sql)可以-w携带备份条件-- 导入1. 在登录mysql的情况下：-- source D:/a.sql　　source 备份文件2. 在不登录的情况下　　mysql -u用户名 -p密码 库名 &lt; 备份文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="规范化数据库设计"><a href="#规范化数据库设计" class="headerlink" title="规范化数据库设计"></a>规范化数据库设计</h2><h3 id="为什么需要数据库设计"><a href="#为什么需要数据库设计" class="headerlink" title="为什么需要数据库设计"></a>为什么需要数据库设计</h3><p><strong>当数据库比较复杂时我们需要设计数据库</strong></p><p><strong>糟糕的数据库设计 :</strong> </p><ul><li>数据冗余,存储空间浪费</li><li>数据更新和插入的异常</li><li>程序性能差</li></ul><p><strong>良好的数据库设计 :</strong> </p><ul><li>节省数据的存储空间</li><li>能够保证数据的完整性</li><li>方便进行数据库应用系统的开发</li></ul><p> <strong>软件项目开发周期中数据库设计 :</strong></p><ul><li>需求分析阶段: 分析客户的业务和数据处理需求</li><li>概要设计阶段:设计数据库的E-R模型图 , 确认需求信息的正确和完整.</li></ul><p><strong>设计数据库步骤</strong></p><ul><li><p>收集信息</p></li><li><ul><li>与该系统有关人员进行交流 , 座谈 , 充分了解用户需求 , 理解数据库需要完成的任务.</li></ul></li><li><p>标识实体[Entity]</p></li><li></li><li><ul><li>标识数据库要管理的关键对象或实体,实体一般是名词</li></ul></li><li><p>标识每个实体需要存储的详细信息[Attribute]</p></li><li><p>标识实体之间的关系[Relationship]</p></li></ul><h3 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h3><p><strong>问题 : 为什么需要数据规范化?</strong></p><p>不合规范的表设计会导致的问题：</p><ul><li><p>信息重复</p></li><li><p>更新异常</p></li><li><p>插入异常</p></li><li><ul><li>无法正确表示信息</li></ul></li><li><p>删除异常</p></li><li><ul><li>丢失有效信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p><strong>第一范式 (1st NF)</strong></p><p>第一范式的目标是确保每列的原子性,如果每列都是不可再分的最小数据单元,则满足第一范式</p><p><strong>第二范式(2nd NF)</strong></p><p>第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。</p><p>第二范式要求每个表只描述一件事情</p><p><strong>第三范式(3rd NF)</strong></p><p>如果一个关系满足第二范式,并且除了主键以外的其他列都不传递依赖于主键列,则满足第三范式.</p><p>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</p><p><strong>规范化和性能的关系</strong></p><p>为满足某种商业目标 , 数据库性能比规范化数据库更重要</p><p>在数据规范化的同时 , 要综合考虑数据库的性能</p><p>通过在给定的表中添加额外的字段,以大量减少需要从中搜索信息所需的时间</p><p>通过在给定的表中插入计算列,以方便查询</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务和索引</title>
      <link href="/2021/08/14/shi-wu-he-suo-yin/"/>
      <url>/2021/08/14/shi-wu-he-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="事务和索引"><a href="#事务和索引" class="headerlink" title="事务和索引"></a>事务和索引</h2><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>什么是事务</p></blockquote><ul><li>事务就是将一组SQL语句放在同一批次内去执行</li><li>如果一个SQL语句出错,则该批次内的所有SQL都将被取消执行</li><li>MySQL事务处理只支持InnoDB和BDB数据表类型</li></ul><blockquote><p>事务的ACID原则  百度 ACID</p></blockquote><p><strong>原子性(Atomic)</strong></p><ul><li>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（ROLLBACK）到事务开始前的状态，就像这个事务从来没有执行过一样。</li></ul><p><strong>一致性(Consist)</strong></p><ul><li>一个事务可以封装状态改变（除非它是一个只读的）。事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。也就是说：如果事务是并发多个，系统也必须如同串行事务一样操作。其主要特征是保护性和不变性(Preserving an Invariant)，以转账案例为例，假设有五个账户，每个账户余额是100元，那么五个账户总额是500元，如果在这个5个账户之间同时发生多个转账，无论并发多少个，比如在A与B账户之间转账5元，在C与D账户之间转账10元，在B与E之间转账15元，五个账户总额也应该还是500元，这就是保护性和不变性。</li></ul><p><strong>隔离性(Isolated)</strong></p><ul><li>隔离状态执行事务，使它们好像是系统在给定时间内执行的唯一操作。如果有两个事务，运行在相同的时间内，执行相同的功能，事务的隔离性将确保每一事务在系统中认为只有该事务在使用系统。这种属性有时称为串行化，为了防止事务操作间的混淆，必须串行化或序列化请求，使得在同一时间仅有一个请求用于同一数据。</li></ul><p><strong>持久性(Durable)</strong></p><ul><li>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</li></ul><blockquote><p><strong>基本语法</strong></p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 使用set语句来改变自动提交模式SET autocommit = 0;   /*关闭*/SET autocommit = 1;   /*开启*/-- 注意:--- 1.MySQL中默认是自动提交--- 2.使用事务时应先关闭自动提交-- 开始一个事务,标记事务的起始点START TRANSACTION  -- 提交一个事务给数据库COMMIT-- 将事务回滚,数据回到本次事务的初始状态ROLLBACK-- 还原MySQL数据库的自动提交SET autocommit =1;-- 保存点SAVEPOINT 保存点名称 -- 设置一个事务保存点ROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点RELEASE SAVEPOINT 保存点名称 -- 删除保存点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*课堂测试题目A在线买一款价格为500元商品,网上银行转账.A的银行卡余额为2000,然后给商家B支付500.商家B一开始的银行卡余额为10000创建数据库shop和创建表account并插入2条数据*/CREATE DATABASE `shop`CHARACTER SET utf8 COLLATE utf8_general_ci;USE `shop`;CREATE TABLE `account` (`id` INT(11) NOT NULL AUTO_INCREMENT,`name` VARCHAR(32) NOT NULL,`cash` DECIMAL(9,2) NOT NULL,PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8INSERT INTO account (`name`,`cash`)VALUES('A',2000.00),('B',10000.00)-- 转账实现SET autocommit = 0; -- 关闭自动提交START TRANSACTION;  -- 开始一个事务,标记事务的起始点UPDATE account SET cash=cash-500 WHERE `name`='A';UPDATE account SET cash=cash+500 WHERE `name`='B';COMMIT; -- 提交事务# rollback;SET autocommit = 1; -- 恢复自动提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><blockquote><p>索引的作用</p></blockquote><ul><li>提高查询速度</li><li>确保数据的唯一性</li><li>可以加速表和表之间的连接 , 实现表与表之间的参照完整性</li><li>使用分组和排序子句进行数据检索时 , 可以显著减少分组和排序的时间</li><li>全文检索字段进行搜索优化.</li></ul><blockquote><p>分类</p></blockquote><ul><li>主键索引 (Primary Key)</li><li>唯一索引 (Unique)</li><li>常规索引 (Index)</li><li>全文索引 (FullText)</li></ul><blockquote><p>主键索引</p></blockquote><p>主键 : 某一个属性组能唯一标识一条记录</p><p>特点 :</p><ul><li>最常见的索引类型</li><li>确保数据记录的唯一性</li><li>确定特定数据记录在数据库中的位置</li></ul><blockquote><p>唯一索引</p></blockquote><p>作用 : 避免同一个表中某数据列中的值重复</p><p>与主键索引的区别</p><ul><li>主键索引只能有一个</li><li>唯一索引可能有多个</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `Grade`(  `GradeID` INT(11) AUTO_INCREMENT PRIMARYKEY,  `GradeName` VARCHAR(32) NOT NULL UNIQUE   -- 或 UNIQUE KEY `GradeID` (`GradeID`))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>常规索引</p></blockquote><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>index 和 key 关键字都可以设置常规索引</li><li>应加在查询找条件的字段</li><li>不宜添加太多常规索引,影响数据的插入,删除和修改操作</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `result`(   -- 省略一些代码  INDEX/KEY `ind` (`studentNo`,`subjectNo`) -- 创建表时添加)-- 创建后添加ALTER TABLE `result` ADD INDEX `ind`(`studentNo`,`subjectNo`);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>全文索引</p></blockquote><p>百度搜索：全文索引</p><p>作用 : 快速定位特定数据</p><p>注意 :</p><ul><li>只能用于MyISAM类型的数据表</li><li>只能用于CHAR , VARCHAR , TEXT数据列类型</li><li>适合大型数据集</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*#方法一：创建表时  　　CREATE TABLE 表名 (               字段名1 数据类型 [完整性约束条件…],               字段名2 数据类型 [完整性约束条件…],               [UNIQUE | FULLTEXT | SPATIAL ]   INDEX | KEY               [索引名] (字段名[(长度)] [ASC |DESC])               );#方法二：CREATE在已存在的表上创建索引       CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名                    ON 表名 (字段名[(长度)] [ASC |DESC]) ;#方法三：ALTER TABLE在已存在的表上创建索引       ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX                            索引名 (字段名[(长度)] [ASC |DESC]) ;                                                      #删除索引：DROP INDEX 索引名 ON 表名字;#删除主键索引: ALTER TABLE 表名 DROP PRIMARY KEY;#显示索引信息: SHOW INDEX FROM student;*//*增加全文索引*/ALTER TABLE `school`.`student` ADD FULLTEXT INDEX `studentname` (`StudentName`);/*EXPLAIN : 分析SQL语句执行性能*/EXPLAIN SELECT * FROM student WHERE studentno='1000';/*使用全文索引*/-- 全文搜索通过 MATCH() 函数完成。-- 搜索字符串作为 against() 的参数被给定。搜索以忽略字母大小写的方式执行。对于表中的每个记录行，MATCH() 返回一个相关性值。即，在搜索字符串与记录行在 MATCH() 列表中指定的列的文本之间的相似性尺度。EXPLAIN SELECT *FROM student WHERE MATCH(studentname) AGAINST('love');/*开始之前，先说一下全文索引的版本、存储引擎、数据类型的支持情况MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。测试或使用全文索引时，要先看一下自己的 MySQL 版本、存储引擎和数据类型是否支持全文索引。*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>拓展：测试索引</p></blockquote><p><strong>建表app_user：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `app_user` (`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,`name` varchar(50) DEFAULT '' COMMENT '用户昵称',`email` varchar(50) NOT NULL COMMENT '用户邮箱',`phone` varchar(20) DEFAULT '' COMMENT '手机号',`gender` tinyint(4) unsigned DEFAULT '0' COMMENT '性别（0:男；1：女）',`password` varchar(100) NOT NULL COMMENT '密码',`age` tinyint(4) DEFAULT '0' COMMENT '年龄',`create_time` datetime DEFAULT CURRENT_TIMESTAMP,`update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='app用户表'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>批量插入数据：100w</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP FUNCTION IF EXISTS mock_data;DELIMITER $$CREATE FUNCTION mock_data()RETURNS INTBEGINDECLARE num INT DEFAULT 1000000;DECLARE i INT DEFAULT 0;WHILE i &lt; num DO  INSERT INTO app_user(`name`, `email`, `phone`, `gender`, `password`, `age`)   VALUES(CONCAT('用户', i), '24736743@qq.com', CONCAT('18', FLOOR(RAND()*(999999999-100000000)+100000000)),FLOOR(RAND()*2),UUID(), FLOOR(RAND()*100));  SET i = i + 1;END WHILE;RETURN i;END;SELECT mock_data();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>索引效率测试</strong></p><p>无索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM app_user WHERE name = '用户9999'; -- 查看耗时SELECT * FROM app_user WHERE name = '用户9999';SELECT * FROM app_user WHERE name = '用户9999';mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name = '用户9999'\G*************************** 1. row ***************************          id: 1select_type: SIMPLE       table: app_user  partitions: NULL        type: ALLpossible_keys: NULL        key: NULL    key_len: NULL        ref: NULL        rows: 992759    filtered: 10.00      Extra: Using where1 row in set, 1 warning (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE INDEX idx_app_user_name ON app_user(name);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试普通索引</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; EXPLAIN SELECT * FROM app_user WHERE name = '用户9999'\G*************************** 1. row ***************************          id: 1select_type: SIMPLE       table: app_user  partitions: NULL        type: refpossible_keys: idx_app_user_name        key: idx_app_user_name    key_len: 203        ref: const        rows: 1    filtered: 100.00      Extra: NULL1 row in set, 1 warning (0.00 sec)mysql&gt; SELECT * FROM app_user WHERE name = '用户9999';1 row in set (0.00 sec)mysql&gt; SELECT * FROM app_user WHERE name = '用户9999';1 row in set (0.00 sec)mysql&gt; SELECT * FROM app_user WHERE name = '用户9999';1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>索引准则</p></blockquote><ul><li>索引不是越多越好</li><li>不要对经常变动的数据加索引</li><li>小数据量的表建议不要加索引</li><li>索引一般应加在查找条件的字段</li></ul><blockquote><p>索引的数据结构</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 我们可以在创建上述索引的时候，为其指定索引类型，分两类hash类型的索引：查询单条快，范围查询慢btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）-- 不同的存储引擎支持的索引类型也不一样InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL函数</title>
      <link href="/2021/08/14/mysql-han-shu/"/>
      <url>/2021/08/14/mysql-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数-1"><a href="#MySQL函数-1" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数-1"><a href="#聚合函数-1" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数-2"><a href="#MySQL函数-2" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数-2"><a href="#聚合函数-2" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数-3"><a href="#MySQL函数-3" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-3"><a href="#常用函数-3" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数-3"><a href="#聚合函数-3" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数-4"><a href="#MySQL函数-4" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-4"><a href="#常用函数-4" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数-4"><a href="#聚合函数-4" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数-5"><a href="#MySQL函数-5" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-5"><a href="#常用函数-5" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数-5"><a href="#聚合函数-5" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数-6"><a href="#MySQL函数-6" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-6"><a href="#常用函数-6" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数-6"><a href="#聚合函数-6" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数-7"><a href="#MySQL函数-7" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-7"><a href="#常用函数-7" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数-7"><a href="#聚合函数-7" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL函数-8"><a href="#MySQL函数-8" class="headerlink" title="MySQL函数"></a>MySQL函数</h2><h3 id="常用函数-8"><a href="#常用函数-8" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>数据函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT ABS(-8);  /*绝对值*/SELECT CEILING(9.4); /*向上取整*/SELECT FLOOR(9.4);   /*向下取整*/SELECT RAND();  /*随机数,返回一个0-1之间的随机数*/SELECT SIGN(0); /*符号函数: 负数返回-1,正数返回1,0返回0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字符串函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CHAR_LENGTH('狂神说坚持就能成功'); /*返回字符串包含的字符数*/SELECT CONCAT('我','爱','程序');  /*合并字符串,参数可以有多个*/SELECT INSERT('我爱编程helloworld',1,2,'超级热爱');  /*替换字符串,从某个位置开始替换某个长度*/SELECT LOWER('KuangShen'); /*小写*/SELECT UPPER('KuangShen'); /*大写*/SELECT LEFT('hello,world',5);   /*从左边截取*/SELECT RIGHT('hello,world',5);  /*从右边截取*/SELECT REPLACE('狂神说坚持就能成功','坚持','努力');  /*替换字符串*/SELECT SUBSTR('狂神说坚持就能成功',4,6); /*截取字符串,开始和长度*/SELECT REVERSE('狂神说坚持就能成功'); /*反转-- 查询姓周的同学,改成邹SELECT REPLACE(studentname,'周','邹') AS 新名字FROM student WHERE studentname LIKE '周%';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>日期和时间函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT CURRENT_DATE();   /*获取当前日期*/SELECT CURDATE();   /*获取当前日期*/SELECT NOW();   /*获取当前日期和时间*/SELECT LOCALTIME();   /*获取当前日期和时间*/SELECT SYSDATE();   /*获取当前日期和时间*/-- 获取年月日,时分秒SELECT YEAR(NOW());SELECT MONTH(NOW());SELECT DAY(NOW());SELECT HOUR(NOW());SELECT MINUTE(NOW());SELECT SECOND(NOW());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>系统信息函数</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT VERSION();  /*版本*/SELECT USER();     /*用户*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="聚合函数-8"><a href="#聚合函数-8" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回满足Select条件的记录总和数，如 select count(*) 【不建议使用 *，效率低】</td></tr><tr><td>SUM()</td><td>返回数字字段或表达式列作统计，返回一列的总和。</td></tr><tr><td>AVG()</td><td>通常为数值字段或表达列作统计，返回一列的平均值</td></tr><tr><td>MAX()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最大的值。</td></tr><tr><td>MIN()</td><td>可以为数值字段，字符字段或表达式列作统计，返回最小的值。</td></tr></tbody></table><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 聚合函数/*COUNT:非空的*/SELECT COUNT(studentname) FROM student;SELECT COUNT(*) FROM student;SELECT COUNT(1) FROM student;  /*推荐*/-- 从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。-- count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。-- count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；-- count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。/*很多人认为count(1)执行的效率会比count(*)高，原因是count(*)会存在全表扫描，而count(1)可以针对一个字段进行查询。其实不然，count(1)和count(*)都会对全表进行扫描，统计所有记录的条数，包括那些为null的记录，因此，它们的效率可以说是相差无几。而count(字段)则与前两者不同，它会统计该字段不为null的记录条数。下面它们之间的一些对比：1）在表没有主键时，count(1)比count(*)快2）有主键时，主键作为计算条件，count(主键)效率最高；3）若表格只有一个字段，则count(*)效率较高。*/SELECT SUM(StudentResult) AS 总和 FROM result;SELECT AVG(StudentResult) AS 平均分 FROM result;SELECT MAX(StudentResult) AS 最高分 FROM result;SELECT MIN(StudentResult) AS 最低分 FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>题目：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN `subject` AS sON r.subjectno = s.subjectnoGROUP BY r.subjectnoHAVING 平均分&gt;80;/*where写在group by前面.要是放在分组后面的筛选要使用HAVING..因为having是从前面筛选的字段再筛选，而where是从数据表中的&gt;字段直接进行的筛选的*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MD5 加密</p></blockquote><p><strong>一、MD5简介</strong></p><p>MD5即Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5的前身有MD2、MD3和MD4。</p><p><strong>二、实现数据加密</strong></p><p>新建一个表 testmd5</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `testmd5` ( `id` INT(4) NOT NULL, `name` VARCHAR(20) NOT NULL, `pwd` VARCHAR(50) NOT NULL, PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入一些数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(1,'kuangshen','123456'),(2,'qinjiang','456789')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们要对pwd这一列数据进行加密，语法是：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update testmd5 set pwd = md5(pwd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果单独对某个用户(如kuangshen)的密码加密：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(3,'kuangshen2','123456')update testmd5 set pwd = md5(pwd) where name = 'kuangshen2';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>插入新的数据自动加密</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO testmd5 VALUES(4,'kuangshen3',md5('123456'));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询登录用户信息（md5对比使用，查看用户输入加密后的密码进行比对）</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM testmd5 WHERE `name`='kuangshen' AND pwd=MD5('123456');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ================ 内置函数 ================-- 数值函数abs(x)            -- 绝对值 abs(-10.9) = 10format(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46ceil(x)            -- 向上取整 ceil(10.1) = 11floor(x)        -- 向下取整 floor (10.1) = 10round(x)        -- 四舍五入去整mod(m, n)        -- m%n m mod n 求余 10%3=1pi()            -- 获得圆周率pow(m, n)        -- m^nsqrt(x)            -- 算术平方根rand()            -- 随机数truncate(x, d)    -- 截取d位小数-- 时间日期函数now(), current_timestamp();     -- 当前日期时间current_date();                    -- 当前日期current_time();                    -- 当前时间date('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分time('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分date_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间unix_timestamp();                -- 获得unix时间戳from_unixtime();                -- 从时间戳获得时间-- 字符串函数length(string)            -- string长度，字节char_length(string)        -- string的字符个数substring(str, position [,length])        -- 从str的position开始,取length个字符replace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_strinstr(string ,substring)    -- 返回substring首次在string中出现的位置concat(string [,...])    -- 连接字串charset(str)            -- 返回字串字符集lcase(string)            -- 转换成小写left(string, length)    -- 从string2中的左边起取length个字符load_file(file_name)    -- 从文件读取内容locate(substring, string [,start_position])    -- 同instr,但可指定开始位置lpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为lengthltrim(string)            -- 去除前端空格repeat(string, count)    -- 重复count次rpad(string, length, pad)    --在str后用pad补充,直到长度为lengthrtrim(string)            -- 去除后端空格strcmp(string1 ,string2)    -- 逐字符比较两字串大小-- 聚合函数count()sum();max();min();avg();group_concat()-- 其他常用函数md5();default();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用DQL查询数据</title>
      <link href="/2021/08/14/shi-yong-dql-cha-xun-shu-ju/"/>
      <url>/2021/08/14/shi-yong-dql-cha-xun-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="使用DQL查询数据"><a href="#使用DQL查询数据" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言"><a href="#DQL语言" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段"><a href="#指定查询字段" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句"><a href="#where条件语句" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页"><a href="#排序和分页" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用DQL查询数据-1"><a href="#使用DQL查询数据-1" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言-1"><a href="#DQL语言-1" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段-1"><a href="#指定查询字段-1" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句-1"><a href="#where条件语句-1" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询-1"><a href="#连接查询-1" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页-1"><a href="#排序和分页-1" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询-1"><a href="#子查询-1" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用DQL查询数据-2"><a href="#使用DQL查询数据-2" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言-2"><a href="#DQL语言-2" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段-2"><a href="#指定查询字段-2" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句-2"><a href="#where条件语句-2" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询-2"><a href="#连接查询-2" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页-2"><a href="#排序和分页-2" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询-2"><a href="#子查询-2" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用DQL查询数据-3"><a href="#使用DQL查询数据-3" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言-3"><a href="#DQL语言-3" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段-3"><a href="#指定查询字段-3" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句-3"><a href="#where条件语句-3" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询-3"><a href="#连接查询-3" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页-3"><a href="#排序和分页-3" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询-3"><a href="#子查询-3" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用DQL查询数据-4"><a href="#使用DQL查询数据-4" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言-4"><a href="#DQL语言-4" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段-4"><a href="#指定查询字段-4" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句-4"><a href="#where条件语句-4" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询-4"><a href="#连接查询-4" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页-4"><a href="#排序和分页-4" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询-4"><a href="#子查询-4" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用DQL查询数据-5"><a href="#使用DQL查询数据-5" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言-5"><a href="#DQL语言-5" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段-5"><a href="#指定查询字段-5" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句-5"><a href="#where条件语句-5" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询-5"><a href="#连接查询-5" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页-5"><a href="#排序和分页-5" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询-5"><a href="#子查询-5" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用DQL查询数据-6"><a href="#使用DQL查询数据-6" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言-6"><a href="#DQL语言-6" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段-6"><a href="#指定查询字段-6" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句-6"><a href="#where条件语句-6" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询-6"><a href="#连接查询-6" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页-6"><a href="#排序和分页-6" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询-6"><a href="#子查询-6" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用DQL查询数据-7"><a href="#使用DQL查询数据-7" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言-7"><a href="#DQL语言-7" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段-7"><a href="#指定查询字段-7" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句-7"><a href="#where条件语句-7" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询-7"><a href="#连接查询-7" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页-7"><a href="#排序和分页-7" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询-7"><a href="#子查询-7" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用DQL查询数据-8"><a href="#使用DQL查询数据-8" class="headerlink" title="使用DQL查询数据"></a>使用DQL查询数据</h2><h3 id="DQL语言-8"><a href="#DQL语言-8" class="headerlink" title="DQL语言"></a>DQL语言</h3><p><strong>DQL( Data Query Language 数据查询语言 )</strong></p><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>SELECT语法</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT [ALL | DISTINCT]{* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,...]]}FROM table_name [as table_alias]  [left | right | inner join table_name2]  -- 联合查询  [WHERE ...]  -- 指定结果需满足的条件  [GROUP BY ...]  -- 指定结果按照哪几个字段来分组  [HAVING]  -- 过滤分组的记录必须满足的次要条件  [ORDER BY ...]  -- 指定查询记录按一个或多个条件排序  [LIMIT {[offset,]row_count | row_countOFFSET offset}];   -- 指定查询的记录从哪条至哪条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h3 id="指定查询字段-8"><a href="#指定查询字段-8" class="headerlink" title="指定查询字段"></a>指定查询字段</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 查询表中所有的数据列结果 , 采用 **" \* "** 符号; 但是效率低，不推荐 .-- 查询所有学生信息SELECT * FROM student;-- 查询指定列(学号 , 姓名)SELECT studentno,studentname FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>AS 子句作为别名</p></blockquote><p>作用：</p><ul><li>可给数据列取一个新别名</li><li>可给表取一个新别名</li><li>可把经计算或总结的结果用另一个新名称来代替</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 这里是为列取别名(当然as关键词可以省略)SELECT studentno AS 学号,studentname AS 姓名 FROM student;-- 使用as也可以为表取别名SELECT studentno AS 学号,studentname AS 姓名 FROM student AS s;-- 使用as,为查询结果取一个新名字-- CONCAT()函数拼接字符串SELECT CONCAT('姓名:',studentname) AS 新姓名 FROM student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DISTINCT关键字的使用</p></blockquote><p>作用 : 去掉SELECT查询返回的记录结果中重复的记录 ( 返回所有列的值都相同 ) , 只返回一条</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- # 查看哪些同学参加了考试(学号) 去除重复项SELECT * FROM result; -- 查看考试成绩SELECT studentno FROM result; -- 查看哪些同学参加了考试SELECT DISTINCT studentno FROM result; -- 了解:DISTINCT 去除重复项 , (默认是ALL)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用表达式的列</p></blockquote><p>数据库中的表达式 : 一般由文本值 , 列值 , NULL , 函数和操作符等组成</p><p>应用场景 :</p><ul><li><p>SELECT语句返回结果列中使用</p></li><li><p>SELECT语句中的ORDER BY , HAVING等子句中使用</p></li><li><p>DML语句中的 where 条件语句中使用表达式</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- selcet查询中可以使用表达式SELECT @@auto_increment_increment; -- 查询自增步长SELECT VERSION(); -- 查询版本号SELECT 100*3-1 AS 计算结果; -- 表达式-- 学员考试成绩集体提分一分查看SELECT studentno,StudentResult+1 AS '提分后' FROM result;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>避免SQL返回结果中包含 ‘ . ‘ , ‘ * ‘ 和括号等干扰开发语言程序.</p></li></ul><h3 id="where条件语句-8"><a href="#where条件语句-8" class="headerlink" title="where条件语句"></a>where条件语句</h3><p>作用：用于检索数据表中 符合条件 的记录</p><p>搜索条件可由一个或多个逻辑表达式组成 , 结果一般为真或假.</p><blockquote><p>逻辑操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDT2GTsOdcj7nOuoXTIgEfrNMN8YGygWdrFUTLe41xNqchhfGdq6CHtw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 满足条件的查询(where)SELECT Studentno,StudentResult FROM result;-- 查询考试成绩在95-100之间的SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 AND StudentResult&lt;=100;-- AND也可以写成 &amp;&amp;SELECT Studentno,StudentResultFROM resultWHERE StudentResult&gt;=95 &amp;&amp; StudentResult&lt;=100;-- 模糊查询(对应的词:精确查询)SELECT Studentno,StudentResultFROM resultWHERE StudentResult BETWEEN 95 AND 100;-- 除了1000号同学,要其他同学的成绩SELECT studentno,studentresultFROM resultWHERE studentno!=1000;-- 使用NOTSELECT studentno,studentresultFROM resultWHERE NOT studentno=1000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询 ：比较操作符</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDk8xl58oP6ch67ZibicU1fn2O7Lk4uLZyiaG8p8Zhkl4oF1GUibbPF0iaxIQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>注意：</p><ul><li>数值数据类型的记录之间才能进行算术运算 ;</li><li>相同数据类型的数据之间才能进行比较 ;</li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 模糊查询 between and \ like \ in \ null-- =============================================-- LIKE-- =============================================-- 查询姓刘的同学的学号及姓名-- like结合使用的通配符 : % (代表0到任意个字符) _ (一个字符)SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘%';-- 查询姓刘的同学,后面只有一个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘_';-- 查询姓刘的同学,后面只有两个字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '刘__';-- 查询姓名中含有 嘉 字的SELECT studentno,studentname FROM studentWHERE studentname LIKE '%嘉%';-- 查询姓名中含有特殊字符的需要使用转义符号 '\'-- 自定义转义符关键字: ESCAPE ':'-- =============================================-- IN-- =============================================-- 查询学号为1000,1001,1002的学生姓名SELECT studentno,studentname FROM studentWHERE studentno IN (1000,1001,1002);-- 查询地址在北京,南京,河南洛阳的学生SELECT studentno,studentname,address FROM studentWHERE address IN ('北京','南京','河南洛阳');-- =============================================-- NULL 空-- =============================================-- 查询出生日期没有填写的同学-- 不能直接写=NULL , 这是代表错误的 , 用 is nullSELECT studentname FROM studentWHERE BornDate IS NULL;-- 查询出生日期填写的同学SELECT studentname FROM studentWHERE BornDate IS NOT NULL;-- 查询没有写家庭住址的同学(空字符串不等于null)SELECT studentname FROM studentWHERE Address='' OR Address IS NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连接查询-8"><a href="#连接查询-8" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7LwfjFbCQXic0pcE21lUFGvDowQf1HHaYIicELYKnU9kDeaFHnfx0GYW6AsEwoTySywn91ia8Wz2sXiaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*连接查询   如需要多张数据表的数据进行查询,则可通过连接运算符实现多个查询内连接 inner join   查询两个表中的结果集中的交集外连接 outer join   左外连接 left join       (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)   右外连接 right join       (以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)       等值连接和非等值连接自连接*/-- 查询参加了考试的同学信息(学号,学生姓名,科目编号,分数)SELECT * FROM student;SELECT * FROM result;/*思路:(1):分析需求,确定查询的列来源于两个类,student result,连接查询(2):确定使用哪种连接查询?(内连接)*/SELECT s.studentno,studentname,subjectno,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentno-- 右连接(也可实现)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sRIGHT JOIN result rON r.studentno = s.studentno-- 等值连接SELECT s.studentno,studentname,subjectno,StudentResultFROM student s , result rWHERE r.studentno = s.studentno-- 左连接 (查询了所有同学,不考试的也会查出来)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentno-- 查一下缺考的同学(左连接应用场景)SELECT s.studentno,studentname,subjectno,StudentResultFROM student sLEFT JOIN result rON r.studentno = s.studentnoWHERE StudentResult IS NULL-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*自连接   数据表与自身进行连接需求:从一个包含栏目ID , 栏目名称和父栏目ID的表中    查询父栏目名称和其他子栏目名称*/-- 创建一个表CREATE TABLE `category` (`categoryid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主题id',`pid` INT(10) NOT NULL COMMENT '父id',`categoryName` VARCHAR(50) NOT NULL COMMENT '主题名字',PRIMARY KEY (`categoryid`)) ENGINE=INNODB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8-- 插入数据INSERT INTO `category` (`categoryid`, `pid`, `categoryName`)VALUES('2','1','信息技术'),('3','1','软件开发'),('4','3','数据库'),('5','1','美术设计'),('6','3','web开发'),('7','5','ps技术'),('8','2','办公信息');-- 编写SQL语句,将栏目的父子关系呈现出来 (父栏目名称,子栏目名称)-- 核心思想:把一张表看成两张一模一样的表,然后将这两张表连接查询(自连接)SELECT a.categoryName AS '父栏目',b.categoryName AS '子栏目'FROM category AS a,category AS bWHERE a.`categoryid`=b.`pid`-- 思考题:查询参加了考试的同学信息(学号,学生姓名,科目名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON sub.subjectno = r.subjectno-- 查询学员及所属的年级(学号,学生姓名,年级名)SELECT studentno AS 学号,studentname AS 学生姓名,gradename AS 年级名称FROM student sINNER JOIN grade gON s.`GradeId` = g.`GradeID`-- 查询科目及所属的年级(科目名称,年级名称)SELECT subjectname AS 科目名称,gradename AS 年级名称FROM SUBJECT subINNER JOIN grade gON sub.gradeid = g.gradeid-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序和分页-8"><a href="#排序和分页-8" class="headerlink" title="排序和分页"></a>排序和分页</h3><p>测试</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 排序 ================语法 : ORDER BY   ORDER BY 语句用于根据指定的列对结果集进行排序。   ORDER BY 语句默认按照ASC升序对记录进行排序。   如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。   */-- 查询 数据库结构-1 的所有考试结果(学号 学生姓名 科目名称 成绩)-- 按成绩降序排序SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC/*============== 分页 ================语法 : SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset好处 : (用户体验,网络传输,查询压力)推导:   第一页 : limit 0,5   第二页 : limit 5,5   第三页 : limit 10,5   ......   第N页 : limit (pageNo-1)*pageSzie,pageSzie   [pageNo:页码,pageSize:单页面显示条数]   */-- 每页显示5条数据SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='数据库结构-1'ORDER BY StudentResult DESC , studentnoLIMIT 0,5-- 查询 JAVA第一学年 课程成绩前10名并且分数大于80的学生信息(学号,姓名,课程名,分数)SELECT s.studentno,studentname,subjectname,StudentResultFROM student sINNER JOIN result rON r.studentno = s.studentnoINNER JOIN `subject` subON r.subjectno = sub.subjectnoWHERE subjectname='JAVA第一学年'ORDER BY StudentResult DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子查询-8"><a href="#子查询-8" class="headerlink" title="子查询"></a>子查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">/*============== 子查询 ================什么是子查询?   在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句   嵌套查询可由多个子查询组成,求解的方式是由里及外;   子查询返回的结果一般都是集合,故而建议使用IN关键字;*/-- 查询 数据库结构-1 的所有考试结果(学号,科目编号,成绩),并且成绩降序排列-- 方法一:使用连接查询SELECT studentno,r.subjectno,StudentResultFROM result rINNER JOIN `subject` subON r.`SubjectNo`=sub.`SubjectNo`WHERE subjectname = '数据库结构-1'ORDER BY studentresult DESC;-- 方法二:使用子查询(执行顺序:由里及外)SELECT studentno,subjectno,StudentResultFROM resultWHERE subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '数据库结构-1')ORDER BY studentresult DESC;-- 查询课程为 高等数学-2 且分数不小于80分的学生的学号和姓名-- 方法一:使用连接查询SELECT s.studentno,studentnameFROM student sINNER JOIN result rON s.`StudentNo` = r.`StudentNo`INNER JOIN `subject` subON sub.`SubjectNo` = r.`SubjectNo`WHERE subjectname = '高等数学-2' AND StudentResult&gt;=80-- 方法二:使用连接查询+子查询-- 分数不小于80分的学生的学号和姓名SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80-- 在上面SQL基础上,添加需求:课程为 高等数学-2SELECT r.studentno,studentname FROM student sINNER JOIN result r ON s.`StudentNo`=r.`StudentNo`WHERE StudentResult&gt;=80 AND subjectno=(   SELECT subjectno FROM `subject`   WHERE subjectname = '高等数学-2')-- 方法三:使用子查询-- 分步写简单sql语句,然后将其嵌套起来SELECT studentno,studentname FROM student WHERE studentno IN(   SELECT studentno FROM result WHERE StudentResult&gt;=80 AND subjectno=(       SELECT subjectno FROM `subject` WHERE subjectname = '高等数学-2'  ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DML语言</title>
      <link href="/2021/08/14/dml-yu-yan/"/>
      <url>/2021/08/14/dml-yu-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h2><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><blockquote><p>外键概念</p></blockquote><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。</p><p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p><p><strong>外键作用</strong></p><p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p><blockquote><p>创建外键</p></blockquote><p>建表时指定外键约束</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建外键的方式一 : 创建子表同时创建外键-- 年级表 (id\年级名称)CREATE TABLE `grade` (`gradeid` INT(10) NOT NULL AUTO_INCREMENT COMMENT '年级ID',`gradename` VARCHAR(50) NOT NULL COMMENT '年级名称',PRIMARY KEY (`gradeid`)) ENGINE=INNODB DEFAULT CHARSET=utf8-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)CREATE TABLE `student` (`studentno` INT(4) NOT NULL COMMENT '学号',`studentname` VARCHAR(20) NOT NULL DEFAULT '匿名' COMMENT '姓名',`sex` TINYINT(1) DEFAULT '1' COMMENT '性别',`gradeid` INT(10) DEFAULT NULL COMMENT '年级',`phoneNum` VARCHAR(50) NOT NULL COMMENT '手机',`address` VARCHAR(255) DEFAULT NULL COMMENT '地址',`borndate` DATETIME DEFAULT NULL COMMENT '生日',`email` VARCHAR(50) DEFAULT NULL COMMENT '邮箱',`idCard` VARCHAR(18) DEFAULT NULL COMMENT '身份证号',PRIMARY KEY (`studentno`),KEY `FK_gradeid` (`gradeid`),CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade` (`gradeid`)) ENGINE=INNODB DEFAULT CHARSET=utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建表后修改</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建外键方式二 : 创建子表完毕后,修改子表添加外键ALTER TABLE `student`ADD CONSTRAINT `FK_gradeid` FOREIGN KEY (`gradeid`) REFERENCES `grade` (`gradeid`);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>删除外键</p></blockquote><p>操作：删除 grade 表，发现报错</p><p><strong>注意</strong> : 删除具有主外键关系的表时 , 要先删子表 , 后删主表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除外键ALTER TABLE student DROP FOREIGN KEY FK_gradeid;-- 发现执行完上面的,索引还在,所以还要删除索引-- 注:这个索引是建立外键的时候默认生成的ALTER TABLE student DROP INDEX FK_gradeid;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DML语言-1"><a href="#DML语言-1" class="headerlink" title="DML语言"></a>DML语言</h3><p><strong>数据库意义</strong> ： 数据存储、数据管理</p><p><strong>管理数据库数据方法：</strong></p><ul><li>通过SQLyog等管理工具管理数据库数据</li><li>通过<strong>DML语句</strong>管理数据库数据</li></ul><p><strong>DML语言</strong>  ：数据操作语言</p><ul><li><p>用于操作数据库对象中所包含的数据</p></li><li><p>包括 :</p></li><li><ul><li>INSERT (添加数据语句)</li><li>UPDATE (更新数据语句)</li><li>DELETE (删除数据语句)</li></ul></li></ul><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><blockquote><p>INSERT命令</p></blockquote><p><strong>语法：</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES('值1','值2','值3')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意 :</strong> </p><ul><li>字段或值之间用英文逗号隔开 .</li><li>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</li><li>可同时插入多条数据 , values 后用英文逗号隔开 .</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 使用语句如何增加语句?-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES('值1','值2','值3')INSERT INTO grade(gradename) VALUES ('大一');-- 主键自增,那能否省略呢?INSERT INTO grade VALUES ('大二');-- 查询:INSERT INTO grade VALUE ('大二')错误代码：1136Column count doesn`t match value count at row 1-- 结论:'字段1,字段2...'该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致.-- 一次插入多条数据INSERT INTO grade(gradename) VALUES ('大三'),('大四');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>练习题目</strong> </p><p>自己使用INSERT语句为课程表subject添加数据 . 使用到外键.</p><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><blockquote><p>update命令</p></blockquote><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE 表名 SET column_name=value [,column_name2=value2,...] [WHERE condition];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意 :</strong> </p><ul><li>column_name 为要更改的数据列</li><li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</li><li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li></ul><blockquote><p>where条件子句</p></blockquote><p>可以简单的理解为 : 有条件地从表中筛选数据</p><table><thead><tr><th>运算符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>5=6</td><td>false</td></tr><tr><td>&lt;&gt;或 ！ =</td><td>不等于</td><td>5!=6</td><td>true</td></tr><tr><td>&gt;</td><td>大于</td><td>5&gt;6</td><td>false</td></tr><tr><td>&lt;</td><td>小于</td><td>5&lt;6</td><td>true</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>5&lt;=6</td><td>false</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>BETWEEN 5 AND 10</td><td>true</td></tr><tr><td>BETWEEN</td><td>在某个范围之间</td><td>5 &gt;1 AND 1 &gt; 2</td><td></td></tr><tr><td>AND</td><td>并且</td><td>5 &gt; 1 OR 1 &gt; 2</td><td>false</td></tr><tr><td>OR</td><td>或</td><td></td><td>true</td></tr></tbody></table><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 修改年级信息UPDATE grade SET gradename = '高中' WHERE gradeid = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote><p>DELETE命令</p></blockquote><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DELETE FROM 表名 [WHERE condition];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：condition为筛选条件 , 如不指定则删除该表的所有列数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除最后一个数据DELETE FROM grade WHERE gradeid = 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>TRUNCATE命令</p></blockquote><p>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 ;</p><p>语法：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">TRUNCATE [TABLE] table_name;-- 清空年级表TRUNCATE grade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：区别于DELETE命令</strong></p><ul><li><p>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p></li><li><p>不同 :</p></li><li><ul><li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li><li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li></ul></li></ul><p>测试：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建一个测试表CREATE TABLE `test` (`id` INT(4) NOT NULL AUTO_INCREMENT,`coll` VARCHAR(20) NOT NULL,PRIMARY KEY (`id`)) ENGINE=INNODB DEFAULT CHARSET=utf8-- 插入几个测试数据INSERT INTO test(coll) VALUES('row1'),('row2'),('row3');-- 删除表数据(不带where条件的delete)DELETE FROM test;-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.-- 删除表数据(truncate)TRUNCATE TABLE test;-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.-- 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后-- InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)-- MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库操作</title>
      <link href="/2021/08/14/shu-ju-ku-cao-zuo/"/>
      <url>/2021/08/14/shu-ju-ku-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="结构化查询语句分类"><a href="#结构化查询语句分类" class="headerlink" title="结构化查询语句分类"></a>结构化查询语句分类</h3><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QOGpDicLzwS6NJVAeLECu2rx2qboGU36S9hXLov0x0c5vzZAceySSXnA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><h3 id="数据库操作-1"><a href="#数据库操作-1" class="headerlink" title="数据库操作"></a>数据库操作</h3><blockquote><p>命令行操作数据库</p></blockquote><p>创建数据库 :  create database [if not exists] 数据库名;</p><p>删除数据库 : drop database [if exists] 数据库名;</p><p>查看数据库 : show databases;</p><p>使用数据库 : use 数据库名;</p><blockquote><p>对比工具操作数据库</p></blockquote><p><strong>学习方法：</strong></p><ul><li>对照SQLyog工具自动生成的语句学习</li><li>固定语法中的单词需要记忆</li><li><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Q2ITxibRRsQuuqibHorhqzYI83QYKRUVpMLCPA1chKQ39eUFQibJ2fwWFg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></li></ul><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>属于DDL的一种，语法 :</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">create table <span class="token punctuation">[</span>if not exists<span class="token punctuation">]</span> <span class="token variable"><span class="token variable">`</span>表名<span class="token variable">`</span></span><span class="token punctuation">(</span>   <span class="token string">'字段名1'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span>,   <span class="token string">'字段名2'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span>,  <span class="token comment">#...</span>   <span class="token string">'字段名n'</span> 列类型 <span class="token punctuation">[</span>属性<span class="token punctuation">]</span><span class="token punctuation">[</span>索引<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>表类型<span class="token punctuation">]</span><span class="token punctuation">[</span>表字符集<span class="token punctuation">]</span><span class="token punctuation">[</span>注释<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明 :</strong> 反引号用于区别MySQL保留字与普通字符而引入的 (键盘esc下面的键).</p><h3 id="数据值和列类型"><a href="#数据值和列类型" class="headerlink" title="数据值和列类型"></a>数据值和列类型</h3><p>列类型 : 规定数据库中该列存放的数据类型</p><blockquote><p>数值类型</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QLXRrfmQjbUt3O7sLw0KKv9UtriaTr60JspXIZ69HkeOiagz86CE3a9Wg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>字符串类型</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QsjOPftNfn1ibXSP8OIYnsJaaPC8da61jCzcbdkqbApibQWgQ7KBjYbuw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>日期和时间型数值类型</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Qcib3OwGtWEJkEE2biaa4jT3xokY1UicPT1MQcQNsa1EsjiaIqM1vvyUPjg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><blockquote><p>NULL值</p></blockquote><ul><li>理解为 “没有值” 或 “未知值”</li><li>不要用NULL进行算术运算 , 结果仍为NULL</li></ul><h3 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h3><p><strong>UnSigned</strong></p><ul><li>无符号的</li><li>声明该数据列不允许负数 .</li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_InCrement</strong></p><ul><li><p>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</p></li><li><p>通常用于设置<strong>主键</strong> , 且为整数类型</p></li><li><p>可定义起始值和步长</p></li><li><ul><li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li><li>SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的</li><li>用于设置默认值</li><li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-- 目标 <span class="token builtin class-name">:</span> 创建一个school数据库-- 创建学生表<span class="token punctuation">(</span>列,字段<span class="token punctuation">)</span>-- 学号int 登录密码varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> 姓名,性别varchar<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>,出生日期<span class="token punctuation">(</span>datatime<span class="token punctuation">)</span>,家庭住址,email-- 创建表之前 , 一定要先选择数据库CREATE TABLE IF NOT EXISTS <span class="token variable"><span class="token variable">`</span>student<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> int<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'学号'</span>,<span class="token variable"><span class="token variable">`</span>name<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'匿名'</span> COMMENT <span class="token string">'姓名'</span>,<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'123456'</span> COMMENT <span class="token string">'密码'</span>,<span class="token variable"><span class="token variable">`</span>sex<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">'男'</span> COMMENT <span class="token string">'性别'</span>,<span class="token variable"><span class="token variable">`</span>birthday<span class="token variable">`</span></span> datetime DEFAULT NULL COMMENT <span class="token string">'生日'</span>,<span class="token variable"><span class="token variable">`</span>address<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'地址'</span>,<span class="token variable"><span class="token variable">`</span>email<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'邮箱'</span>,PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token assign-left variable">ENGINE</span><span class="token operator">=</span>InnoDB DEFAULT <span class="token assign-left variable">CHARSET</span><span class="token operator">=</span>utf8-- 查看数据库的定义SHOW CREATE DATABASE school<span class="token punctuation">;</span>-- 查看数据表的定义SHOW CREATE TABLE student<span class="token punctuation">;</span>-- 显示表结构DESC student<span class="token punctuation">;</span>  -- 设置严格检查模式<span class="token punctuation">(</span>不能容错了<span class="token punctuation">)</span>SET <span class="token assign-left variable">sql_mode</span><span class="token operator">=</span><span class="token string">'STRICT_TRANS_TABLES'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据表的类型"><a href="#数据表的类型" class="headerlink" title="数据表的类型"></a>数据表的类型</h3><blockquote><p>设置数据表的类型</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE 表名(   -- 省略一些代码   -- Mysql注释   -- 1. # 单行注释   -- 2. /*...*/ 多行注释)ENGINE = MyISAM (or InnoDB)-- 查看mysql所支持的引擎类型 (表类型)SHOW ENGINES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySQL的数据表的类型 : <strong>MyISAM</strong> , <strong>InnoDB</strong> , HEAP , BOB , CSV等…</p><p>常见的 MyISAM 与 InnoDB 类型：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15QpmSFMlJ4fDFdGoWOsTuNfFZq0XKW1GyibdZHU2F73DTezMYM1K0dc2A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>经验 ( 适用场合 )  :</p><ul><li>适用 MyISAM : 节约空间及相应速度</li><li>适用 InnoDB : 安全性 , 事务处理及多用户操作数据表</li></ul><blockquote><p>数据表的存储位置</p></blockquote><ul><li><p>MySQL数据表以文件方式存放在磁盘中</p></li><li><ul><li>包括表文件 , 数据文件 , 以及数据库的选项文件</li><li>位置 : Mysql安装目录\data\下存放数据表 . 目录名对应数据库名 , 该目录下文件名对应数据表 .</li></ul></li><li><p>注意 :</p></li><li><ul><li><p>* . frm – 表结构定义文件</p></li><li><p>* . MYD – 数据文件 ( data )</p></li><li><p>* . MYI – 索引文件 ( index )</p></li><li><p>InnoDB类型数据表只有一个 *.frm文件 , 以及上一级目录的ibdata1文件</p></li><li><p>MyISAM类型数据表对应三个文件 :</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JZX1D0neUIMjSFiazUGK15Q5tk8XtNtNGnUgevhFSzwTUrO7AmbXZFumTibt43SDII9nOQY97OtQdQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p></li></ul></li></ul><blockquote><p>设置数据表字符集</p></blockquote><p>我们可为数据库,数据表,数据列设定不同的字符集，设定方法 :</p><ul><li>创建时通过命令来设置 , 如 : CREATE TABLE 表名()CHARSET = utf8;</li><li>如无设定 , 则根据MySQL数据库配置文件 my.ini 中的参数设定</li></ul><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><blockquote><p>修改表 ( ALTER TABLE )</p></blockquote><p>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</p><p>添加字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]</p><p>修改字段 :</p><ul><li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]</li><li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</li></ul><p>删除字段 :  ALTER TABLE 表名 DROP 字段名</p><blockquote><p>删除数据表</p></blockquote><p>语法：DROP TABLE [IF EXISTS] 表名</p><ul><li>IF EXISTS为可选 , 判断是否存在该数据表</li><li>如删除不存在的数据表会抛出错误</li></ul><blockquote><p>其他</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！<span class="token number">2</span>. 每个库目录存在一个保存当前数据库的选项文件db.opt。<span class="token number">3</span>. 注释：  单行注释 <span class="token comment"># 注释内容</span>  多行注释 /* 注释内容 */  单行注释 -- 注释内容       <span class="token punctuation">(</span>标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）<span class="token punctuation">)</span>   <span class="token number">4</span>. 模式通配符：  _   任意单个字符  %   任意多个字符，甚至包括零字符  单引号需要进行转义 <span class="token punctuation">\</span>'   <span class="token number">5</span>. CMD命令行内的语句结束符可以为 <span class="token string">";"</span>, <span class="token string">"\G"</span>, <span class="token string">"\g"</span>，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。<span class="token number">6</span>. SQL对大小写不敏感 （关键字）<span class="token number">7</span>. 清除已有语句：<span class="token punctuation">\</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识MySQL</title>
      <link href="/2021/08/14/chu-shi-mysql/"/>
      <url>/2021/08/14/chu-shi-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="初识MySQL"><a href="#初识MySQL" class="headerlink" title="初识MySQL"></a>初识MySQL</h2><blockquote><p>为什么学习数据库</p></blockquote><p>1、岗位技能需求</p><p>2、现在的世界,得数据者得天下</p><p>3、存储数据的方法</p><p>4、程序,网站中,大量数据如何长久保存?</p><p>5、<strong>数据库是几乎软件体系中最核心的一个存在。</strong></p><blockquote><p>什么是数据库</p></blockquote><p>数据库 ( <strong>DataBase</strong> , 简称<strong>DB</strong> )</p><p><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库”</p><p><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…</p><p><strong>数据库总览 :</strong></p><ul><li><p>关系型数据库 ( SQL )</p></li><li><ul><li>MySQL , Oracle , SQL Server , SQLite , DB2 , …</li><li>关系型数据库通过外键关联来建立表与表之间的关系</li></ul></li><li><p>非关系型数据库 ( NOSQL )</p></li><li><ul><li>Redis , MongoDB , …</li><li>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定</li></ul></li></ul><blockquote><p>什么是DBMS</p></blockquote><p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p><p>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据</p><p>为什么要说这个呢?</p><p>因为我们要学习的MySQL应该算是一个数据库管理系统.</p><blockquote><p>MySQL简介</p></blockquote><p><strong>概念 :</strong> 是现在<strong>流行</strong>的<strong>开源</strong>的,<strong>免费</strong>的 <strong>关系型</strong>数据库</p><p><strong>历史 :</strong> 由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。</p><p><strong>特点 :</strong> </p><ul><li>免费 , 开源数据库</li><li>小巧 , 功能齐全</li><li>使用便捷</li><li>可运行于Windows或Linux操作系统</li><li>可适用于中小型甚至大型网站应用</li></ul><p><strong>官网 :</strong> <strong><a href="https://www.mysql.com/">https://www.mysql.com/</a></strong></p><blockquote><p>安装MySQL</p></blockquote><p><strong>这里建议大家使用压缩版,安装快,方便.不复杂.</strong></p><p><strong>软件下载</strong></p><p>mysql5.7 64位下载地址:</p><p><a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip</a></p><p>电脑是64位的就下载使用64位版本的！</p><blockquote><p>安装步骤</p></blockquote><p>1、下载后得到zip压缩包.</p><p>2、解压到自己想要安装到的目录，本人解压到的是D:\Environment\mysql-5.7.19</p><p>3、添加环境变量：我的电脑-&gt;属性-&gt;高级-&gt;环境变量</p><pre class="line-numbers language-none"><code class="language-none">选择PATH,在其后面添加: 你的mysql 安装文件下面的bin文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、编辑 my.ini 文件 ,注意替换路径位置</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span><span class="token key attr-name">basedir</span><span class="token punctuation">=</span><span class="token value attr-value">D:\Program Files\mysql-5.7\</span><span class="token key attr-name">datadir</span><span class="token punctuation">=</span><span class="token value attr-value">D:\Program Files\mysql-5.7\data\</span><span class="token key attr-name">port</span><span class="token punctuation">=</span><span class="token value attr-value">3306</span>skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、启动管理员模式下的CMD，并将路径切换至mysql下的bin目录，然后输入mysqld –install (安装mysql)</p><p>6、再输入  mysqld –initialize-insecure –user=mysql 初始化数据文件</p><p>7、然后再次启动mysql 然后用命令 mysql –u root –p 进入mysql管理界面（密码可为空）</p><p>8、进入界面后更改root密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update mysql.user <span class="token builtin class-name">set</span> <span class="token assign-left variable">authentication_string</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span> and Host <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9、刷新权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、修改 my.ini文件删除最后一句skip-grant-tables</p><p>11、重启mysql即可正常使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net stop mysqlnet start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>12、连接上测试出现以下结果就安装好了</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一步步去做 , 理论上是没有任何问题的 .</p><p>如果您以前装过,现在需要重装,一定要将环境清理干净 .</p><p>好了,到这里大家都装好了,因为刚接触,所以我们先不学习命令.</p><p>这里给大家推荐一个工具 : <strong>SQLyog</strong> .</p><p>即便有了可视化工具,可是基本的DOS命名大家还是要记住!</p><blockquote><p>连接数据库</p></blockquote><p>打开MySQL命令窗口</p><ul><li>在DOS命令行窗口进入 <strong>安装目录\mysql\bin</strong></li><li>可设置环境变量，设置了环境变量，可以在任意目录打开！</li></ul><p><strong>连接数据库语句 :</strong> mysql -h 服务器主机地址 -u 用户名 -p 用户密码</p><p>注意 : -p后面不能加空格,否则会被当做密码的内容,导致登录失败 !</p><p><strong>几个基本的数据库操作命令 :</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">update user <span class="token builtin class-name">set</span> <span class="token assign-left variable">password</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span>where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span> 修改密码flush privileges<span class="token punctuation">;</span> 刷新数据库show databases<span class="token punctuation">;</span> 显示所有数据库use dbname；打开某个数据库show tables<span class="token punctuation">;</span> 显示数据库mysql中所有的表describe user<span class="token punctuation">;</span> 显示表mysql数据库中user表的列信息create database name<span class="token punctuation">;</span> 创建数据库use databasename<span class="token punctuation">;</span> 选择数据库<span class="token builtin class-name">exit</span><span class="token punctuation">;</span> 退出Mysql? 命令关键词 <span class="token builtin class-name">:</span> 寻求帮助-- 表示注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算面试题</title>
      <link href="/2021/08/14/yun-ji-suan-mian-shi-ti/"/>
      <url>/2021/08/14/yun-ji-suan-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h5 id="1、简述raid0、raid1、raid5三种工作模式的工作原理及特点"><a href="#1、简述raid0、raid1、raid5三种工作模式的工作原理及特点" class="headerlink" title="1、简述raid0、raid1、raid5三种工作模式的工作原理及特点"></a>1、简述raid0、raid1、raid5三种工作模式的工作原理及特点</h5><ul><li>作用：容错、提升读写速率<ul><li>Raid0：条带集、磁盘使用2+ 利用率100% 优缺点：读写速度快、不容错</li><li>Raid1：镜像集、磁盘使用2+ 利用率50%    优缺点：读写速率一般，容错</li><li>Raid5：带奇偶检验的条带集、磁盘使用3+    利用率（n-1）/n    优缺点：读写速度快，容错、允许坏1块盘</li></ul></li></ul><h5 id="2、将-url-local-test目录下大于100k小于500k的文件转移到-tmp目录下"><a href="#2、将-url-local-test目录下大于100k小于500k的文件转移到-tmp目录下" class="headerlink" title="2、将/url/local/test目录下大于100k小于500k的文件转移到/tmp目录下"></a>2、将/url/local/test目录下大于100k小于500k的文件转移到/tmp目录下</h5><ul><li>find /url/local/test  -size +100k -a -size -500k  -exec mv -r{} /tmp;</li></ul><h5 id="3、软链接和硬链接的区别"><a href="#3、软链接和硬链接的区别" class="headerlink" title="3、软链接和硬链接的区别"></a>3、软链接和硬链接的区别</h5><ul><li>1.定义不同<ul><li>软链接又叫符号链接，这个文件包含了另一个文件的路径名。可以是任意文件或目录，可以链接不同文件系统的文件。</li><li>硬链接就是一个文件的一个或多个文件名。把文件名和计算机文件系统使用的节点号链接起来。因此我们可以用多个文件名与同一个文件进行链接，这些文件名可以载同一目录或不同目录。</li></ul></li><li>2.限制不同<ul><li>硬链接只能对已存在的文件进行创建，不能交叉文件系统进行硬链接的创建</li><li>软链接可对不存在的文件或目录创建软链接；可交叉文件系统；</li></ul></li><li>3.创建的方式不同<ul><li>​    硬链接不能对目录进行创建，只可对文件创建</li><li>软链接可对文件或目录创建</li></ul></li><li>4.影响不同<ul><li>删除一个硬链接文件并不影响其他有相同inode号的文件。</li><li>删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软链接被称为死链接</li></ul></li></ul><h5 id="4、ps-aux-中的VSZ代表什么意思？RSS代表什么意思？"><a href="#4、ps-aux-中的VSZ代表什么意思？RSS代表什么意思？" class="headerlink" title="4、ps aux 中的VSZ代表什么意思？RSS代表什么意思？"></a>4、ps aux 中的VSZ代表什么意思？RSS代表什么意思？</h5><ul><li>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND<ul><li>VSZ：显示进程使用的虚拟内存量（KB）</li><li>RSS：表示该进程占用的固定内存量（KB）<ul><li>驻留中叶的的数量</li></ul></li></ul></li></ul><h5 id="5、保存当前磁盘分区的分区表，dd命令是个强大的命令，在复制的同时进行转换，请写出具体命令"><a href="#5、保存当前磁盘分区的分区表，dd命令是个强大的命令，在复制的同时进行转换，请写出具体命令" class="headerlink" title="5、保存当前磁盘分区的分区表，dd命令是个强大的命令，在复制的同时进行转换，请写出具体命令"></a>5、保存当前磁盘分区的分区表，dd命令是个强大的命令，在复制的同时进行转换，请写出具体命令</h5><ul><li>dd if=/dev/sda of=/test.txt bs=1M count=512</li></ul><h5 id="6、6块300G的硬盘做RAID5，新的设备容量是多大？"><a href="#6、6块300G的硬盘做RAID5，新的设备容量是多大？" class="headerlink" title="6、6块300G的硬盘做RAID5，新的设备容量是多大？"></a>6、6块300G的硬盘做RAID5，新的设备容量是多大？</h5><ul><li>raid5    1    当备用盘</li><li>（6-1）*300G = 1500G</li></ul><h5 id="7、假设服务器具有6块900G本地磁盘，单块磁盘IO约为150M-S，现对此盘进行RAID划分，简述理论6块盘做成RAID5级别后实际存储大小、实际IO为多少？"><a href="#7、假设服务器具有6块900G本地磁盘，单块磁盘IO约为150M-S，现对此盘进行RAID划分，简述理论6块盘做成RAID5级别后实际存储大小、实际IO为多少？" class="headerlink" title="7、假设服务器具有6块900G本地磁盘，单块磁盘IO约为150M/S，现对此盘进行RAID划分，简述理论6块盘做成RAID5级别后实际存储大小、实际IO为多少？"></a>7、假设服务器具有6块900G本地磁盘，单块磁盘IO约为150M/S，现对此盘进行RAID划分，简述理论6块盘做成RAID5级别后实际存储大小、实际IO为多少？</h5><ul><li>实际大小：900*（6-2） = 3600G</li><li>实际IO：写的速率 150M/S  （小于。理论上写的过程中，RAID5会进行校验耗费时间） 150M/S*4 = 600M/S</li><li>因为读取数据的时候校验位的盘是需要读取的所以实际：读的速率是（6-1）*150 = 750M/S </li></ul><h5 id="8、请简要描述linux系统下源代码编译方式安装软件的大致步骤"><a href="#8、请简要描述linux系统下源代码编译方式安装软件的大致步骤" class="headerlink" title="8、请简要描述linux系统下源代码编译方式安装软件的大致步骤"></a>8、请简要描述linux系统下源代码编译方式安装软件的大致步骤</h5><ol><li>基础环境部署：<ul><li>关闭防火墙、selinux、相关环境（php、java、编译环境）</li></ul></li><li>下载、解压相关安装包</li><li>配置相关的软件安装路径</li><li>编译</li><li>安装</li></ol><h5 id="9、列出当前系统中所有的网络连接（包含进程名），请写出完整操作命令"><a href="#9、列出当前系统中所有的网络连接（包含进程名），请写出完整操作命令" class="headerlink" title="9、列出当前系统中所有的网络连接（包含进程名），请写出完整操作命令"></a>9、列出当前系统中所有的网络连接（包含进程名），请写出完整操作命令</h5><ul><li>netstart -antupl<ul><li>a        all        所有</li><li>n        name  名称</li><li>t         tcp</li><li>u         udp</li><li>p        pid</li><li>l         监听（list  列出）</li></ul></li></ul><h5 id="10、实时抓取并显示当前系统中tcp80端口的网络数据信息，请写出完整操作命令"><a href="#10、实时抓取并显示当前系统中tcp80端口的网络数据信息，请写出完整操作命令" class="headerlink" title="10、实时抓取并显示当前系统中tcp80端口的网络数据信息，请写出完整操作命令"></a>10、实时抓取并显示当前系统中tcp80端口的网络数据信息，请写出完整操作命令</h5><ul><li>tcpdump  host 127.0.0.1 tcp prot 80</li></ul><h5 id="11、linux中你常用的系统命令说5个"><a href="#11、linux中你常用的系统命令说5个" class="headerlink" title="11、linux中你常用的系统命令说5个"></a>11、linux中你常用的系统命令说5个</h5><ul><li>ls</li><li>mkdir</li><li>touch</li><li>cat</li><li>useradd ….</li></ul><h5 id="12、关闭swap分区"><a href="#12、关闭swap分区" class="headerlink" title="12、关闭swap分区"></a>12、关闭swap分区</h5><ul><li>swapoff -a        关闭所有的交换分区</li><li>swapoff /dev/sde 关闭sde交换分区</li><li>/etc/fstab  注释掉改文件中swap分区相关信息</li></ul><h5 id="13、系统安全加固"><a href="#13、系统安全加固" class="headerlink" title="13、系统安全加固"></a>13、系统安全加固</h5><ol><li><p>密码策略</p><p>修改密码（相对复杂、定时修改密码、密码不要轻易告诉别人）</p></li><li><p>权限ugo</p><p>锁定系统中不必要的用户和密码（锁定之前需要去备份/etc/password  /etc/shadow）禁用无关组 禁止root用户远程登录</p></li><li><p>加固tcp/ip协议的设置</p><p>/etc/systcl.conf 文件的相应权限</p></li><li><p>默认权限和umask权限</p><p>​    022</p></li></ol><h5 id="14、硬件性能测试用过什么"><a href="#14、硬件性能测试用过什么" class="headerlink" title="14、硬件性能测试用过什么"></a>14、硬件性能测试用过什么</h5><ul><li><p>df -h 查看磁盘使用情况</p><ul><li>hdparm 命令测试读写的速率<ul><li>hdparm -T /dev/sda</li><li>linux中几块盘求平均值就是磁盘的平均读取速率</li></ul></li></ul></li><li><p>对IO进行简单的测试 top/iostat    查看wa% 及写硬盘的速率</p><ul><li>dd if=dev/zore of=test bs=1M count=4096</li><li>wa  等待输入输出的CPU时间百分比</li><li>top -n1  每秒cpu</li></ul></li></ul><h5 id="15、临时调整和永久生效系统内核参数在哪里调"><a href="#15、临时调整和永久生效系统内核参数在哪里调" class="headerlink" title="15、临时调整和永久生效系统内核参数在哪里调"></a>15、临时调整和永久生效系统内核参数在哪里调</h5><ul><li><p>1.临时调整</p><ul><li>开启路由转发功能 设置1/0    echo”1”&gt;/proc/sys/net/ipv4/ip_forward</li><li>禁止所有的icmp回包（禁止其他主机ping本机）<ul><li>echo”1”&gt;/proc/sys/net/ipv4/icmp_echo_ignore_all</li><li>调整所有进程可以打开的文件总数ps：如果大量用户访问时，可以因为该数字太小而导致错误    echo”108248”&gt;/proc/sys/fs/file-max</li></ul></li></ul></li><li><p>2.永久调整</p><p>​        vim/etc/sysctl.conf</p><p>开启内核路由转发功能，通过01设置开关</p><p>​        net.ipv4.ip_forward=1</p><p>禁止所有的icmp回包（禁止其他主机ping本机）</p><p>​        net.ipv4.icmp_echo_ignnore_all-=1</p><p>调整所有进程可以打开的文件总</p><p>​        fs.file-max=108248</p></li></ul><h5 id="16、如何查看当前linux系统的状态，如cpu使用，内存使用，负载情况"><a href="#16、如何查看当前linux系统的状态，如cpu使用，内存使用，负载情况" class="headerlink" title="16、如何查看当前linux系统的状态，如cpu使用，内存使用，负载情况"></a>16、如何查看当前linux系统的状态，如cpu使用，内存使用，负载情况</h5><ul><li><p>系统版本</p><ul><li>uname -a</li><li>cat /etc/redhat-release</li></ul></li><li><p>内存：</p><ul><li>free</li></ul></li><li><p>CPU 利用率:</p><ul><li>top/sar</li></ul></li></ul><h5 id="17、查看网卡历史流量实时查看网卡流量"><a href="#17、查看网卡历史流量实时查看网卡流量" class="headerlink" title="17、查看网卡历史流量实时查看网卡流量"></a>17、查看网卡历史流量实时查看网卡流量</h5><p>查看网卡流量密令：sar   安装包：sysstat   查看帮助  sar -h</p><p>网卡历史流量：sar  -nDEV -f/var/log/sa/saxx</p><p>实时查看网卡流量：sar - n DEV 1 5 （每一秒刷新五次）</p><h5 id="18、如何查看当前系统每个ip的连接数"><a href="#18、如何查看当前系统每个ip的连接数" class="headerlink" title="18、如何查看当前系统每个ip的连接数"></a>18、如何查看当前系统每个ip的连接数</h5><ul><li>netstat -n | awk’/^tcp/{print $5}’ | awk -F ‘{print $1}’ | sort | uniq -c</li></ul><h5 id="19、找出-home下所有7天以前，以-ok结尾的文件列"><a href="#19、找出-home下所有7天以前，以-ok结尾的文件列" class="headerlink" title="19、找出/home下所有7天以前，以.ok结尾的文件列"></a>19、找出/home下所有7天以前，以.ok结尾的文件列</h5><ul><li>find /home -name “*.ok” -mtime +7</li></ul><h5 id="20、快速生成一个10G的文件"><a href="#20、快速生成一个10G的文件" class="headerlink" title="20、快速生成一个10G的文件"></a>20、快速生成一个10G的文件</h5><ul><li>dd if=/dev/zero of=test bs=10M count=1024</li></ul><h5 id="21、列出linux常见打包工具并写出相应解压缩参数（至少三种）"><a href="#21、列出linux常见打包工具并写出相应解压缩参数（至少三种）" class="headerlink" title="21、列出linux常见打包工具并写出相应解压缩参数（至少三种）"></a>21、列出linux常见打包工具并写出相应解压缩参数（至少三种）</h5><ul><li>压缩打包<ul><li>tar -cvf file.txt  tar.test.txt.gz</li><li>zip test.zip</li><li>Gzip file.txt</li><li>bzip2 -z file.txt</li></ul></li><li>解压缩<ul><li>tar -xf </li><li>unzip</li><li>gzip -d</li><li>bzip2 -d</li></ul></li></ul><h5 id="22、标准端口的范围是？"><a href="#22、标准端口的范围是？" class="headerlink" title="22、标准端口的范围是？"></a>22、标准端口的范围是？</h5><p>1-65535</p><h5 id="23、常见协议（http、https、ftp、mysql、redis）默认端口。"><a href="#23、常见协议（http、https、ftp、mysql、redis）默认端口。" class="headerlink" title="23、常见协议（http、https、ftp、mysql、redis）默认端口。"></a>23、常见协议（http、https、ftp、mysql、redis）默认端口。</h5><ul><li>http 80</li><li>https 443</li><li>ftp 21/20</li><li>mysql 3306</li><li>redis  6379</li></ul><h5 id="24、请写出下列端口所运行的服务21、22、23、3306、6379"><a href="#24、请写出下列端口所运行的服务21、22、23、3306、6379" class="headerlink" title="24、请写出下列端口所运行的服务21、22、23、3306、6379"></a>24、请写出下列端口所运行的服务21、22、23、3306、6379</h5><ul><li>21  ftp</li><li>22  ssh</li><li>23  telnet</li><li>3306  mysql</li><li>6379  redis</li></ul><h5 id="25、写出下面服务的常用端口：ftp、http、dns、smtp、pop3、dhcp、tftp、mysql、ssh、https"><a href="#25、写出下面服务的常用端口：ftp、http、dns、smtp、pop3、dhcp、tftp、mysql、ssh、https" class="headerlink" title="25、写出下面服务的常用端口：ftp、http、dns、smtp、pop3、dhcp、tftp、mysql、ssh、https"></a>25、写出下面服务的常用端口：ftp、http、dns、smtp、pop3、dhcp、tftp、mysql、ssh、https</h5><ul><li>ftp    21/20</li><li>http    80</li><li>dns    53</li><li>smtp    25（简单的邮件传输协议）</li><li>pop3    110（邮局协议版本3）</li><li>dhcp    服务器 udp 67 客户端  udp 68</li><li>tftp    69</li><li>mysql  3306</li><li>ssh    22</li><li>https    443</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2021/08/14/markdown-yu-fa/"/>
      <url>/2021/08/14/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>hello,world!</strong></p><p><strong>hello,world!</strong></p><p><em>hello,world!</em></p><p><em>hello,world!</em></p><p><em><strong>hello,world!</strong></em></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><hr><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><del>hello,world!</del></p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p><u>字段前加</u></p><u></u><p><u>字段后加</u></p><p><u>hello,world</u></p><h2 id="创建脚注"><a href="#创建脚注" class="headerlink" title="创建脚注"></a>创建脚注</h2><p>创建脚注<a href="%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B8%96%E7%95%8C%EF%BC%81">^hello,world!</a>鼠标移到hello,world！可以看到对应的脚注</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>有序列表数字后跟.再跟空格</p><ol><li></li><li></li><li></li></ol><p>无序列表在字段前用 * 或 + 或 -</p><ul><li></li></ul><ul><li></li></ul><ul><li></li></ul><p>嵌套循环在子列表符号前加四个空格</p><ol><li>1<ul><li>a</li><li>b</li></ul></li></ol><p>​    2</p><ul><li></li><li></li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>只要学不死，就往死里学！</p></blockquote><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>直接使用&lt;&gt;在里面填地址</p><p><a href="https://kuangstudy.com/">https://kuangstudy.com</a></p><p>先用[]给链接赋名再使用&lt;&gt;填地址</p><p><a href="https://www.kuangstudy.com/course/play/1317503462556848129">点击跳转狂神markdown教程</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>加反引号``表示代码的一小段</p><p><code>hello,world!</code></p><p>前后使用三个```表示代码块，后可指定代码语言</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo<span class="token punctuation">{</span>    piblic <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">plintln</span><span class="token punctuation">(</span><span class="token string">"hello,world!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>分隔不同的单元格用 | ，分隔表头和其他行用 -</p><table><thead><tr><th align="right"></th><th></th><th></th></tr></thead><tbody><tr><td align="right"></td><td></td><td></td></tr><tr><td align="right"></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础优化</title>
      <link href="/2021/08/14/linux-ji-chu-you-hua/"/>
      <url>/2021/08/14/linux-ji-chu-you-hua/</url>
      
        <content type="html"><![CDATA[<ul><li>Linux</li></ul><h1 id="基础优化"><a href="#基础优化" class="headerlink" title="基础优化"></a>基础优化</h1><p>安装centos7 </p><p>修改内核（将默认网卡名ens33改成eth0）</p><p>将光标移动到选择”Install CentOS 7”**</p><p>选择<strong>Tab键，打开Kernel</strong>启动项，再后面添加net.ifnames=0 biosdevname=0</p><p>分区    </p><p>/boot    1024MB</p><p>swap        4096MB</p><p>/                剩余空间</p><h2 id="一、解决网络问题排查思路"><a href="#一、解决网络问题排查思路" class="headerlink" title="一、解决网络问题排查思路"></a>一、解决网络问题排查思路</h2><p>当我们部署完虚拟机遇到无法上网的问题是，排查思路如下：</p><p>ps：由内到外</p><h3 id="1、linux层面检查"><a href="#1、linux层面检查" class="headerlink" title="1、linux层面检查"></a>1、linux层面检查</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ip</span> a        查看网卡运行状态如果网卡处于done或者网卡无显示信息，systemctl restart network重启网卡、停止NetworkManager查看网卡配置文件具体信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、vm层面检查"><a href="#2、vm层面检查" class="headerlink" title="2、vm层面检查"></a>2、vm层面检查</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">虚拟网络编辑器 ---<span class="token operator">&gt;</span> vmnet8 网卡设置 查看子网、掩码、网关等设置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、windows层面检查"><a href="#3、windows层面检查" class="headerlink" title="3、windows层面检查"></a>3、windows层面检查</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">本地网卡检查 ---<span class="token operator">&gt;</span> 控制面板<span class="token punctuation">\</span>网络和 Internet<span class="token punctuation">\</span>网络连接本地服务检查 ---<span class="token operator">&gt;</span> 任务管理器 服务 vmware相关服务重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、基础优化步骤"><a href="#二、基础优化步骤" class="headerlink" title="二、基础优化步骤"></a>二、基础优化步骤</h2><h3 id="1、配置yum仓库"><a href="#1、配置yum仓库" class="headerlink" title="1、配置yum仓库"></a>1、配置yum仓库</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rm</span> -f /etc/yum.repos.d/*<span class="token function">curl</span> -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span class="token function">curl</span> -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<span class="token comment">#或</span><span class="token function">curl</span> -o /etc/yum.repos.d/CentOS-Base.repo https://repo.huaweicloud.com/repository/conf/CentOS-7-reg.repoyum <span class="token function">install</span> -y https://repo.huaweicloud.com/epel/epel-release-latest-7.noarch.rpm<span class="token function">sed</span> -i <span class="token string">"s/#baseurl/baseurl/g"</span> /etc/yum.repos.d/epel.repo<span class="token function">sed</span> -i <span class="token string">"s/metalink/#metalink/g"</span> /etc/yum.repos.d/epel.repo<span class="token function">sed</span> -i <span class="token string">"s@https\?://download.fedoraproject.org/pub@https://repo.huaweicloud.com@g"</span> /etc/yum.repos.d/epel.repoyum clean allyum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、系统升级"><a href="#2、系统升级" class="headerlink" title="2、系统升级"></a>2、系统升级</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum -y upgrade  <span class="token comment">#只升级系统包，不升级软件和系统内核</span>yum -y update  <span class="token comment">#升级系统包、软件、内核。刚做完系统执行一次，以后不要执行，避免长时间未更新，出现兼容问题。</span>yum update -y --exclud<span class="token operator">=</span>kernel*    <span class="token comment">#排除内核都更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3、安装基础软件包"><a href="#3、安装基础软件包" class="headerlink" title="3、安装基础软件包"></a>3、安装基础软件包</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> net-tools <span class="token function">vim</span> tree <span class="token function">htop</span> iftop iotop  bash-completion bash-completion-extras lrzsz sysstat sl <span class="token function">lsof</span> <span class="token function">unzip</span> telnet nmap <span class="token function">nc</span> psmisc dos2unix bash-completion <span class="token function">wget</span>  nethogs ntpdate nfsutils <span class="token function">rsync</span> glances gcc gcc-c++ glibc yum-utils httpd-tools -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、关闭系统服务"><a href="#4、关闭系统服务" class="headerlink" title="4、关闭系统服务"></a>4、关闭系统服务</h3><h4 id="1、关闭防火墙"><a href="#1、关闭防火墙" class="headerlink" title="1、关闭防火墙"></a>1、关闭防火墙</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop firewalld      -----<span class="token operator">&gt;</span>临时关闭systemctl status firewalld    -----<span class="token operator">&gt;</span>查看状态systemctl disable firewalld   -----<span class="token operator">&gt;</span>永久关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、关闭SElinux"><a href="#2、关闭SElinux" class="headerlink" title="2、关闭SElinux"></a>2、关闭SElinux</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">setenforce <span class="token number">0</span>                  -----<span class="token operator">&gt;</span>临时关闭<span class="token function">sed</span> -i <span class="token string">'/^SELINUX=/c SELINUX=disabled'</span> /etc/selinux/config        ---<span class="token operator">&gt;</span>永久关闭<span class="token punctuation">[</span>root@oldboy ~<span class="token punctuation">]</span><span class="token comment"># getenforce        -----&gt;检查状态</span>Permissive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、关闭NetworkManager"><a href="#3、关闭NetworkManager" class="headerlink" title="3、关闭NetworkManager"></a>3、关闭NetworkManager</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop NetworkManager      -----<span class="token operator">&gt;</span>临时关闭systemctl status NetworkManager    -----<span class="token operator">&gt;</span>查看状态systemctl disable NetworkManager       -----<span class="token operator">&gt;</span>永久关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5、配置ntp服务，同步系统时间"><a href="#5、配置ntp服务，同步系统时间" class="headerlink" title="5、配置ntp服务，同步系统时间"></a>5、配置ntp服务，同步系统时间</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">'#Timing synchronization time'</span> <span class="token operator">&gt;&gt;</span>/var/spool/cron/root    <span class="token comment">#给定时任务加上注释</span><span class="token builtin class-name">echo</span> <span class="token string">'0 */1 * * * /usr/sbin/ntpdate ntp1.aliyun.com &amp;&gt;/dev/null'</span> <span class="token operator">&gt;&gt;</span>/var/spool/cron/root        <span class="token comment">#设置定时任务</span><span class="token function">crontab</span> -l    <span class="token comment">#检查结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6、优化显示输出"><a href="#6、优化显示输出" class="headerlink" title="6、优化显示输出"></a>6、优化显示输出</h3><p>vim /etc/bashrc 进入bashrc文件 按下41gg 跳转文件的41行 按下i键进入编辑模式，输入#，注释当前行，光标移动到#号前，按下回车键空出当前41行内容，而后光标移动到41行（空行位置），粘贴参数。而后按下ESC键，退出编辑模式，按下SHIFT+; wq 保存退出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span> <span class="token string">"<span class="token environment constant">$PS1</span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token entity" title="\\">\\</span>s-<span class="token entity" title="\\">\\</span>v<span class="token entity" title="\\">\\</span>\$ "</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"[\[<span class="token entity" title="\e">\e</span>[34;1m\]\u@\[<span class="token entity" title="\e">\e</span>[0m\]\[<span class="token entity" title="\e">\e</span>[32;1m\]\H\[<span class="token entity" title="\e">\e</span>[0m\] \[<span class="token entity" title="\e">\e</span>[31;1m\]\w\[<span class="token entity" title="\e">\e</span>[0m\]]<span class="token entity" title="\\">\\</span>$ "</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7、优化ssh连接速度"><a href="#7、优化ssh连接速度" class="headerlink" title="7、优化ssh连接速度"></a>7、优化ssh连接速度</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sed</span> -i <span class="token string">'s@#UseDNS yes@UseDNS no@g'</span> /etc/ssh/sshd_config<span class="token function">sed</span> -i <span class="token string">'s@^GSSAPIAuthentication yes@GSSAPIAuthentication no@g'</span> /etc/ssh/sshd_configsystemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8、hosts解析"><a href="#8、hosts解析" class="headerlink" title="8、hosts解析"></a>8、hosts解析</h3><p>vim /etc/hosts</p><p>根据需要修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">192.168</span>.100.11 centos7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9、调整单个进程最大打开文件数"><a href="#9、调整单个进程最大打开文件数" class="headerlink" title="9、调整单个进程最大打开文件数"></a>9、调整单个进程最大打开文件数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token string">'* - nofile 65535'</span> <span class="token operator">&gt;&gt;</span> /etc/security/limits.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上完成后开始克隆</p><h1 id="修改每台主机的主机名、IP地址"><a href="#修改每台主机的主机名、IP地址" class="headerlink" title="修改每台主机的主机名、IP地址"></a>修改每台主机的主机名、IP地址</h1><h2 id="一、修改主机名"><a href="#一、修改主机名" class="headerlink" title="一、修改主机名"></a>一、修改主机名</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hostnamectl set-hostname 要换的名字        <span class="token comment">#注意看要换的名字</span>hostnamectl set-hostname web01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、修改ip地址"><a href="#二、修改ip地址" class="headerlink" title="二、修改ip地址"></a>二、修改ip地址</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sed</span> -i <span class="token string">'s#原ip#更改后ip#g'</span> /etc/sysconfig/network-scripts/ifcfg-eth<span class="token punctuation">[</span>01<span class="token punctuation">]</span>   <span class="token comment">#注意自己要换的ip和原ip是什么</span><span class="token function">sed</span> -i <span class="token string">'s#200#7#g'</span> /etc/sysconfig/network-scripts/ifcfg-eth<span class="token punctuation">[</span>01<span class="token punctuation">]</span>systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2021/08/14/linux/"/>
      <url>/2021/08/14/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-https-www-linuxprobe-com-basic-learning-00-html"><a href="#Linux-https-www-linuxprobe-com-basic-learning-00-html" class="headerlink" title="Linux](https://www.linuxprobe.com/basic-learning-00.html)"></a>Linux](<a href="https://www.linuxprobe.com/basic-learning-00.html">https://www.linuxprobe.com/basic-learning-00.html</a>)</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh-keygen -t rsa  <span class="token comment">#生成密钥和私钥文件 id_rsa、id_rsa.pub</span><span class="token builtin class-name">cd</span> .sshssh-copy-id <span class="token function">ip</span><span class="token function">ssh</span> root@ip <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-eth0<span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.100.10<span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.100.1<span class="token assign-left variable">DNS</span><span class="token operator">=</span><span class="token number">192.168</span>.100.1systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/hosts<span class="token number">192.168</span>.100.10 node1<span class="token number">192.168</span>.100.20 node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络端口监听"><a href="#网络端口监听" class="headerlink" title="网络端口监听"></a>网络端口监听</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">netstat</span><span class="token function">netstat</span> -nlpt <span class="token comment">#获取进程名、进程号、用户ID</span><span class="token function">netstat</span> -tnl <span class="token comment">#可以看到处于监听状态的TCP端口和连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h3><p>Linux <a href="https://www.linuxprobe.com/how-to-crontab.html">crontab</a>是用来定期执行程序的命令。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> <span class="token punctuation">[</span>-u user<span class="token punctuation">]</span> <span class="token function">file</span><span class="token function">crontab</span> <span class="token punctuation">[</span> -u user <span class="token punctuation">]</span> <span class="token punctuation">[</span> -i <span class="token punctuation">]</span> <span class="token punctuation">{</span> -e <span class="token operator">|</span> -l <span class="token operator">|</span> -r <span class="token punctuation">}</span>• -u user：用于设定某个用户的crontab服务；• file: file为命令文件名，表示将file作为crontab的任务列表文件并载入crontab；• -e：编辑某个用户的crontab文件内容，如不指定用户则表示当前用户；• -l：显示某个用户的crontab文件内容，如不指定用户则表示当前用户；• -r：从/var/spool/cron目录中删除某个用户的crontab文件。• -i：在删除用户的crontab文件时给确认提示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每一分钟执行一次command（因cron默认每1分钟扫描一次，因此全为*即可）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">*    *    *    *    *  <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每小时的第3和第15分钟执行command</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">3,15</span>   *    *    *    *  <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每天上午8-11点的第3和15分钟执行command：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">3,15</span>  <span class="token number">8</span>-11  *  *  *  <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每隔2天的上午8-11点的第3和15分钟执行command：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">3,15</span>  <span class="token number">8</span>-11  */2  *   *  <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个星期一的上午8点到11点的第3和第15分钟执行command</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">3,15</span>  <span class="token number">8</span>-11   *   *  <span class="token number">1</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每晚的21:30重启smb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">30</span>  <span class="token number">21</span>   *   *  *  /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每月1、10、22日的4 : 45重启smb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">45</span>  <span class="token number">4</span>  <span class="token number">1,10</span>,22  *  *  /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每周六、周日的1 : 10重启smb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">10</span>  <span class="token number">1</span>  *  *  <span class="token number">6,0</span>  /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每天18 : 00至23 : 00之间每隔30分钟重启smb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">0,30</span>  <span class="token number">18</span>-23  *  *  *  /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每一小时重启smb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">*  */1  *  *  *  /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>晚上11点到早上7点之间，每隔一小时重启smb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">*  <span class="token number">23</span>-7/1  *   *   *  /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每月的4号与每周一到周三的11点重启smb</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">0</span>  <span class="token number">11</span>  <span class="token number">4</span>  *  mon-wed  /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每小时执行/etc/cron.hourly目录内的脚本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">0</span>  <span class="token number">1</span>   *   *   *     root run-parts /etc/cron.hourly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="磁盘管理和文件系统"><a href="#磁盘管理和文件系统" class="headerlink" title="磁盘管理和文件系统"></a>磁盘管理和文件系统</h2><table><thead><tr><th>RAID级别</th><th>最少硬盘</th><th>可用容量</th><th>读写性能</th><th>安全性</th><th>特点</th></tr></thead><tbody><tr><td>0</td><td>2</td><td>n</td><td>n</td><td>低</td><td>追求最大容量和速度，任何一块盘损坏，数据全部异常。</td></tr><tr><td>1</td><td>2</td><td>n/2</td><td>n</td><td>高</td><td>追求最大安全性，只要阵列组中有一块硬盘可用，数据不受影响。</td></tr><tr><td>5</td><td>3</td><td>n-1</td><td>n-1</td><td>中</td><td>在控制成本的前提下，追求硬盘的最大容量、速度及安全性，允许有一块硬盘异常，数据不受影响。</td></tr><tr><td>10</td><td>4</td><td>n/2</td><td>n/2</td><td>高</td><td>综合RAID1和RAID0的优点，追求硬盘的速度和安全性，允许有一半硬盘异常（不可同组），数据不受影响</td></tr></tbody></table><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">df</span> -h<span class="token comment">#将容量结果以易读的容量格式显示出来</span><span class="token function">fdisk</span> -l<span class="token comment">#列出所有分区信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h3><p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为 <strong>d</strong> 则是目录</li><li>当为 <strong>-</strong> 则是文件；</li><li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li><li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><table><thead><tr><th>文件类型</th><th>属主权限</th><th>属组权限</th><th>其它用户权限</th></tr></thead><tbody><tr><td>d</td><td>rwx</td><td>r-x</td><td>r-x</td></tr><tr><td>目录文件</td><td>读 写 执行</td><td>读 写 执行</td><td>读 写 执行</td></tr></tbody></table><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> 常用命令输入模式i<span class="token comment">#i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。</span>o<span class="token comment">#o 为在目前光标所在的下一行处输入新的一行；O 为在目前光标所在的上一行处输入新的一行！</span>a<span class="token comment">#a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。</span>gg<span class="token comment">#移动到这个档案的第一行，相当于 1G </span>x<span class="token comment">#在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) </span><span class="token function">dd</span><span class="token comment">#删除游标所在的那一整行</span>yy<span class="token comment">#复制游标所在的那一行</span>p<span class="token comment">#p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！</span>u<span class="token comment">#复原前一个动作.</span><span class="token punctuation">[</span>Ctrl<span class="token punctuation">]</span>+r<span class="token comment">#重做上一个动作。</span>:set nu<span class="token comment">#显示行号，设定之后，会在每一行的前缀显示该行的行号</span><span class="token function">vim</span> 中批量添加注释方法一 ：块选择模式批量注释：Ctrl + <span class="token function">v</span> 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 I 进入行首插入模式输入注释符号如 // 或 <span class="token comment">#，输入完毕之后，按两下 ESC，Vim 会自动将你选中的所有行首都加上注释，保存退出完成注释。</span>取消注释：Ctrl + <span class="token function">v</span> 进入块选择模式，选中你要删除的行首的注释符号，注意 // 要选中两个，选好之后按 d 即可删除注释，ESC 保存退出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><h3 id="yum常用命令"><a href="#yum常用命令" class="headerlink" title="yum常用命令"></a>yum常用命令</h3><ul><li>\1. 列出所有可更新的软件清单命令：<strong>yum check-update</strong></li><li>\2. 更新所有软件命令：<strong>yum update</strong></li><li>\3. 仅安装指定的软件命令：<strong>yum install <package_name></package_name></strong></li><li>\4. 仅更新指定的软件命令：<strong>yum update <package_name></package_name></strong></li><li>\5. 列出所有可安裝的软件清单命令：<strong>yum list</strong></li><li>\6. 删除软件包命令：<strong>yum remove <package_name></package_name></strong></li><li>\7. 查找软件包命令：<strong>yum search <keyword></keyword></strong></li><li>\8. 清除缓存命令:<ul><li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li><li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li><li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的 headers</li><li><strong>yum clean, yum clean all (= yum clean packages; yum clean oldheaders)</strong> :清除缓存目录下的软件包及旧的 headers</li></ul></li></ul><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rpm</span> -ivh <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span><span class="token comment">#安装软件</span><span class="token function">rpm</span> -qi <span class="token operator">&lt;</span>package_name<span class="token operator">&gt;</span><span class="token comment">#显示软件安装信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="配置管理nginx-conf"><a href="#配置管理nginx-conf" class="headerlink" title="配置管理nginx.conf"></a>配置管理nginx.conf</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment">########### 每个指令必须有分号结束。#################</span><span class="token comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><span class="token comment">#worker_processes 2;  #允许生成的进程数，默认为1</span><span class="token comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><span class="token directive"><span class="token keyword">error_log</span> log/error.log debug</span><span class="token punctuation">;</span>  <span class="token comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">accept_mutex</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span>    <span class="token directive"><span class="token keyword">multi_accept</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>  <span class="token comment">#设置一个进程是否同时接受多个网络连接，默认为off</span>    <span class="token comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>    <span class="token comment">#最大连接数，默认为512</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>   <span class="token comment">#文件扩展名与文件类型映射表</span>    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span> <span class="token comment">#默认文件类型，默认为text/plain</span>    <span class="token comment">#access_log off; #取消服务日志    </span>    <span class="token directive"><span class="token keyword">log_format</span> myFormat <span class="token string">'<span class="token variable">$remote_addr–</span><span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> <span class="token variable">$request</span> <span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> <span class="token variable">$http_referer</span> <span class="token variable">$http_user_agent</span> <span class="token variable">$http_x_forwarded_for</span>'</span></span><span class="token punctuation">;</span> <span class="token comment">#自定义格式</span>    <span class="token directive"><span class="token keyword">access_log</span> log/access.log myFormat</span><span class="token punctuation">;</span>  <span class="token comment">#combined为日志格式的默认值</span>    <span class="token directive"><span class="token keyword">sendfile</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span class="token comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span>    <span class="token directive"><span class="token keyword">sendfile_max_chunk</span> <span class="token number">100k</span></span><span class="token punctuation">;</span>  <span class="token comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span> <span class="token number">65</span></span><span class="token punctuation">;</span>  <span class="token comment">#连接超时时间，默认为75s，可以在http，server，location块。</span>    <span class="token directive"><span class="token keyword">upstream</span> mysvr</span> <span class="token punctuation">{</span>         <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:7878</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">server</span> 192.168.10.121:3333 backup</span><span class="token punctuation">;</span>  <span class="token comment">#热备</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> https://www.baidu.com</span><span class="token punctuation">;</span> <span class="token comment">#错误页</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">keepalive_requests</span> <span class="token number">120</span></span><span class="token punctuation">;</span> <span class="token comment">#单连接请求上限次数。</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">4545</span></span><span class="token punctuation">;</span>   <span class="token comment">#监听端口</span>        <span class="token directive"><span class="token keyword">server_name</span>  127.0.0.1</span><span class="token punctuation">;</span>   <span class="token comment">#监听地址       </span>        <span class="token directive"><span class="token keyword">location</span>  ~*^.+$</span> <span class="token punctuation">{</span>       <span class="token comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span>           <span class="token comment">#root path;  #根目录</span>           <span class="token comment">#index vv.txt;  #设置默认页</span>           <span class="token directive"><span class="token keyword">proxy_pass</span>  http://mysvr</span><span class="token punctuation">;</span>  <span class="token comment">#请求转向mysvr 定义的服务器列表</span>           <span class="token directive"><span class="token keyword">deny</span> 127.0.0.1</span><span class="token punctuation">;</span>  <span class="token comment">#拒绝的ip</span>           <span class="token directive"><span class="token keyword">allow</span> 172.18.5.54</span><span class="token punctuation">;</span> <span class="token comment">#允许的ip           </span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># For more information on configuration, see:</span><span class="token comment">#   * Official English Documentation: http://nginx.org/en/docs/</span><span class="token comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><span class="token directive"><span class="token keyword">user</span> nginx</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">worker_processes</span> auto</span><span class="token punctuation">;</span><span class="token comment">#允许生成的进程数，取决于CPU核数</span><span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/error.log</span><span class="token punctuation">;</span><span class="token comment">#错误日志</span><span class="token directive"><span class="token keyword">pid</span> /run/nginx.pid</span><span class="token punctuation">;</span> <span class="token comment">#主进程id，指定nginx进程运行文件存放地址</span><span class="token comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><span class="token directive"><span class="token keyword">include</span> /usr/share/nginx/modules/*.conf</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">worker_connections</span> <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token comment">##worker进程处理的请求数</span><span class="token punctuation">}</span><span class="token comment">##服务器核心配置</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span><span class="token comment">##日志格式</span>    <span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local]</span> "<span class="token variable">$request</span>" '</span>                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span><span class="token comment">##访问日志</span>    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/access.log  main</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>            <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">tcp_nopush</span>          <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">tcp_nodelay</span>         <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token comment">##会话保持时间</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>   <span class="token number">65</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">types_hash_max_size</span> <span class="token number">4096</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">include</span>             /etc/nginx/mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span>        application/octet-stream</span><span class="token punctuation">;</span>    <span class="token comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span>    <span class="token comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span>    <span class="token comment"># for more information.</span>    <span class="token directive"><span class="token keyword">include</span> /etc/nginx/conf.d/*.conf</span><span class="token punctuation">;</span><span class="token comment">#引入子配置文件</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span><span class="token comment">##监听所有的ipv4的地址</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span><span class="token comment">##监听所有的ipv6的地址</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment"># Settings for a TLS enabled server.</span><span class="token comment">#</span><span class="token comment">#    server {</span><span class="token comment">#        listen       443 ssl http2;</span><span class="token comment">#        listen       [::]:443 ssl http2;</span><span class="token comment">#        server_name  _;</span><span class="token comment">#        root         /usr/share/nginx/html;</span><span class="token comment">#</span><span class="token comment">#        ssl_certificate "/etc/pki/nginx/server.crt";</span><span class="token comment">#        ssl_certificate_key "/etc/pki/nginx/private/server.key";</span><span class="token comment">#        ssl_session_cache shared:SSL:1m;</span><span class="token comment">#        ssl_session_timeout  10m;</span><span class="token comment">#        ssl_ciphers HIGH:!aNULL:!MD5;</span><span class="token comment">#        ssl_prefer_server_ciphers on;</span><span class="token comment">#</span><span class="token comment">#        # Load configuration files for the default server block.</span><span class="token comment">#        include /etc/nginx/default.d/*.conf;</span><span class="token comment">#</span><span class="token comment">#        error_page 404 /404.html;</span><span class="token comment">#            location = /40x.html {</span><span class="token comment">#        }</span><span class="token comment">#</span><span class="token comment">#        error_page 500 502 503 504 /50x.html;</span><span class="token comment">#            location = /50x.html {</span><span class="token comment">#        }</span><span class="token comment">#    }</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>         <span class="token directive"><span class="token keyword">location</span> = /hello</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>         /usr/share/nginx/html</span><span class="token punctuation">;</span><span class="token comment">##网站目录目录/URL</span>    <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span><span class="token comment">#默认首页index.html</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义站点"><a href="#自定义站点" class="headerlink" title="自定义站点"></a>自定义站点</h3><p>1.获取信息</p><p>站点名称：mysite.com</p><p>端口：81</p><p>站点目录：/opt/mysite</p><p>2.创建站点 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkdir -p /opt/mysite</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/mysite/</span><span class="token punctuation">[</span>root@localhost mysite<span class="token punctuation">]</span><span class="token comment"># ls</span><span class="token punctuation">[</span>root@localhost mysite<span class="token punctuation">]</span><span class="token comment"># echo mysite &gt; index.com</span><span class="token punctuation">[</span>root@localhost mysite<span class="token punctuation">]</span><span class="token comment"># mkdir static</span><span class="token punctuation">[</span>root@localhost mysite<span class="token punctuation">]</span><span class="token comment"># echo static &gt; static/index.com </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.配置nginx服务</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">81</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  mysite.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>         <span class="token directive"><span class="token keyword">location</span> = /static</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite</span><span class="token punctuation">;</span><span class="token comment">##网站目录目录/URL</span>    <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span><span class="token comment">#默认首页index.html</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.启动nginx</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">vim</span> /etc/nginx/conf.d/mysite.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.安全配置</p><p>安全组（开放端口）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl stop firewalld<span class="token comment">#关闭防火墙</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.配置域名</p><p>域名–&gt;解析成IP</p><p>买一个域名：</p><p>本地hosts</p><p>win：C:\Windows\System32\drivers\etc\hosts</p><h3 id="nginx配置虚拟主机"><a href="#nginx配置虚拟主机" class="headerlink" title="nginx配置虚拟主机"></a>nginx配置虚拟主机</h3><ul><li>基于IP虚拟主机</li><li>基于端口的虚拟主机</li><li>基于域名</li><li>基于访问路径配置</li></ul><h4 id="基于IP配置虚拟主机"><a href="#基于IP配置虚拟主机" class="headerlink" title="基于IP配置虚拟主机"></a>基于IP配置虚拟主机</h4><p>每台机器配置一个站点</p><h4 id="基于端口配置虚拟主机"><a href="#基于端口配置虚拟主机" class="headerlink" title="基于端口配置虚拟主机"></a>基于端口配置虚拟主机</h4><ul><li>site1:/opt/site1</li><li>site2:/opt/site2</li></ul><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">82</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:82</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/site1</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">83</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:83</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/site2</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于域名配置虚拟主机"><a href="#基于域名配置虚拟主机" class="headerlink" title="基于域名配置虚拟主机"></a>基于域名配置虚拟主机</h4><ul><li>mysite1.com /opt mysite1</li><li>mysite2.com /opt mysite2</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> /opt/mysite1 /opt/mysite2<span class="token builtin class-name">echo</span> mysite1 <span class="token operator">&gt;</span>/opt/mysite1/index.html<span class="token builtin class-name">echo</span> mysite2 <span class="token operator">&gt;</span>/opt/mysite1/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置站点</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">85</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:85</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  mysite1.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite1</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">86</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:86</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  mysite1.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite2</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于访问路径配置虚拟主机</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /site1</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>                <span class="token directive"><span class="token keyword">location</span> = /site2</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">location</span> = /site3</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nginx配置代理服务器"><a href="#nginx配置代理服务器" class="headerlink" title="nginx配置代理服务器"></a>nginx配置代理服务器</h3><p>一台机器：运行一个代理站点和两个其他站点</p><p>创建数据</p><ul><li>proxysite1:/opt/proxy1</li><li>proxysite2:/opt/proxy2</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">mkdir</span> /opt/proxy1 /opt/proxy2<span class="token builtin class-name">echo</span> <span class="token string">"my proxy site1"</span> <span class="token operator">&gt;</span> /opt/proxy1/index.html<span class="token builtin class-name">echo</span> <span class="token string">"my proxy site2"</span> <span class="token operator">&gt;</span> /opt/proxy2/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建站点</p><p>proxy1</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">87</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:87</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/proxy1</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>proxy2</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">88</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:88</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  _</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/proxy2</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /404.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>proxy</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">89</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://192.168.100.128:88/</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">location</span> ~ \.(gif|jpg|png)$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span> /data/images</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html">Module ngx_http_proxy_module</a></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">proxy_pass<span class="token comment">##设置代理服务器的协议和地址以及位置应映射到的可选 URI。作为协议，可以指定“ http”或“ https”。地址可以指定为域名或 IP 地址，以及可选的端口：</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置NGINX支持PHP网站解析"><a href="#配置NGINX支持PHP网站解析" class="headerlink" title="配置NGINX支持PHP网站解析"></a>配置NGINX支持PHP网站解析</h3><h4 id="静动分离"><a href="#静动分离" class="headerlink" title="静动分离"></a>静动分离</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">81</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">listen</span>       [::]:80</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  mysite.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite</span><span class="token punctuation">;</span>        <span class="token comment"># Load configuration files for the default server block.</span>        <span class="token directive"><span class="token keyword">include</span> /etc/nginx/default.d/*.conf</span><span class="token punctuation">;</span>         <span class="token directive"><span class="token keyword">location</span> = /static</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>         /opt/mysite</span><span class="token punctuation">;</span><span class="token comment">##网站目录目录/URL</span>    <span class="token directive"><span class="token keyword">index</span>        index.html index.htm</span><span class="token punctuation">;</span><span class="token comment">#默认首页index.html</span>        <span class="token punctuation">}</span>       <span class="token directive"><span class="token keyword">location</span> /.php$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>   /opt/mysite</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.php</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span>  localhost:9000</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME /home/www/scripts/php<span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span> QUERY_STRING <span class="token variable">$query_string</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span> fastcgi_params</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>准备php页面</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="nginx配置负载均衡器"><a href="#nginx配置负载均衡器" class="headerlink" title="nginx配置负载均衡器"></a>nginx配置负载均衡器</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">server</span> backend1.example.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server</span> backend2.example.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server</span> 192.0.0.1 backup</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>            <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器权重</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> backend</span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">server</span> backend1.example.com weight=5</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> backend2.example.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 192.0.0.1 backup</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">#weight 参数server设置服务器的权重；默认是1</span><span class="token comment">#在这个例子中，backend1.example.com有 weight 5；其他两台服务器有默认权重（1），但有 IP 地址的那台192.0.0.1被标记为backup服务器，除非其他两台服务器都不可用，否则不会接收请求。随着权重的这种配置，每的6请求，5发送到backend1.example.com和1对backend2.example.com。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LVS</title>
      <link href="/2021/08/14/lvs/"/>
      <url>/2021/08/14/lvs/</url>
      
        <content type="html"><![CDATA[<h2 id="查询内核是编译IPVS"><a href="#查询内核是编译IPVS" class="headerlink" title="查询内核是编译IPVS"></a>查询内核是编译IPVS</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># cat /boot/config-3.10.0-862.el7.x86_64 | grep -i ipvs -A 10</span><span class="token comment">#/boot/config-* 根据内核版本不同定义名称，内核配置文件，y表示已编译模块，m表示可加载的模块</span><span class="token comment"># grep 根据关键词查询内容</span><span class="token comment">#-i：查询内容不区分大小写 </span><span class="token comment">#-A -B -C 后面都跟阿拉伯数字</span><span class="token comment">#-A:是显示匹配后和它后面的n行。</span><span class="token comment">#-B:是显示匹配行和它前面的n行。</span><span class="token comment">#-C:是匹配行和它前后各n行。</span><span class="token assign-left variable">CONFIG_NETFILTER_XT_MATCH_IPVS</span><span class="token operator">=</span>m<span class="token comment">#ipvs</span><span class="token comment">#此处应显示10行内容，但与IPVS不相关，就删除了</span><span class="token punctuation">..</span><span class="token punctuation">..</span>--<span class="token comment"># IPVS transport protocol load balancing support</span><span class="token comment">#IPVS支持的协议</span><span class="token assign-left variable">CONFIG_IP_VS_PROTO_TCP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_UDP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_AH_ESP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_ESP</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_AH</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PROTO_SCTP</span><span class="token operator">=</span>y<span class="token comment">#</span><span class="token comment"># IPVS scheduler</span><span class="token comment">#IPVS调度算法</span><span class="token assign-left variable">CONFIG_IP_VS_RR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_WRR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_WLC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LBLC</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_LBLCR</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_DH</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_SH</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_SED</span><span class="token operator">=</span>m--<span class="token comment"># IPVS SH scheduler</span><span class="token comment">#IPVS sh算法调度</span><span class="token assign-left variable">CONFIG_IP_VS_SH_TAB_BITS</span><span class="token operator">=</span><span class="token number">8</span><span class="token comment">#</span><span class="token comment"># IPVS application helper</span><span class="token comment">#</span><span class="token assign-left variable">CONFIG_IP_VS_FTP</span><span class="token operator">=</span>m<span class="token assign-left variable">CONFIG_IP_VS_NFCT</span><span class="token operator">=</span>y<span class="token assign-left variable">CONFIG_IP_VS_PE_SIP</span><span class="token operator">=</span>m<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ipvsadm相关文件"><a href="#ipvsadm相关文件" class="headerlink" title="ipvsadm相关文件"></a>ipvsadm相关文件</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># rpm -ql ipvsadm</span>/etc/sysconfig/ipvsadm-config<span class="token comment">#ipvs配置文件</span>/usr/lib/systemd/system/ipvsadm.service<span class="token comment">#守护进程服务</span>/usr/sbin/ipvsadm<span class="token comment">#主程序</span>/usr/sbin/ipvsadm-restore<span class="token comment">#ipvs规则重载工具</span>/usr/sbin/ipvsadm-save<span class="token comment">#ipvs规则保存工具</span>/usr/share/doc/ipvsadm-1.27/usr/share/doc/ipvsadm-1.27/README/usr/share/man/man8/ipvsadm-restore.8.gz/usr/share/man/man8/ipvsadm-save.8.gz/usr/share/man/man8/ipvsadm.8.gz<span class="token comment">#其他文档</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ipvsadm命令"><a href="#ipvsadm命令" class="headerlink" title="ipvsadm命令"></a>ipvsadm命令</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@node1 ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -h</span>ipvsadm v1.27 <span class="token number">2008</span>/5/15 <span class="token punctuation">(</span>compiled with popt and IPVS v1.2.1<span class="token punctuation">)</span><span class="token comment"># ipvsadm 版本信息 包括IPVS版本</span>Usage:  ipvsadm -A<span class="token operator">|</span>E -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address <span class="token punctuation">[</span>-s scheduler<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p <span class="token punctuation">[</span>timeout<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-M netmask<span class="token punctuation">]</span> <span class="token punctuation">[</span>--pe persistence_engine<span class="token punctuation">]</span> <span class="token punctuation">[</span>-b sched-flags<span class="token punctuation">]</span>  <span class="token comment">#添加|修改一条虚拟服务格式</span>  ipvsadm -D -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address  <span class="token comment">#删除一个一条虚拟服务格式</span>  ipvsadm -C  <span class="token comment">#清除内核虚拟服务器表中的所有记录的格式</span>  ipvsadm -R  <span class="token comment">#从标准输入中还原虚拟服务列表的格式</span>  ipvsadm -S <span class="token punctuation">[</span>-n<span class="token punctuation">]</span>  <span class="token comment">#保存虚拟服务规则至标准输出的格式</span>  ipvsadm -a<span class="token operator">|</span>e -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address -r server-address <span class="token punctuation">[</span>options<span class="token punctuation">]</span>  <span class="token comment">#添加|修改一条真实服务器记录的格式</span>  ipvsadm -d -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address -r server-address  <span class="token comment">#删除一条真实服务器记录的格式</span>  ipvsadm -L<span class="token operator">|</span>l <span class="token punctuation">[</span>options<span class="token punctuation">]</span>  <span class="token comment">#列出虚拟服务器表</span>  ipvsadm -Z <span class="token punctuation">[</span>-t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address<span class="token punctuation">]</span>  <span class="token comment">#虚拟服务表计数器清零</span>  ipvsadm --set tcp tcpfin udp  <span class="token comment">#更改用于IPVS连接的超时值，tcp表示TCP会话，tcpfin表示接收到FIN数据包后的TCP会，udp表示UDP数据包的超时值（均以秒为单位）</span>  ipvsadm --start-daemon state <span class="token punctuation">[</span>--mcast-interface interface<span class="token punctuation">]</span> <span class="token punctuation">[</span>--syncid sid<span class="token punctuation">]</span>  <span class="token comment">#启动同步守护进程，state的值可以是master或backup，用来说明调度服务器是master或是backup</span>  ipvsadm --stop-daemon state  <span class="token comment">#停止同步进程</span>  ipvsadm -hCommands:Either long or short options are allowed.  --add-service     -A        <span class="token function">add</span> virtual <span class="token function">service</span> with options<span class="token operator">|</span>添加一个虚拟服务，使用ip地址、端口号、协议来唯一定义一个虚拟服务，添加内容保存在内核虚拟服务器列表中  --edit-service    -E        edit virtual <span class="token function">service</span> with options<span class="token operator">|</span>编辑内核虚拟服务器表中的一条虚拟服务器记录  --delete-service  -D        delete virtual <span class="token function">service</span><span class="token operator">|</span>删除内核虚拟服务器表中的一条虚拟服务器记录，并删除所有与该虚拟服务器相关联的真实服务器  --clear           -C        <span class="token function">clear</span> the whole table<span class="token operator">|</span>清除内核虚拟服务器表中的所有记录  --restore         -R        restore rules from stdin<span class="token operator">|</span>从标准输入中还原虚拟服务列表  --save            -S        save rules to stdout<span class="token operator">|</span>保存虚拟服务规则至标准输出  --add-server      -a        <span class="token function">add</span> real server with options<span class="token operator">|</span>在内核虚拟服务器表的一条记录里添加一条新的真实服务器记录。也就是在一个虚拟服务器中增加一台新的真实服务器  --edit-server     -e        edit real server with options<span class="token operator">|</span>编辑一条虚拟服务器记录中的某条真实服务器记录  --delete-server   -d        delete real server<span class="token operator">|</span>删除一条虚拟服务器记录中的某条真实服务器记录  --list            -L<span class="token operator">|</span>-l     list the table<span class="token operator">|</span>如果没有指定参数，则列出虚拟服务器表。如果选择了虚拟服务器地址，则仅列出该虚拟服务器的信息。如果选择-c选项，则显示连接表。输出内容受到其他参数的影响  --zero            -Z        zero counters <span class="token keyword">in</span> a <span class="token function">service</span> or all services<span class="token operator">|</span>虚拟服务表计数器清零（清空当前的连接数量等）  --set tcp tcpfin udp        <span class="token builtin class-name">set</span> connection <span class="token function">timeout</span> values<span class="token operator">|</span>更改用于IPVS连接的超时值。该命令始终使用3个参数，分别表示TCP会话，接收到FIN数据包后的TCP会话和UDP数据包的超时值（以秒为单位）。超时值0表示保留相应条目的当前超时值  --start-daemon              start connection <span class="token function">sync</span> daemon<span class="token operator">|</span>启动同步守护进程  --stop-daemon               stop connection <span class="token function">sync</span> daemon<span class="token operator">|</span>停止同步守护进程  --help            -h        display this <span class="token builtin class-name">help</span> message<span class="token operator">|</span>显示帮助信息Options:  --tcp-service  -t service-address   service-address is host<span class="token punctuation">[</span>:port<span class="token punctuation">]</span>   <span class="token comment">#说明虚拟服务器提供的是tcp 的服务。服务器地址的形式为 主机[:端口]。</span>  <span class="token comment">#主机可以是IP地址也可以是主机名。</span>  <span class="token comment">#端口可以是普通的端口号，也可以是端口的服务名称。端口可以被省略，在这种情况下，默认端口号为0。当端口号为0时，需要指定服务器提供持久稳固的服务（也即是使用了-p | --persistent选项）才有效，在这种情况下，它是一个通配符端口，即访问任何端口的连接都将被接受。</span>  --udp-service  -u service-address   service-address is host<span class="token punctuation">[</span>:port<span class="token punctuation">]</span>  <span class="token comment">#虚拟服务器提供的是udp 的服务。服务器地址的形式为 主机[:端口]。</span>  --fwmark-service  -f fwmark         fwmark is an integer greater than zero  <span class="token comment">#使用fwamrk（fwmark是一个大于0的整数值）来防火墙标识集群服务，而不是地址、 端口和协议使用它，fwmark可以通过结合IPtables将多个以调度器为目标的端口定义成一个防火墙标识，由ipvsdam通过此项关联标识，则可以实现对一个IP多端口调度，即实现后端服务器可以开放多个服务</span>  --ipv6         -6                   fwmark entry uses IPv6  <span class="token comment">#与-f一起使用表示fwmark规则使用IPv6地址</span>  --scheduler    -s scheduler         one of rr<span class="token operator">|</span>wrr<span class="token operator">|</span>lc<span class="token operator">|</span>wlc<span class="token operator">|</span>lblc<span class="token operator">|</span>lblcr<span class="token operator">|</span>dh<span class="token operator">|</span><span class="token function">sh</span><span class="token operator">|</span><span class="token function">sed</span><span class="token operator">|</span>nq,                                      the default scheduler is wlc.  <span class="token comment">#指定集群服务使用的调度算法。10种调度算法被实现为内核模块。默认的调度算法是wlc</span>  --pe            engine              alternate persistence engine may be sip,                                      not <span class="token builtin class-name">set</span> by default.  <span class="token comment">#设置持久化引擎如源IP，默认不设置</span>  --persistent   -p <span class="token punctuation">[</span>timeout<span class="token punctuation">]</span>         persistent <span class="token function">service</span>  <span class="token comment">#开启持久化服务，开启它则表示在指定时间内，来自同一IP的请求都会转发到后端同一台真实服务器上进行处理，默认时间为300秒</span>  <span class="token comment">#此选项可以与SSL或FTP等协议结合使用，这对客户端始终与同一台真实服务器保持连接至关重要</span>  --netmask      -M netmask           persistent granularity mask  <span class="token comment">#使用网络掩码来屏蔽持久化来源IP的地址范围，默认值为255.255.255.255，即所有来源IP请求都会享受持久化服务</span>  --real-server  -r server-address    server-address is <span class="token function">host</span> <span class="token punctuation">(</span>and port<span class="token punctuation">)</span>  <span class="token comment">#指定真实服务器的主机IP与端口</span>  --gatewaying   -g                   gatewaying <span class="token punctuation">(</span>direct routing<span class="token punctuation">)</span> <span class="token punctuation">(</span>default<span class="token punctuation">)</span>  <span class="token comment">#指定IPVS的工作模式为DR模式，DR为默认模式</span>  --ipip         -i                   ipip encapsulation <span class="token punctuation">(</span>tunneling<span class="token punctuation">)</span>  <span class="token comment">#指定IPVS的工作模式为IP隧道模式</span>  --masquerading -m                   masquerading <span class="token punctuation">(</span>NAT<span class="token punctuation">)</span>  <span class="token comment">#指定IPVS的工作模式为NAT模式</span>  --weight       -w weight            capacity of real server  <span class="token comment">#指定真实服务器的权重值</span>  --u-threshold  -x uthreshold        upper threshold of connections  <span class="token comment">#设置转发请求的最大上连接阀值，范围为0~65535，当连接数超过指定上限时，LVS则不会转发请求</span>  --l-threshold  -y lthreshold        lower threshold of connections  <span class="token comment">#设置转发请求的下连接阀值，范围为0~65535，当连接数降低至指定值时，LVS则继续提供服务，默认值为0</span>  --mcast-interface interface         multicast interface <span class="token keyword">for</span> connection <span class="token function">sync</span>  <span class="token comment">#设置用于连接同步守护进程的组播接口</span>  --syncid sid                        syncid <span class="token keyword">for</span> connection <span class="token function">sync</span> <span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token comment">#设置连接同步守护进程的SID号，用于标识，范围0~255，默认为255</span>  --connection   -c                   output of current IPVS connections  <span class="token comment">#显示连接信息，一般与"-l"连用</span>  --timeout                           output of <span class="token function">timeout</span> <span class="token punctuation">(</span>tcp tcpfin udp<span class="token punctuation">)</span>  <span class="token comment">#显示TCP、TCPFIN、UDP超时时间信息，一般与"-l"连用</span>  --daemon                            output of daemon information  <span class="token comment">#显示连接同步守护信息，一般与"-l"连用</span>  --stats                             output of statistics information  <span class="token comment">#显示统计信息，一般与"-l"连用</span>  --rate                              output of rate information  <span class="token comment">#显示转发速率信息，一般与"-l"连用</span>  --exact                             <span class="token function">expand</span> numbers <span class="token punctuation">(</span>display exact values<span class="token punctuation">)</span>  <span class="token comment">#显示数据包和字节计数器的确切值，扩大字符长度</span>  --thresholds                        output of thresholds information  <span class="token comment">#显示阀值信息，一般与"-l"连用</span>  --persistent-conn                   output of persistent connection info  <span class="token comment">#显示持久化连接信息，一般与"-l"连用</span>  --nosort                            disable sorting output of service/server entries  <span class="token comment">#不要对虚拟服务和真实服务器的列表进行排序</span>  --sort                              does nothing, <span class="token keyword">for</span> backwards compatibility  <span class="token comment">#排序虚拟服务和真实服务器的列表。虚拟服务条目按照&lt;protocol，address，port&gt;升序排列。真实的服务器条目按&lt;地址，端口&gt;升序排列。</span>  --ops          -o                   one-packet scheduling  <span class="token comment">#指定一个虚拟服务使用单包调度。该选项只能用于UDP服务。如果指定了此选项，则创建的所有连接都仅用于转发一个数据包。选项对于将UDP数据包从相同的客户端端口调度到不同的真实服务器很有用</span>  --numeric      -n                   numeric output of addresses and ports  <span class="token comment">#地址和端口以数字格式显示，一般与"-l"连用</span>  --sched-flags  -b flags             scheduler flags <span class="token punctuation">(</span>comma-separated<span class="token punctuation">)</span>  <span class="token comment">#设置调度算法的范围标识，用于SH算法，有两个标识：sh-fallback，如果真实服务器不可用，则将其转发到其他真实服务器上。sh-port,将源地址的端口号也添加到散列键=值中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ipvsadm策略文件-etc-sysconfig-ipvsadm"><a href="#ipvsadm策略文件-etc-sysconfig-ipvsadm" class="headerlink" title="ipvsadm策略文件/etc/sysconfig/ipvsadm"></a>ipvsadm策略文件/etc/sysconfig/ipvsadm</h2><p>没有策略文件通常启动服务会报错</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">``<span class="token variable"><span class="token variable">`</span><span class="token comment">## ipvsadm工具用法</span><span class="token variable">`</span></span>``shell<span class="token comment">##管理集群服务</span>  ipvsadm -A<span class="token operator">|</span>E -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address <span class="token punctuation">[</span>-s scheduler<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p <span class="token punctuation">[</span>timeout<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-M netmask<span class="token punctuation">]</span> <span class="token punctuation">[</span>--pe persistence_engine<span class="token punctuation">]</span> <span class="token punctuation">[</span>-b sched-flags<span class="token punctuation">]</span>  <span class="token comment">#添加|修改一条虚拟服务格式</span>  ipvsadm -D -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address  <span class="token comment">#删除一个一条虚拟服务格式</span>  ipvsadm -C  <span class="token comment">#清除内核虚拟服务器表中的所有记录的格式</span>  ipvsadm -R  <span class="token comment">#从标准输入中还原虚拟服务列表的格式</span>  ipvsadm -S <span class="token punctuation">[</span>-n<span class="token punctuation">]</span>  <span class="token comment">#保存虚拟服务规则至标准输出的格式</span>      <span class="token comment">##管理集群中的RS</span>    ipvsadm -a<span class="token operator">|</span>e -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address -r server-address <span class="token punctuation">[</span>options<span class="token punctuation">]</span>  <span class="token comment">#添加|修改一条真实服务器记录的格式</span>  ipvsadm -d -t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address -r server-address  <span class="token comment">#删除一条真实服务器记录的格式</span>  ipvsadm -L<span class="token operator">|</span>l <span class="token punctuation">[</span>options<span class="token punctuation">]</span>  <span class="token comment">#列出虚拟服务器表</span>  ipvsadm -Z <span class="token punctuation">[</span>-t<span class="token operator">|</span>u<span class="token operator">|</span>f service-address<span class="token punctuation">]</span>  <span class="token comment">#虚拟服务表计数器清零</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#LVSNat模式</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/sysctl.conf</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -A -t 192.168.137.128:80 -s rr</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 192.168.137.128:80 -r 192.168.100.133 -m</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 192.168.137.128:80 -r 192.168.100.134 -m</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version <span class="token number">1.2</span>.1 <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  -<span class="token operator">&gt;</span> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  <span class="token number">192.168</span>.137.128:80 rr  -<span class="token operator">&gt;</span> <span class="token number">192.168</span>.100.133:80           Masq    <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>  -<span class="token operator">&gt;</span> <span class="token number">192.168</span>.100.134:80           Masq    <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># LvsDR模式</span><span class="token punctuation">[</span>root@localhost network-scripts<span class="token punctuation">]</span><span class="token comment"># cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOF</span><span class="token operator">&gt;</span> net.ipv4.conf.all.arp_ignore <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;</span> net.ipv4.conf.lo.arp_ignore <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&gt;</span> net.ipv4.conf.lo.arp_announce <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">&gt;</span> net.ipv4.conf.all.arp_announce <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">&gt;</span> EOF<span class="token punctuation">[</span>root@localhost network-scripts<span class="token punctuation">]</span><span class="token comment"># sysctl -p</span>net.bridge.bridge-nf-call-ip6tables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-iptables <span class="token operator">=</span> <span class="token number">1</span>net.bridge.bridge-nf-call-arptables <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.ip_forward <span class="token operator">=</span> <span class="token number">1</span>以下4行配置是新添加的：net.ipv4.conf.all.arp_ignore <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.conf.lo.arp_ignore <span class="token operator">=</span> <span class="token number">1</span>net.ipv4.conf.lo.arp_announce <span class="token operator">=</span> <span class="token number">2</span>net.ipv4.conf.all.arp_announce <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">[</span>root@localhost network-scripts<span class="token punctuation">]</span><span class="token comment"># systemctl restart NetworkManager</span><span class="token punctuation">[</span>root@localhost network-scripts<span class="token punctuation">]</span><span class="token comment"># systemctl restart network</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>-g</code>:参数设置LVS工作模式为DR模式<br> <code>-w</code>:设置权重</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@test3 ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -A -t 192.168.2.133:80 -s wrr</span><span class="token punctuation">[</span>root@test3 ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 192.168.2.133:80 -r 192.168.2.128 -g -w 1</span><span class="token punctuation">[</span>root@test3 ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -a -t 192.168.2.133:80 -r 192.168.2.129 -g -w 2</span><span class="token punctuation">[</span>root@test3 ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm -Ln</span>IP Virtual Server version <span class="token number">1.2</span>.1 <span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>Prot LocalAddress:Port Scheduler Flags  -<span class="token operator">&gt;</span> RemoteAddress:Port           Forward Weight ActiveConn InActConnTCP  <span class="token number">192.168</span>.2.133:80 wrr  -<span class="token operator">&gt;</span> <span class="token number">192.168</span>.2.128:80             Route   <span class="token number">1</span>      <span class="token number">0</span>          <span class="token number">0</span>  -<span class="token operator">&gt;</span> <span class="token number">192.168</span>.2.129:80             Route   <span class="token number">2</span>      <span class="token number">0</span>          <span class="token number">0</span><span class="token punctuation">[</span>root@test3 ~<span class="token punctuation">]</span><span class="token comment"># ipvsadm-save -n &gt; /etc/sysconfig/ipvsadm-config</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>root@test3 ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/keepalived/keepalived.conf</span><span class="token operator">!</span> Configuration File <span class="token keyword">for</span> keepalivedglobal_defs <span class="token punctuation">{</span>   notification_email <span class="token punctuation">{</span>     acassen@firewall.loc         //设置报警收件人邮箱，可以定义多个   <span class="token punctuation">}</span>   notification_email_from Alexandre.Cassen@firewall.loc    //设置发件人   smtp_server <span class="token number">127.0</span>.0.1         //定义邮件服务器   smtp_connect_timeout <span class="token number">30</span>       //连接超时时间   router_id LVS1          //设置路由ID号（需修改）   vrrp_skip_check_adv_addr   vrrp_strict   vrrp_garp_interval <span class="token number">0</span>   vrrp_gna_interval <span class="token number">0</span><span class="token punctuation">}</span>vrrp_instance VI_1 <span class="token punctuation">{</span>           //每一个vrrp_instance就定义一个虚拟路由器    state MASTER         //由初始状态状态转换为master状态（需修改）    interface ens33      //定义网络接口（根据自己的网卡名称设置，主备可以不同）    virtual_router_id <span class="token number">51</span>  //虚拟路由的id号，一般不能大于255（主辅VRID号必须一致）（需修改）    priority <span class="token number">100</span>         //服务器优先级（需修改）    advert_int <span class="token number">1</span>         //初始化通告    authentication <span class="token punctuation">{</span>          //认证机制        auth_type PASS        auth_pass <span class="token number">1111</span>      //密码（主辅服务器密码必须一致）    <span class="token punctuation">}</span>    virtual_ipaddress <span class="token punctuation">{</span>           //虚拟地址VIP（需修改）        <span class="token number">192.168</span>.2.150    <span class="token punctuation">}</span><span class="token punctuation">}</span>virtual_server <span class="token number">192.168</span>.2.150 <span class="token number">80</span> <span class="token punctuation">{</span>         //设置ipvsadm的VIP规则（需修改）    delay_loop <span class="token number">6</span>    lb_algo wrr       //设置LVS调度算法为WRR（需修改）    lb_kind DR        //设置LVS的模式为DR（需修改）    <span class="token comment">#persistence_timeout 50   //注释掉的作用是保持连接，开启后，客户端在一定时间内始终访问相同服务器(超时时间)</span>    protocol TCP    real_server <span class="token number">192.168</span>.2.128 <span class="token number">80</span> <span class="token punctuation">{</span>        //设置后端web服务器真实IP（需修改）        weight <span class="token number">1</span>          //设置权重为1（需修改）        TCP_CHECK <span class="token punctuation">{</span>              //对后台real_server做健康检查            connect_timeout <span class="token number">3</span>   //等待超时时间<span class="token punctuation">(</span>访问时等待3秒<span class="token punctuation">)</span>            nb_get_retry <span class="token number">3</span>    //失败后尝试次数<span class="token punctuation">(</span>访问失败后再尝试3次访问<span class="token punctuation">)</span>            delay_before_retry <span class="token number">3</span>   //每隔多久执行一次<span class="token punctuation">(</span>每隔3秒执行一次<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    real_server <span class="token number">192.168</span>.2.129 <span class="token number">80</span> <span class="token punctuation">{</span>         //设置后端web服务器真实IP（需修改）        weight <span class="token number">2</span>        //设置权重为2（需修改）        TCP_CHECK <span class="token punctuation">{</span>          //对后台real_server做健康检查            connect_timeout <span class="token number">3</span>            nb_get_retry <span class="token number">3</span>            delay_before_retry <span class="token number">3</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoolGle Chrome默认非安全端口</title>
      <link href="/2021/08/14/goolgle-chrome-mo-ren-fei-an-quan-duan-kou/"/>
      <url>/2021/08/14/goolgle-chrome-mo-ren-fei-an-quan-duan-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="Google-Chrome-默认非安全端口列表"><a href="#Google-Chrome-默认非安全端口列表" class="headerlink" title="Google Chrome 默认非安全端口列表"></a>Google Chrome 默认非安全端口列表</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1,    // tcpmux7,    // echo9,    // discard11,   // systat13,   // daytime15,   // netstat17,   // qotd19,   // chargen20,   // ftp data21,   // ftp access22,   // ssh23,   // telnet25,   // smtp37,   // time42,   // name43,   // nicname53,   // domain77,   // priv-rjs79,   // finger87,   // ttylink95,   // supdup101,  // hostriame102,  // iso-tsap103,  // gppitnp104,  // acr-nema109,  // pop2110,  // pop3111,  // sunrpc113,  // auth115,  // sftp117,  // uucp-path119,  // nntp123,  // NTP135,  // loc-srv /epmap139,  // netbios143,  // imap2179,  // BGP389,  // ldap465,  // smtp+ssl512,  // print / exec513,  // login514,  // shell515,  // printer526,  // tempo530,  // courier531,  // chat532,  // netnews540,  // uucp556,  // remotefs563,  // nntp+ssl587,  // stmp?601,  // ??636,  // ldap+ssl993,  // ldap+ssl995,  // pop3+ssl2049, // nfs3659, // apple-sasl / PasswordServer4045, // lockd6000, // X116665, // Alternate IRC [Apple addition]6666, // Alternate IRC [Apple addition]6667, // Standard IRC [Apple addition]6668, // Alternate IRC [Apple addition]6669, // Alternate IRC [Apple addition]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2021/08/14/docker/"/>
      <url>/2021/08/14/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="docker安装部署添加阿里云镜像加速器"><a href="#docker安装部署添加阿里云镜像加速器" class="headerlink" title="docker安装部署添加阿里云镜像加速器"></a>docker安装部署添加阿里云镜像加速器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo yum install -y yum-utilssudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo    ##安装docker    sudo yum install docker-ce docker-ce-cli containerd.io##添加阿里云镜像加速器sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{  "registry-mirrors": ["https://rwo46igw.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reloadsudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker version#显示docker的版本信息docker info#显示docker的系统信息，包括镜像和容器的数量docker --help#帮助命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.docker.com/reference/">docker帮助文档</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">##镜像命令[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   5 months ago   13.3kB#解释REPOSITORY镜像的仓库源TAG镜像的标签IMAGE ID镜像的idCREATED镜像的创建时间SIZE镜像的大小#-a，--all列出所有镜像-q，--quiet只显示镜像的id[root@localhost ~]# docker search mysql#搜索镜像[root@localhost ~]# docker pull mysql#下载镜像[root@localhost ~]# docker rmi -f 容器id#删除指定容器[root@localhost ~]# docker rmi -f $(docker images -aq)#删除所有镜像##容器命令docker run [images]#参数--name='name'容器名字，用来区分容器-d后台方式运行-it使用交互模式运行，进入容器查看内容-p制定容器端口 -p 主机端口:容器端口-P随机指定端口docker ps#列出当前正在运行的容器-a#列出当前正在运行的容器+带出历史运行过的容器-n=?#显示最近创建的容器-q#只显示容器编号#退出容器exit#容器停止退出CTRL+P+Q #不停止退出#删除容器docker rm 容器id#删除指定容器，不能删除正在运行的容器，rm -f 强制删除docker rm -f $(docker ps -aq)#删除所有的容器docker ps -a -q|xargs docker rm #删除所有的容器#启动和停止容器docker start 容器id#启动容器docker restart 容器id#重启容器docker stop 容器id#停止当前正在运行的容器docker kill 容器id#强制停止容器#其他命令docker run -d 镜像名#docker容器使用后台运行，必须要有一个前台进程，docker发现没有应用，就会自动停止，容器启动后，发现自己没有提供服务，会立刻停止docker logs -tf --tail 10  #查看日志  -f 跟踪日志输出docker top 容器id#查看容器中进程信息docker inspect 容器id#查看镜像的元数据#进入当前正在运行的容器docker exec -it 容器id /bash/shelldocker attach 容器id#从容器内拷贝文件到主机上docker cp 容器id:容器内路径 目的主机路径docker stats#监控容器资源消耗<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">attach    Attach to a running container  #当前shell下attach连接指定运行镜像build     Build an image from a Dockerfile  #通过Dockerfile定制镜像commit    Create a new image from a container's changes  #提交当前容器为新的镜像cp    Copy files/folders from a container to a HOSTDIR or to STDOUT  #从容器中拷贝指定文件或者目录到宿主机中create    Create a new container  #创建一个新的容器，同run 但不启动容器diff    Inspect changes on a container's filesystem  #查看docker容器变化events    Get real time events from the server#从docker服务获取容器实时事件exec    Run a command in a running container#在已存在的容器上运行命令export    Export a container's filesystem as a tar archive  #导出容器的内容流作为一个tar归档文件(对应import)history    Show the history of an image  #展示一个镜像形成历史images    List images  #列出系统当前镜像import    Import the contents from a tarball to create a filesystem image  #从tar包中的内容创建一个新的文件系统映像(对应export)info    Display system-wide information  #显示系统相关信息inspect    Return low-level information on a container or image  #查看容器详细信息kill    Kill a running container  #kill指定docker容器load    Load an image from a tar archive or STDIN  #从一个tar包中加载一个镜像(对应save)login    Register or log in to a Docker registry#注册或者登陆一个docker源服务器logout    Log out from a Docker registry  #从当前Docker registry退出logs    Fetch the logs of a container  #输出当前容器日志信息pause    Pause all processes within a container#暂停容器port    List port mappings or a specific mapping for the CONTAINER  #查看映射端口对应的容器内部源端口ps    List containers  #列出容器列表pull    Pull an image or a repository from a registry  #从docker镜像源服务器拉取指定镜像或者库镜像push    Push an image or a repository to a registry  #推送指定镜像或者库镜像至docker源服务器rename    Rename a container  #重命名容器restart    Restart a running container  #重启运行的容器rm    Remove one or more containers  #移除一个或者多个容器rmi    Remove one or more images  #移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)run    Run a command in a new container  #创建一个新的容器并运行一个命令save    Save an image(s) to a tar archive#保存一个镜像为一个tar包(对应load)search    Search the Docker Hub for images  #在dockerhub中搜索镜像start    Start one or more stopped containers#启动容器stats    Display a live stream of container(s) resource usage statistics  #统计容器使用资源stop    Stop a running container  #停止容器tag         Tag an image into a repository  #给源中镜像打标签top       Display the running processes of a container #查看容器中运行的进程信息unpause    Unpause all processes within a container  #取消暂停容器version    Show the Docker version information#查看容器版本号wait         Block until a container stops, then print its exit code  #截取容器停止时的退出状态值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h3><h4 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docekr commit 提交容器成为一个新的副本    #保存当前容器状态docker commit -m="提交的描述信息" -a="作者" 容器id 目标镜像名：[tag]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h3><p>容器的持久化和同步操作！容器间也是可以数据共享的！</p><h4 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h4><blockquote><p>方式一：直接使用命令挂载   -v</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker run -it -v 主机目录：容器目录#MySQL数据持久化# 运行容器，需要做数据挂载  #安装启动MySQL，需要配置密码！！#官方测试：docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag#启动-d 后台运行-p 端口映射-v 卷挂载-e 环境配置--name 容器名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#匿名挂载-v 容器内路径！docker run -d -P --name nginx1 -v /etc/nginx nginx#查看volume的情况docker volume ls#具名挂载docker run -d -P --name nginx2 -v juming-nginx:etc/nginx nginx-v 容器内路径#匿名挂载-v 卷名：容器内路径#具名挂载-v /宿主机路径：：容器内路径#指定路径挂载#拓展-v 容器内路径：ro   rw  改变读写权限roreadonly#只读rw  readwrite#可读可写ro  只要看到就说明ro这个路径只能通过宿主机来操作，容器内部是无法操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile 就是用来构建 docker 镜像的构建文件，命令脚本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#创建一个dockerfile文件，名字随机建议Dockerfile#文件内容  指令（大写） 参数FROM centosVOLUME ["/volume01","/volume02"]CMD echo "----end----"CMD /bin/bash#每个命令就是镜像的一层<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
